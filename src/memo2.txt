auxu.c:	case 'g':
auxu.c:  case 'g':
cast.c:      type='g'+castflag;
cast.c:  case 'g':
cast.c:  case 'g':
disp.c:	case 'g': 
func.c:      presult3->type='g';
func.c:    case 'g': /* floating or exponential */
ifunc.c:      case 'g':
ifunc.c:	case 'g':
ifunc.c:    else if(strcmp(paraname,"bool")==0) type='g';
ifunc.c:    case 'g':
ifunc.c:      case 'g':
ifunc.c:      case 'g':
ifunc.c:  case 'g': 
ifunc.c:	case 'g':
ifunc.c:	case 'g':
ifunc.c:	case 'g':
ifunc.c:	case 'g':
ifunc.c:	case 'g':
ifunc.c:	case 'g':
ifunc.c:	case 'g':
ifunc.c:      case 'g':
ifunc.c:	case 'g':
ifunc.c:	case 'g':
ifunc.c:    case 'g':
ifunc.c:      case 'g':
ifunc.c:	  case 'g':
ifunc.c:    case 'g':
inherit.c:	      case 'g':
init.c:    case 'g': /* whole function compile off */
init.c:  /* G__constvar=G__CONSTVAR; G__var_type='g'; G__getexpr("TRUE=1"); */
init.c:  /* G__constvar=G__CONSTVAR; G__var_type='g'; G__getexpr("FALSE=0"); */
init.c:  G__constvar=G__CONSTVAR; G__var_type='g'; G__getexpr("true=1");
init.c:  G__constvar=G__CONSTVAR; G__var_type='g'; G__getexpr("false=0");
loadfile.c:  * The + or ++ can also be followed by either a 'g'
loadfile.c:            case 'g': compiler_option = "kfg"; break;
loadfile.c:            case 'g': compiler_option = "kg"; break;
macro.c:    type='g'+ispointer;
new.c:      else if(strcmp(type,"bool")==0) var_type='g';
newlink.c:  case 'g':
newlink.c:        case 'g':
newlink.c:        case 'g':
newlink.c:        case 'g':
newlink.c:  case 'g':
newlink.c:	       ||'g'==var->type[j]
newlink.c:	       && 'g'!=var->type[j]
newlink.c:	   || 'g'==var->type[j]
newlink.c:  if('g'==buf->type && buf->ref) 
newlink.c:  if('g'==buf->type && buf->ref) 
opr.c:  case 'g': /* bool */
opr.c:  case 'g': /* bool */
parse.c:	      G__DEFVAR('g');
parse.c:	      G__DEFREFVAR('g');
pause.c:      if('g'==command[0]) G__varmonitor(G__sout,&G__global,command+index,"",0);
pcode.c:  G__ASM_GET_INT(int,'g');
pcode.c:  G__ASM_GET_INT(unsigned char,'g');
pcode.c:  G__ASM_GET_INT_P1(int,'g');
pcode.c:  G__ASM_GET_INT_P1(unsigned char,'g');
pcode.c:  G__ASM_GET_INT_PN(int,'g');
pcode.c:  G__ASM_GET_INT_PN(unsigned char,'g');
pcode.c:  G__ASM_GET_INT_P10(int,'g');
pcode.c:  G__ASM_GET_INT_P10(unsigned char,'g');
pcode.c:  G__ASM_GET_REFINT(int,'g');
pcode.c:  G__ASM_GET_REFINT(unsigned char,'g');
pcode.c: case 'g': *(int*)p=v?1:0;/*1604*/break;  \
pcode.c: case 'g': *(unsigned char*)p=v?1:0;/*1604*/break;  \
pcode.c:    case 'g': *pinst = (long)G__LD_p0_bool; break;
pcode.c:    case 'g': *pinst = (long)G__LD_p1_bool; break;
pcode.c:    case 'g': *pinst = (long)G__LD_pn_bool; break;
pcode.c:    case 'g': *pinst = (long)G__ST_p0_bool; break;
pcode.c:    case 'g': *pinst = (long)G__ST_p1_bool; break; /* to be fixed */
pcode.c:    case 'g': *pinst = (long)G__ST_pn_bool; break; /* to be fixed */
pcode.c:    case 'g': *pinst = (long)G__LD_Rp0_bool; break; /* to be fixed */
pcode.c:    case 'g': *pinst = (long)G__ST_Rp0_bool; break; /* to be fixed */
pcode.c:    case 'g': *pinst = (long)G__LD_RP0_bool; break; /* to be fixed */
sizeof.c:    case 'g':
sizeof.c:      case 'g':
sizeof.c:  case 'g':
tmplt.c:      deftmpfunc->func_para.type[tmp] = 'g';
typedef.c:    type='g';
val2a.c:  case 'g':
val2a.c:    case 'g': strcpy(string,"bool"); break;
val2a.c:    case 'g':
val2a.c:      result.type='g';
var.c:      case 'g': /* bool */
var.c:      case 'g': /* bool */
var.c:	G__GET_VAR(G__INTALLOC ,int,G__letbool ,'g' ,'G')
var.c:	G__GET_VAR(G__CHARALLOC ,unsigned char ,G__letint ,'g' ,'G')
var.c:  case 'g': /* bool */
bc_exec.cxx:	case 'g':
bc_parse.cxx:      case 'g':
bc_parse.cxx:        case 'g':
bc_type.cxx:  case 'g': //bool
bc_type.cxx:  case 'g': //bool
bc_type.cxx:  case 'g': //bool
bc_type.cxx:  case 'g': //bool
bc_type.cxx:  case 'g': //bool
bc_type.cxx:  case 'g': //bool
bc_type.cxx:  case 'g': //bool
bc_type.cxx:  case 'g': //bool
bc_type.cxx:  case 'g': //bool
bc_type.cxx:    type = 'g'; 
bc_type.cxx:  case 'g': //bool
expr.c:      return('G'); /* greater or equal */
expr.c:  case 'G':
expr.c:	  operator2 = 'G';
expr.c:  case 'G': /* >= */
func.c:    case 'G': /* floating or exponential */
init.c:    case 'G': /* trace dump */
opr.c:  case 'G': /* >= */
opr.c:    case 'G': /* >= */
opr.c:	case 'G': /* >= */
opr.c:	case 'G': /* >= */
opr.c:      case 'G': /* >= */
opr.c:    case 'G': /* >= */
opr.c:  case 'G': 
parse.c:	      G__DEFVAR('G');
pause.c:      else if('G'==command[0]) G__varmonitor(G__sout,&G__global,command+index,"",0);
pcode.c:  G__ASM_GET_REFPINT(int,'G');
pcode.c:  G__ASM_GET_REFPINT(unsigned char,'G');
pcode.c:  case 'G': /* >= */
pcode.c:    case 'G': *pinst = (long)G__LD_P10_double; break;
pcode.c:    case 'G': *pinst = (long)G__ST_P10_bool; break;
pcode.c:  case 'G': /* >= */
pcode.c:  case 'G':
sizeof.c:  case 'G': /* bool */
val2a.c:    case 'G':
value.c:  case 'G':
value.c:  case 'G':
var.c:      case 'G': /* bool */
var.c:	G__GET_VAR(G__INTALLOC ,int,G__letbool ,'g' ,'G')
var.c:	G__GET_VAR(G__CHARALLOC ,unsigned char ,G__letint ,'g' ,'G')
var.c:      case 'G': /* bool */
var.c:  case 'G': /* bool */
