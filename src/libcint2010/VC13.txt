                         C/C++ COMPILER OPTIONS


                              -最適化-

/O1 スペースを最小化する                /O2 スペースを最大化する
/Ob<n> インライン展開 (既定値 n=0)      /Od 最適化を無効にする (既定)
/Og グローバルな最適化を有効にする      /Oi[-] 組み込み関数を有効にする
/Os コード スペースを優先する           /Ot コードのスピードを優先する
/Ox 最大限の最適化                      
/Oy[-] フレーム ポインターの省略を有効にする 
/favor:<blend|ATOM> 次のいずれか 1 つのプロセッサを最適化対象として選択します:
    blend - いくつかの異なる x86 プロセッサ用の最適化の組み合わせ
    ATOM - Intel(R) Atom(TM) プロセッサ 

                             -コードの生成-

/Gw[-] リンカー用の個別のグローバル変数 
/GF 読み取り専用の文字列プールを有効にする
/Gm[-] 最小リビルドを有効にする         /Gy[-] リンカーの別の機能
/GS[-] セキュリティ チェックを有効にする/GR[-] C++ RTTI を有効にする
/GX[-] C++ EH を有効にする (/EHsc と同様)
/EHs C++ EH を有効にする (SEH 例外なし) /EHa C++ EH を有効にする (SEH 例外あり)
/EHc extern "C" は nothrow に既定する   
/fp:<except[-]|fast|precise|strict> 浮動小数点モデルの選択:
    except[-] - コードの生成中に浮動小数点の例外を考慮します
    fast - "fast" 浮動小数点モデルです。結果の予測が困難になります
    precise - "precise" 浮動小数点モデルです。結果は予測可能です
    strict - "strict" 浮動小数点モデルです (/fp:except を暗示)
/fp:except を指定しても /Qfast_transcendentals を指定するとインライン FP 組み込みが生成されます
/Qpar[-] 並列コード生成を有効にする     
/Qpar-report:1 自動並行化診断。並行化されたループを示します
/Qpar-report:2 自動並行化診断。並行化されていないループを示します
/Qvec-report:1 自動ベクター化診断。ベクター化されたループを示します
/Qvec-report:2 自動ベクター化診断。ベクター化されていないループを示します
/GL[-] リンク時のコード生成を行う       
/volatile:<iso|ms> 揮発性モデルを選択します:
    iso - 取得/解除セマンティックは揮発性アクセスで保証されません
    ms  - 取得/解除セマンティックは揮発性アクセスで保証されます
/GA Windows アプリケーション用の最適化を行う
/Ge すべての関数にスタック チェックを強制する
/Gs[num] スタック チェックの呼び出しを制御する
/Gh _penter 関数呼び出しを有効にする    /GH _pexit 関数呼び出しを有効にする
/GT ファイバー セーフの TLS アクセスを生成する
/RTC1 高速チェックを有効にする (/RTCsu) /RTCc 小さい型のチェックに変換する
/RTCs スタック フレーム ランタイム チェック
/RTCu 初期化されていないローカル変数のチェック
/clr[:option] 次のオプションが指定される場合、共通言語ランタイム用にコンパイルする:
    pure - ネイティブな実行可能コードではなく、IL のみの出力ファイルを作成する
    safe - IL のみの検証可能な出力ファイルを作成する
    oldSyntax - Visual C++ 2002/2003 からのマネージ拡張の構文を受け入れる
    initialAppDomain - Visual C++ 2002 の最初の AppDomain 動作を有効にする
    noAssembly - アセンブリを生成しない 
    nostdlib - 既定の \clr ディレクトリを無視する
/Gd __cdecl の呼び出し規約              /Gr __fastcall の呼び出し規約
/Gz __stdcall の呼び出し規約            
/GZ スタック チェックを有効にする (/RTCs)
/Gv __vectorcall の呼び出し規約         
/QIfist[-] ftol() ではなく FIST を使用する
/hotpatch ホットパッチ可能なイメージのための関数パディングを確認する
/arch:<IA32|SSE|SSE2|AVX> CPU アーキテクチャの必要最低条件:
   IA32 - 拡張命令を使用しない。浮動小数点に x87 を使用する
   SSE - SSE 対応の CPU で使用できる命令を使用可能にする
   SSE2 - (既定) SSE2 対応の CPU で使用できる命令を使用可能にする
   AVX - Intel(R) の Advanced Vector Extensions 命令を使用可能にします
/Qimprecise_fwaits は "try" 内ではなく "try" の境界上でのみ FWAITs を生成します
/Qsafe_fp_loads 安全な FP の読み込みを生成します

                              -出力ファイル-

/Fa[file] アセンブリ リスト ファイル名を指定する
/FA[scu] アセンブリ リストを設定する    /Fd[file] .PDB ファイル名を指定する
/Fe<file> .EXE ファイル名を指定する     /Fm[file] マップ ファイル名を指定する
/Fo<file> オブジェクト ファイル名を指定する
/Fp<file> プリコンパイル済みヘッダー ファイル名を指定する
/Fr[file] ソース ブラウザー ファイル名を指定する
/FR[file] .SBR 拡張ファイルを指定する   
/Fi[file] 前処理されたファイルに名前を付けます
/Fd: <file> .PDB ファイル名を指定する   /Fe: <file> 実行可能ファイル名を指定する
/Fm: <file> マップ ファイル名を指定する 
/Fo: <file> オブジェクト ファイル名を指定する
/Fp: <file> .PCH ファイル名を指定する   /FR: <file> .SBR 拡張ファイルを指定する
/Fi: <file> 前処理されたファイル名を指定する
/doc[file] XML ドキュメント コメントを処理し、.xdc ファイルの名前を指定する

                              -プリプロセッサ-

/AI<dir> アセンブリ検索パスに追加する   
/FU<file> アセンブリやモジュールを強制的に追加する 
/C コメントを削除しない                 /D<name>{=|#}<text> マクロを定義する
/E stdout に前処理する                  /EP stdout に前処理する、#line なし
/P ファイルを前処理する                 /Fx 挿入コードをファイルにマージする
/FI<file> 必ず使用されるインクルード ファイル名を指定する
/U<name> 定義済みのマクロを削除する     /u 定義済みのマクロをすべて削除する
/I<dir> インクルード検索パスに追加する  /X "standard places" を無視する

                                -言語-

/Zi デバッグ情報を有効にする            /Z7 古い形式のデバッグ情報を有効にする
/Zp[n] 構造体を n バイト境界でパックする/Za 拡張子を無効にする
/Ze 拡張子を有効にする (既定)           /Zl .OBJ で既定のライブラリ名を省略する
/Zg 関数プロトタイプを生成する          /Zs 構文チェックのみ
/vd{0|1|2} vtordisp を無効/有効にする   /vm<x> メンバーへのポインターの種類
/Zc:arg1[,arg2] C++ 言語準拠です。使用できる引数:
    forScope[-] - スコープ ループに標準 C++ を適用する
    wchar_t[-] - wchar_t はネイティブ型で typedef ではない
    auto[-] - 新しい標準 C++ の解釈を auto に適用します
    trigraphs[-] - トライグラフを有効にします (既定では off)
    rvalueCast[-] - 標準 C++ の明示的な型変換規則を適用する
    strictStings[-] - 文字列リテラルから [char|wchar_t]* への変換を無効にします (既定では off)
/ZW WinRT 言語拡張を有効にする          
/ZI エディット コンティニュのデバッグ情報を有効にする
/openmp OpenMP 2.0 言語拡張を有効にする 

                              -その他-

@<file> オプション応答ファイル          
/?, /help このヘルプ メッセージを出力する
/bigobj 拡張オブジェクトの形式を生成する/c コンパイルのみ。リンクは行わない
/errorReport:option 内部コンパイラ エラーを Microsoft に報告する
    none - レポートを送信しない                
    prompt - レポートをすぐに送信するためにメッセージを表示する
    queue - 次の管理者ログイン時に、レポートを送信するためのメッセージを表示する (既定)
    send - レポートを自動的に送信する         
/FC 診断で完全パス名を使用する          /H<num> 最大の外部名の長さ
/J 文字型を既定で unsigned にする       
/MP[n] はコンパイル時に最大で 'n' 個のプロセスが使用されます
/nologo 著作権メッセージを表示しない    
/sdl 追加のセキュリティ機能と警告を有効にする
/showIncludes インクルード ファイル名を表示する
/Tc<source file> ファイルを .c としてコンパイルする
/Tp<source file> ファイルを .cpp としてコンパイルする
/TC すべてのファイルを .c としてコンパイルする
/TP すべてのファイルを .cpp としてコンパイルする
/V<string> バージョン文字列を設定する   /w 警告をすべて無効にする
/wd<n> 警告 n を無効にする              /we<n> 警告 n をエラーとして扱う
/wo<n> 警告 n を 1 度だけ表示する       /w<l><n> n の警告レベル 1-4 を設定する
/W<n> 警告レベルを設定する (既定 n=1)   /Wall 警告をすべて有効にする
/WL 1 行診断を有効にする                /WX 警告をエラーとして扱う
/Yc[file] .PCH ファイルを作成する       
/Yd デバッグ情報をすべての .OBJ に保存する
/Yl[sym] デバッグ ライブラリで使用する .PCH 参照を投入する
/Yu[file] .PCH ファイルを使用する       /Y- PCH オプションをすべて無効にする
/Zm<n> 最大メモリの割り当て (既定の %)  /FS 強制的に MSPDBSRV.EXE を使用する
/Wp64 64 ビット ポート警告を有効にする  

                                -リンク-

/LD .DLL を作成する                     /LDd .DLL デバッグ ライブラリを作成する
/LN .netmodule を作成する               /F<num> スタック サイズを設定する
/link [リンカー オプションとライブラリ] /MD MSVCRT.LIB でリンクする
/MT LIBCMT.LIB でリンクする             
/MDd MSVCRTD.LIB デバッグ ライブラリでリンクする
/MTd LIBCMTd.LIB デバッグ ライブラリでリンクする

                              -コード分析-

/analyze[-] ネイティブの分析を有効にする
/analyze:quiet[-] コンソールに警告を表示しない
/analyze:log<name> ファイルに警告を記録する
/analyze:autolog ログの記録先: *.pftlog 
/analyze:autolog:ext<ext> *.<ext> にログを記録する
/analyze:autolog- ログ ファイルなし     /analyze:WX- 致命的でない警告
/analyze:stacksize<num> スタック フレームの最大サイズ
/analyze:max_paths<num> パスの最大数    /analyze:only 分析のみ、コード生成なし

