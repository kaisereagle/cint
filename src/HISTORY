/* /% C %/ */
/***********************************************************************
 * cint (C/C++ interpreter)
 ************************************************************************
 * Source file HISTORY
 ************************************************************************
 * Description:
 *  C/C++ interpreter parser source enhancement history. 
 ************************************************************************
 * Copyright(c) 1991~1996  [hp] Hewlett Packard Japan, All rights reserved
 * Copyright(c) 1995~2005  Masaharu Goto
 * Author                  Masaharu Goto (cint@pcroot.cern.ch)
 *
 ************************************************************************
 * history
 *
 *   rev        : 1.0  18 Mar 1991
 *              : 1.1  19 Mar 1991
 *              : 1.2  22 Mar 1991
 *              : 1.3  28 Mar 1991
 *              : 1.4  29 Mar 1991
 *              : 1.5   1 Apr 1991
 *              : 1.6   9 Apr 1991
 *              : 1.7  12 Apr 1991
 *              : 1.8  28 May 1991
 *              : 1.9  29 May 1991
 *              : 1.10 27 Jun 1991
 *              : 1.11  1 Jul 1991
 *              : 1.12  2 Jul 1991
 *              : 1.13  3 Jul 1991
 *              : 1.14  4 Jul 1991
 *              : 1.15  5 Jul 1991
 *              : 1.16  8 Jul 1991   SCCS ver 1.52
 *              : 1.17 16 Jul 1991   SCCS ver 1.58
 *              : 1.18 18 Jul 1991   SCCS ver 1.61
 *              : 1.19 23 Jul 1991   SCCS ver 1.63
 *              : 1.20 24 Jul 1991   SCCS ver 1.67
 *              : 1.21 24 Jul 1991   SCCS ver 1.68
 *              : 1.22 26 Jul 1991   SCCS ver 1.68
 *              : 1.23 31 Jul 1991   SCCS ver 1.74
 *              : 1.24 29 Aug 1991   SCCS ver 1.80
 *              : 1.25 30 Aug 1991   SCCS ver 1.88
 *              : 1.26  3 Sep 1991   SCCS ver 1.93
 *              : 1.27  5 Sep 1991   SCCS ver 1.95
 *              : 1.28  9 Sep 1991   SCCS ver 1.96
 *              : 1.29 13 Sep 1991   SCCS ver 1.100
 *              : 1.30 14 Sep 1991   SCCS ver 1.100
 *              : 1.31 20 Sep 1991   SCCS ver 1.108
 *              : 1.32 23 Sep 1991   SCCS ver 1.110
 *              : 1.33 25 Sep 1991   SCCS ver 1.111
 *              : 1.34  6 Oct 1991   SCCS ver 1.113
 *              : 1.35 14 Oct 1991   SCCS ver 1.115
 *              : 1.36 22 Oct 1991   SCCS ver 1.117
 *              : 1.37 25 Oct 1991   SCCS ver 1.117
 *              : 1.38 25 Oct 1991   SCCS ver 1.117
 *              : 1.39 31 Oct 1991   SCCS ver 1.120 s300/s700
 *              : 1.40  2 Nov 1991   SCCS ver 1.130 speed tune up
 *              : 1.41  5 Nov 1991   SCCS ver 1.133 bug fix
 *              : 1.42  5 Nov 1991   SCCS ver 1.133 speed tune up 2
 *              : 1.43  5 Nov 1991   SCCS ver 1.141 bug fix for 700
 *              : 1.44  5 Nov 1991   SCCS ver 1.142 
 *              : 1.45  5 Nov 1991   SCCS ver 1.143 
 *              : 1.46  6 Nov 1991   SCCS ver 1.147 signal handling
 *              : 1.47  8 Nov 1991   SCCS ver 1.148 error check
 *              : 1.48 11 Nov 1991   SCCS ver 1.149 error check
 *              : 1.49  2 Dec 1991   SCCS ver 1.150 interrupt
 *              : 1.50  6 Jan 1992   SCCS ver 1.151 interrupt
 *              : 1.51 13 Jan 1992   SCCS ver 1.152 return(func(a,b))
 *              : 1.52 14 Jan 1992   SCCS ver 1.152 gets(),getc(),getchar()
 *              : 1.53 17 Jan 1992   SCCS ver 1.152 alarm(0)
 *              : 1.54 17 Jan 1992   SCCS ver 1.155 func(array[])
 *              : 1.55 20 Jan 1992   SCCS ver 1.156 G__graph()
 *              : 1.56 29 Jan 1992   SCCS ver 1.157 G__exit() key 
 *              : 1.57 31 Jan 1992   SCCS ver 1.157 Redisp
 *              : 1.58  1 Feb 1992   SCCS ver 1.171 Redisp
 *              : 1.59  4 Feb 1992   SCCS ver 1.173 &(variable)
 *              : 1.60  7 Feb 1992   SCCS ver 1.173 #ifdef,#ifndef,#else,#endif
 *              : 1.61 10 Feb 1992   SCCS ver 1.180 hash varname
 *              : 1.62 12 Feb 1992   SCCS ver 1.180 hash ifunc,typedef,struct
 *              : 1.63 12 Feb 1992   SCCS ver 1.182 G__getexpr tune up
 *              : 1.64 12 Feb 1992   SCCS ver 1.183 /search keyword
 *              : 1.65 13 Feb 1992   SCCS ver 1.185 G__letvariable,G__setup
 *              : 1.66 14 Feb 1992   SCCS ver 1.188 G__genfunc.cawk
 *              : 1.67 14 Feb 1992   SCCS ver 1.189 G__compiled_func(...,hash)
 *              : 1.68 17 Feb 1992   SCCS ver 1.190 case xx : at preRUN
 *                 A big jump from 1.68 to 1.69. get -r 1.190 to return to 1.68
 *                 The SCCS file at this point is stored to /mo/gotom/src/GCI/
 *                 s.GCI.arc
 *              : 1.69 19 Feb 1992   SCCS ver 1.191 *char to G__value. bad s700
 *              : 1.70 19 Feb 1992   SCCS ver 1.192 s700 fix
 *
 *              : 1.70 19 Feb 1992   SCCS ver 1.1   s700 new name as cint
 *              : 1.71 20 Feb 1992   SCCS ver 1.2   *conststring
 *              : 1.71 20 Feb 1992   SCCS ver 1.3   G__stub.c
 *              : 1.72 21 Feb 1992   SCCS ver 1.4   G__listfunc()
 *              : 1.73 21 Feb 1992   SCCS ver 1.5   do{}while();
 *              : 1.74 21 Feb 1992   SCCS ver 1.6   static variable
 *              : 1.75 24 Feb 1992   SCCS ver 1.9   global static, auto
 *              : 1.76 25 Feb 1992   SCCS ver 1.9   G__devine_var()
 *              : 1.77 25 Feb 1992   SCCS ver 1.10  Let G__null for existvar
 *              : 1.78 25 Feb 1992   SCCS ver 1.11  globalcomp redundancy
 *              : 1.79 26 Feb 1992   SCCS ver 1.13  
 *              : 1.80 28 Feb 1992   SCCS ver 1.13  
 *              : 1.81  3 Mar 1992   SCCS ver 1.14  casting
 *              : 1.82  4 Mar 1992   SCCS ver 1.17  casting improvement
 *              : 1.83  5 Mar 1992   SCCS ver 1.18  varmonitor
 *              : 1.84  9 Mar 1992   SCCS ver 1.18  G__varmonitor
 *              : 1.85 11 Mar 1992   SCCS ver 1.20  ?:
 *              : 1.86 12 Mar 1992   SCCS ver 1.22  typedef int long,,,
 *              : 1.87 13 Mar 1992   SCCS ver 1.23  library function
 *              : 1.88 13 Mar 1992   SCCS ver 1.24  library function
 *              : 1.89 16 Mar 1992   SCCS ver 1.27  function type
 *              : 1.90 16 Mar 1992   SCCS ver 1.28  fflush at G__pause()
 *              : 1.91 17 Mar 1992   SCCS ver 1.29  fflush at G__pause()
 *              : 1.92 31 Mar 1992   SCCS ver 1.31  bug fix at char *a=" ";
 *              : 1.93  2 Apr 1992   SCCS ver 1.32  G__cint() main() compiled
 *              : 1.94  3 Apr 1992   SCCS ver 1.33  G__othermain
 *              : 1.95  7 Apr 1992   SCCS ver 1.34  readline GIO
 *              : 1.96  8 Apr 1992   SCCS ver 1.35  word completion for GIO
 *              : 1.97 10 Apr 1992   SCCS ver 1.38  completion bug fix for 700
 *              : 1.98 28 Apr 1992   SCCS ver 1.5   error timeout message
 *              : 1.99  6 May 1992   SCCS ver 1.6   makecint -u -makelib
 *              : 1.100 7 May 1992   SCCS ver 1.7   ANSI support effort start
 *              : 1.101 18 May 1992  SCCS ver 1.8   ANSI support , const
 *              : 1.104 19 May 1992  SCCS ver 1.x   enum
 *              : 1.105 19 May 1992  SCCS ver 1.x   typedef enum
 *              : 1.106 20 May 1992  SCCS ver 1.x   ANSI header,enum bug fix
 *              : 1.107 21 May 1992  SCCS ver 1.9   nested typedef,struct bugfix
 *              : 1.108 22 May 1992  SCCS var 1.10  G__fgetstream,G__fgetname
 *                                               /mo/gotom/src/GCI/cintansi.arc
 *                                                  to restore 1.107
 *              : 1.109 22 May 1992  SCCS var 1.11  G__fgetstream,G__fgetname
 *              : 1.110 25 May 1992  SCCS var 1.12  bug fix
 *              : 1.111 26 May 1992  SCCS var 1.12  bug fix
 *              : 1.112 26 May 1992  SCCS var 1.15  #if,defined()
 *              : 1.113 29 May 1992  SCCS var 1.16  volatile,*(cast)(number)
 *                                                  pointer +,-,++,--
 *              : 1.114  2 Jun 1992  SCCS var 1.17  SIGKILL not supported
 *              : 1.115  9 Jun 1992  SCCS var 1.20  err bit-field,array init
 *              : 1.116  9 Jun 1992  SCCS var 1.20  japanese error message
 *              : 1.117 10 Jun 1992  SCCS var 1.21  {statements} in debug
 *                                                  bug fix G__test(),
 *                                                  G__charformatter() fixed
 *              : 1.118 12 Jun 1992  SCCS var 1.22  Speedup by switch{' ',EOF}
 *              : 1.119 19 Jun 1992  SCCS var 1.26  Speedup by disp,break
 *                                                  G__NODEBUG option added
 *              : 1.120 23 Jun 1992  SCCS var 1.27  Shared library
 *              : 1.121 26 Jun 1992  SCCS var 1.27  dynamic link library
 *              : 2.0   26 Jun 1992  SCCS var 1.27  same as 1.121
 *              : 2.0.1  1 Jul 1992  SCCS var 1.29  bit-field compile ignore
 *              : 2.0.2  2 Jul 1992  SCCS var 1.29  unsigned parsing, char*
 *              : 2.0.3  7 Jul 1992  SCCS var 1.30  -D passed to cpp
 *              : 2.0.4  8 Jul 1992  SCCS var 1.30  bug fixing
 *              : 2.0.5  9 Jul 1992  SCCS var 1.30  bug fix if else if else if
 *              : 2.0.6 10 Jul 1992  SCCS var 1.31  function pointer 
 *              : 2.0.6 15 Jul 1992  SCCS var 1.8   G__pr,G__rmpound,ANSI stub
 *              : 2.0.7 15 Jul 1992  SCCS var 1.8   function pointer compile
 *              : 2.0.8 17 Jul 1992  SCCS var 1.8   bug fix,comp typedef,include
 *              : 2.0.9 20 Jul 1992  SCCS var 1.11  Array index check
 *              : 2.0.10 9 Sep 1992  SCCS var 1.19  bug fixed unsigned int,long
 *              : 2.0.11 17 Sep 1992  SCCS var 1.24 bug fixed break at line
 *              : 2.0.12 18 Sep 1992  SCCS var 1.26 R[line], /[expr expr]
 *              : 2.1.0  21 Sep 1992  SCCS var 1.30 Readline dumpfile
 *              : 2.1.1  22 Sep 1992  SCCS var 1.34 Readline dumpfile refine
 *              : 2.1.2  24 Sep 1992  SCCS var 1.2  G__ansipi uses protogen
 *              : 2.1.3  28 Sep 1992  SCCS var 1.3  loop compile implement start
 *              : 2.1.3  28 Sep 1992  SCCS var 1.3  loop compile implement go on
 *              : 2.2.0  29 Sep 1992  SCCS var 1.4  loop compile release
 *              : 2.2.1  30 Sep 1992  SCCS var 1.5  bug switch{break; "../.."
 *              : 2.2.2   1 Oct 1992  SCCS var 1.6  G__ci.c valid to c89/cc -Aa
 *                                                  but makecint still uses cc
 *                3.0.0   1 Oct 1992  SCCS var 1.7  cint on SunOS 4.1.2
 *              : 3.0.1   2 Oct 1992  SCCS var 1.1  multiple G__load()
 *              : 3.0.2  12 Oct 1992  SCCS var 1.2  G__ansipi if -x protogen
 *              : 3.0.3  20 Oct 1992  SCCS var 1.3  struct bug fix for s700
 *              : 3.0.4  20 Oct 1992  SCCS var 1.8  
 *              : 3.0.5  28 Oct 1992  SCCS var 1.9  struct bug,list vartable
 *                                                  infinit variable table
 *              : 3.0.6   9 Nov 1992 SCCS var 1.11  minor fix
 *              : 3.0.7  10 Nov 1992 SCCS var 1.11  Bug fix Loop Comp CAST 
 *              : 3.0.8  17 Nov 1992 SCCS var 1.11  Bug fix struct/typedef
 *              : 3.0.9  18 Nov 1992 SCCS var 1.11  Bug fix completion
 *
 *  version 3.0.9 is exported to all HP from hpysoln:~ftp/cint/cint.arc
 *
 *****************************************************************************
 *
 *  From 3.0.10 , evolution to C++ has begun. If a macro G__CPLUSPLUS is not
 * defined, it should be compatible to 3.0.9. If defined(in G__ci.h), it 
 * includes following enhancement to support part of C++ functionality.
 *
 * : 3.0.10  7 Dec 1992
 *   C++ like operator function . G__setup.c avoid cc error
 * : 3.0.11 16 Dec 1992
 *   Constant expr L,UL,F.  err msg,undef struct mem void (*G__atpause)() added
 * : 3.0.12 28 Dec 1992
 *   #define xxx(x) xxxx ignored and print out error message. bug fix
 * : 3.0.13 29 Dec 1992
 *   split macro G__CPLUSPLUS
 * : 3.0.14  7 Jan 1993   SCCS 1.18    
 *   Bug fix for BSD. There were a couple of NULL pointer access in
 *  struct assignment and (char *) monitoring.
 *                        SCCS 1.19
 *   G__OLDIMPLEMENTATION
 *   Variable not found error statement shows full name for struct/union member.
 *   1
 *   void and FILE type object can not be declared or assigned.
 * : 3.0.15 18 Jan 1993
 *   '-F statement' command line option to modify global variable after pre-RUN.
 *   2
 *   Assignment type check for struct.
 *   3
 *   Readline dump EOF, 'P' is given at EOF.
 *   4
 *   Bug fix '\''
 * : 3.0.16 21 Jan 1993
 *   5
 *   G__loadfile() is exported. G__unloadfile() added. G__ifunc.busy[] added.
 *   pause after main() if step.
 * : 3.0.17 25 Jan 1993
 *   rsvd 6
 *   Following uptes are not conditioned by macro.  G__pause() help message
 *   atexit() added, char *G__atexit, "exit" after "main()". removed global 
 *   initialization at decl, they were duplicated in G__init_globals()
 * : 3.0.18 27 Jan 1993
 *   G__NOCPPCOMMENT
 *   C++ comment style 
 * : 3.0.19 28 Jan 1993
 *   8
 *   Don't initialize variable if no initialization (G__null). This macro
 *   is specified so that every variables are implicitly initialized to 0.
 * : 3.0.20 29 Jan 1993                
 *   9
 *   G__init_cint() is added for embedded environment.
 * : 3.0.21 10 Feb 1993
 *   10
 *   Nested struct declaration causes error
 *   11
 *   '\n' in #define 
 * : 3.0.22 16 Feb 1993
 *   12
 *   Nested definition of struct/union
 *   13
 *   func().member
 * : 3.0.23 18 Feb 1993
 *   Bug fix for BSD readline. NULL is no longer given to strlen(),strcpy()
 * : 3.0.24 25 Feb 1993
 *   14
 *   Display error message of too many struct/union/typedef and interpretive
 *   functions.
 * : 3.0.25 3 Mar 1993
 *   Bug fix for ANSI style function header, linenumber hasn't been stored
 *   name 'operator' appears as normal name, not C++ keyword
 *   Bug fix '--a' operation in inner loop compiler.
 * : 3.0.26 5 mar 1993
 *   G__ifunc.xxx to G__p_ifunc->xxx
 * : 3.1.0  9 Mar 1993
 * : 3.1.1 11 Mar 1993
 *   G__MEMBERFUNC, G__CLASS, // G__ACCESS  in G__ci.h
 * : 4.0.0  15 Mar 1993
 *   Jump toward C++. 
 *   Member function is interpreted by definig G__MEMBERFUNC
 *   Keyword class by G__CLASS
 *   this pointer by G__MEMBERFUNC
 * : 4.0.1  19 Mar 1993
 *   15
 *   Divided by zero Error detection
 *   Bug fix, free(G__struct.memfunc[i]) in G__scratch_all()
 * : 4.0.2  22 Mar 1993
 *   G__listfunc() lists member function within memberfunction
 *   G__DESTRUCTOR, G__destroy()
 *   G__CONSTRUCTOR, G__define_var(), G__letvariable()
 *   Bug fixed for loop compile in memberfunction 
 *           in     G__letvariable(),G__getvariable()
 *   16, Bug fix double *a; a[0]=1.2;
 *          23 Mar 1993
 *   Constructor/destructor for global variable
 *   Bug fix, variable declaration in member function.
 *   Bug fix, G__letvariable(),G__define_var G__decl=1 when constructor called
 *   17, G__COMPILEDGLOBAL
 *   Bug fix, avoid freeing compiled globals by var->statictype[]=COMPILEDGLOBAL
 * : 4.0.3  26 Mar 1993
 *   G__OVERLOADFUNC2
 *   Implementation of overloaded function resolution. 
 *     G__getfunction()      funcmatch=G__EXACT~G__USERCONV
 *     G__interpret_func()
 * 
 *     G__library_func() not yet
 *     G__genfunc.cawk   not yet
 *     G__bstore()       not yet
 *
 * : 4.0.4  29 Mar 1993
 *   G__TEMPOBJECT
 *   Allocate tempobject in G__interpret_func() and free in G__exec_statement()
 *   after ';'. 
 *   G__COPYCONSTRUCTOR
 *   Enabling copy constructor and operator=() overloading
 *   G__REFERENCETYPE
 *   Enabling reference type 'int& a;'
 *   18
 *   Bug fix '(double)2.000e-00'
 *
 * : 4.0.5  11 May 1993
 *   19
 *   Bug fix ST_MSTR,LD_MSTR loop compile instruction.
 *   Bug fix function overloading X() called X(type,type) and X(void) defined
 *   Bug fix G__struct.member[i]->allifunc wasn't initialized
 *
 * : 4.0.6  31 May 1993
 *   20
 *   Bug fix, comment in double quote 
 *
 *   4.0.7  14 Jul 1993
 *   21
 *   Bug fix, ANSI functioin header , parameter declaration appeared
 *   in G__setup.c
 *
 *   4.0.8  20 Jul 1993
 *   22
 *   Bug fix, -c option, struct information \n, varlocal --> var
 *   Bug fix, typedef variable name start with '_'
 *
 *   4.0.9  21 Jul 1993
 *   23
 *   Bug fix in G__search_next_member() when number of var exceed G__MEMDEPTH
 *   New feature, completion match for struct member
 *
 *   4.0.10 23 Jul 1993
 *   24
 *   Preprocessor statements
 *      # [line] <"filename">
 *      #   if|ifdef|else|define|endif
 *
 *   // 25
 *   Interactive commands small case character.
 *
 *   4:0.11 26 Jul 1993
 *   G__NSPEEDUP0
 *   Speed up compiled loop execution.
 *    Double and int priotized in G__getvariable(),G__letvariable().
 *    G__exec_asm() placed between G__letvariable() and G__getvariable to
 *   avoid paging.
 *    G__pause() and interrupt routine moved to the end of the source code.
 *
 *   4.0.12 29 Jul 1993
 *   Can specify include file search path by -I command line option
 *   new type G__includepath defined.
 *
 *   4.0.13 9 Aug 1993
 *   G__NSTOREOBJECT  must be added to G__ci.h if needed
 *   Add G__storeobject(G__value buf1,G__value buf2), G__dumpobject(),G__loadobject()
 *   Copy buf2 to buf1 if not a pointer
 *
 *   4.0.14 11 Aug 1993
 *   G__NSEARCHMEMBER  must be added to G__ci.h if needed
 *   G__search_next_member() exported
 *   G__what_type() added and exported 
 *
 *   4.0.15 20 Aug 1993
 *   stdin,stdout,stderr type FILE*
 *   cout << "string"; G__getitem() handles double quote
 *   G__valuemonitor(), G__in_pause? (unsigned int*)0 : (unsignedint*)0
 *
 *   4.0.16 25 Aug 1993
 *   return xxx; allowded.
 *
 *   4.0.17 6 Sep 1993
 *   Struct member completion, bug fix to avoid segmentation violation.
 *
 *   4.0.18 7 Sep 1993
 *   G__pr integrated,
 *   G__rmpound.cawk,G__pr.cawk,G__cilib.c removed from archieve
 *
 *   4.0.19 8 Sep 1993
 *   // 27
 *   Largestep 'S' implementated. Step over constructor is not implemented.
 *
 *   4.0.20 9 Sep 1993
 *   Improved 'S'tep over. Constructors
 *
 *   4.0.21 14 Sep 1993
 *   G__exec_statement(),G__letvariable(),G_getvariable() re-written.
 *
 *   4.0.22 16 Sep 1993
 *   Multiple nesting of #ifdef, #if,#ifndef implemented
 *
 *   4.0.23 17 Sep 1993
 *   #elif supported, G__pp_skip bug fux
 *   command history saved into file G__input(),G__input_history()
 *
 *   4.0.24 22 Sep 1993
 *   G__exit() refinement
 *
 *   4.0.25 30 Sep 1993
 *   Backslash bug fixed in G__fgetstream(),G__fignorestream()
 *   G__pr() format slightly changed.
 *
 *   4.0.26 4 Oct 1993
 *   break, continue truely supported
 *
 *   4.0.27 5 Oct 1993
 *   Array automatic variable
 *
 *   4.0.28 6 Oct 1993
 *   Bug fix for non C++ version, 
 *   #ifdef G__MEMBERFUNC added in G__search_next_member()
 *   7 renamed to G__NOCPPCOMMENT except one place
 *
 *   4.0.29 8 Oct 1993
 *   29
 *   Unlimited number of interpretive function.
 *
 *   4.0.30 11 Oct 1993
 *   30
 *   exit() return through G__return=2 to call all destructor.
 *   'Q' command exits and does nothing.
 *
 *  4.0.31 22 Oct 1993
 *  Bug fix in G__test().   (a>>b)&1?a:b
 *
 *  4.0.32 26 Oct 1993
 *  Bug fix in G__interpret_func(). Parameter check routine.
 *
 *  4.0.33 15 Nov 1993
 *  Change G__ansipi for static function
 *  -D[macro]=[def]
 *  G__scratch_all() rewritten with same functionality
 *  G__init_readline() moved from G__main() to G__input()
 *
 *  4.0.34 17 Nov 1993
 *  atexit() bug fix  G__call_atexit()
 *  G__close_files() separated
 *  Destructor call message display
 *  Bug fix. G__return reset when calling destructor
 *
 *  4.0.35 19 Nov 1993
 *  G__calc() , G__exec_tempfile() exported
 *
 *  4.0 36 25 Nov 1993
 *  G__LARGESTEP  largestep subroutine
 *  G__NEWDELETE  '(' and '=' are immediately evaluated by G__fgetstream()
 *  G__NEWDELETE_YET  array destruction not implemented yet
 *
 *  4.0.37 30 Nov 1993
 *  main(int argc,char *argv[]) bug fix
 *  cint -x 'main() {...}' option added
 *  $LINE $FILE $# $n $read(fp) implemented with loop compile
 *  new and delete implemented except array object
 *
 *  4.0.38 13 Dec 1993
 *  G__NEWDELETE_YET implemented. array construction and destruction.
 *  G__fgetstream(),G__fgetstream_new() bug fix '*xxx'
 *
 *  4.0.39 20 Dec 1993
 *  int -> long , G__int(), struct_offset, G__asm_inst[],etc
 *  Lighter G__ASSIGN_VAR(),G__ASSIGN_PVAR(),G__exec_asm()
 *
 *  4.0.40 10 Jan 1994
 *  sizeof() enhance for array sizing. Not completed yet.
 *  G__DUMPFILE defined for debugging
 *  In makecint, $link is just added to final link stage.
 *  G__fignorestream()  bug fix. using '\\' as termination char.
 *
 *  4.0.41 18 Jan 1994
 *  G__FUNCPOINTER  Pointer to function supported as compiled object.
 *
 *  4.0.42 24 Jan 1994
 *  Bug fix: G__fgetstream_new() nest.  G__letvariable() '*(a)=x' '(*a)=x'
 *  G__ASM_OPTIMIZE, Optimize loop compilation.
 *    G__asm_optimize(), *  G__asm_test_X()
 *    G__asm_loopcompile = 0(off),1(on),2(optimize on)
 *  Escape sequence '\NNN' octal , '\xNNN' hex supported
 *  G__pause()  'p expr\x' supported
 *
 *  4.0.43 1 Feb 1994
 *  G__INITARY. Array initialization.
 *
 *  4.0.44 8 Feb 1994
 *  32
 *  Bug fix: Prerun=1 set while loading Dynamic link library.
 *  33
 *  Initialization of 'char cary[5]="abcde";'
 *
 *  4.0.45 21 Feb 1994
 *  Bug fix. switch(){case 1: break; case 2: ..../....}
 *                                               ^
 *   In G__fignorestream() '/' caused bug when treating beginning of comment.
 *
 *  4.0.46 22 Feb 1994
 *  Dynamic link library function can appear in command line completion
 *
 *  4.0.47 23 Feb 1994
 *  G__MACROSTATEMENT  Macro statement partly supported.
 *  #ifndef 28 deleted
 *  G__fgetc() shape up
 *  G__unexpectedEOF() added
 *  Memory parity check improved
 *  exit() and 'q' condition improved
 *
 *  4.0.48 25 Feb 1994
 *  argv[1][2] can be accessed
 *  memory management bug fixed, store_p_tempbuf
 *  bug fix, static variable in fucntion
 *  G__scratch_all() closes all files.
 *
 *  4.0.49 2 Mar 1994
 *  -H header dump option added. G__makeheader shell script added.
 *  35 Bug fix. 'a*1e-12' in G__isexponent()
 *
 *  4.0.50 7 Mar 1994
 *  36
 *  array type parameter 'func(short a[10],float f[][10])'.
 *  In makecint '#include "xxx.h"  comment'  fix
 *  define duplication between shared lib and archieved lib
 *  UNIX version testing A.09.* and B.09.*
 *
 *  4.0.51 14 Mar 1994
 *  G__GET_PVAR(), &pointer bug fix.  'char *p="abcdefg"; &p[3];'
 *
 *  4.1.0  22 Mar 1994
 *  G__REFERENCETYPE2, further implementation of C++ reference type, 
 *  operator overloading. This implementation may not be very reliable.
 *
 *  4.1.1  24 Mar 1994
 *  37
 *  Bug fix. multiple shared library tagnum,typenum conflict 
 *
 *  4.1.2  28 Mar 1994
 *  G__ASM_NESTING
 *  Nesting loop compilation
 *
 *  4.1.3  30 Mar 1994
 *  38
 *  Bug fix, array initialization for local static variable.
 *
 *  4.1.4  31 Mar 1994
 *  * cleaned up.
 *  Standard include supported.
 *
 *  4.2.0 6 Apr 1994
 *  G__SUTPI , must not defined.
 *  Parameter information file generation
 *  G__STDINCLUDE , currently not defined
 *  standard include file from $CINTSYSDIR/include/
 *  Using cproto instead of protogen
 *
 *  4.3.0 7 Apr 1994
 *  G__SUTPI,G__STDINCLUDE defined.  Environment variable CINTSYSDIR
 *  makecint uses cint as parameter extraction tool. (CRSUTPI='')
 *  45
 *  Bug in G__letvaraible(), MEMFUNC bug is not fixed yet.
 *
 *  4.3.1 12 Apr 1994
 *  46
 *  a[], a[][B][C] fix, pntr2pntr supported
*  47
*  Archived global table allocated before shl global table.
*
*  4.3.2 14 Apr 1994
*  ANSI C standard library revised
*  completion match for struct/class member bug fix
*  
*  4.3.3 19 Apr 1994
*  Bug fix, G__pause() at constructor call. G__var_type restored.
*  Bug fix, struct/class pointer and auto array object allocation.
*
*  4.4.0 20 Apr 1994
*  G__SHOWSTACK  Function call stack, Scratch local variable
*  Interactive interface command changed
*
*  4.4.1 22 Apr 1994
*  G__define_var(), order of local variable changed and size of temp[]
*  increased to keep away from temp[] overflow by char* char[] 
*  initialization
*  48, char a[]="xxx"; initialization bug fix
*  49, calloc for global instanciation (G__prerun)
*
*  4.4.2 2 May 1994
*  Bug fix. G__exec_asm() G__OP1 operation was wrong, '-50' didn't work
*  Dynamic link library can be loaded in the same way as normal source code
*
*  4.4.3 20 May 1994
*  Bug fix, G__var_array.next pointer weren't freed in G__destroy()
*  G__VAARG storing function argument to stack.
*  50, #!/usr/local/bin/cint OK.
*  Bug fix, G__interpret_func() G__var_type remained 'u' after returning
*  struct object. Now it is reset to 'p'
*
*  4.4.4 27 May 1994
*  G__FUNCMACRO, macro function partly supported 
*
*  4.4.5 31 May 1994
*  Bug fix,
*  51, ignore goto label
*  Passed a great milestone. Cint interprets cint itself.
*    $ cint G__cfunc.c G__setup.c G__ci.c G_main.c simple.c
*
*  4.4.6 3 Jun 1994
*  52, getopt() implemented
*
*  4.4.7 14 Jun 1994
*  Nested loop compilation bug fix
*
*  4.4.8 11 Aug 1994
*  53, multiple typedef and array typedef waning
*  enum typedef bug fix
*  bug fix #define a "string" , char *a "abc\"def"; and int a[10 ];
*  54, pointer type typedef bug fix
*
*  4.4.9 18 Aug 1994
*  55, #pragma 
*  G__AUTOCOMPILE #pragma compile
*  56 G__ASSIGNPVAR(),G__letstructp() bug fix
*  57 '*class=xxx;' operator =() call;
*  58 Implicit conversion from class to class
*  59 Unary +- bug fix
*
*  5.0.0 29 Aug 1994
*  array.h library support.
*  G__ACCESS  member access control, implemented except 'friend'.
*             G__ACCESS not activated.
*  G__EXPLICITCONV   explicit type conversion
*  60  G__alloc_tempobject(),G__pop_tempobject() 
*
*  5.0.1 8 Sep 1994
*  Clear G__OLDIMPLEMENTATOIN50~60, G__CPLUSPLUS ifdefs
*
*  5.0.2 16 Sep 1994
*  G__GNUREADLINE, if you delete this macro, you won't use GNU readline
*  library.
*  Linux 1.1.0 i486 support
*
*  5.0.3 27 Sep 1994
*  G__INHERIT,G__ACCESS , class inheritance and access control
*  G__INHERIT1
*  G__INHERIT2
*  G__INHERIT3
*  G__INHERIT4  pointer to derived to poiner to base assignment
*
*  5.0.4 4 Oct 1994
*  G__INHERIT5  virtual function call
*
*  5.0.5 5 Oct 1994
*  virtual function and inheritance Bug fix
*
*  5.0.6 15 Nov 1994
*  -Wp option for preprocessor, both cint and makecint
*  -mk and -src option for makecint
*  62, bug fix G__define_struct() G__tagnum=%d
*  63, typedef type newtype(expired)
*  64  constructor and destructor not inherited
*
*  5.0.7 17 Nov 1994
*  Start modifying linkage to C++ object
*  G__CPPLINK,  entry.fp -> entry.p, G__globalcomp=0 when G__shl_load
*  G__CPPLINK1, globalcomp member in memvar,memfunc,etc. Deleting
*  65, bug fix 'sizeof(union obj)'
*                          G__malloc() when G__globalvarpointer is given
*  G__CPPLINK2, refining C++ link
*  G__CPPLINK3, constructor,destructor link
*
*  5.1.0 28 Nov 1994
*  Exposure to UNIX fair
*
*  5.1.1 30 Nov 1994
*  -p preprocessor option, -I passed, -I$CINTSYSDIR added
*  G__WARNPREP, print out warning for macro limitation.
*  66, use *tmpfile() for macro
*  67, preprocessor handling centrarized in G__loadfile()
*  68, long double == double
*  69, typedef type newtype[index]; not complete
*  70, register,signed keyword, offsetof()
*  71, multiple typedef refined, 
*                          63 defined
*  72, type abc[ (1+2) ]; G__skip_comment()
*  73, operator +() -> operator+()
*  74, operator ==,<=,>=,<,>,!=,!
*
*  5.1.2 9 Dec 1994
*  75, <,>,<=,>=,==,!=,! overloading
*  76, move asm reset from overloadopr,getfunc to intprtfnc
*                          ! (not) operator compilation
*  77, operator/() bug fix G__fgetvarname()
*  78, C++ loop compilation,  G__getfunction()
*                          A[i] = B[i]+C ;  G__letstruct(),G__overloadopr()
*                                           G__free_tempobject(),G__exec_asm()
*                          *pc = C;         G__classassign()
*                          pc = new complex(i); G__new_operator()
*                          delete pc;           G__delete_operator()
*                          for(C=0;C<5;C=C+1) ; G__exec_for()
*
*  5.1.3 20 Dec 1994
*  79, #pragma include <xxx>
*  80, :: scope operator, not done
*  81, operator() overloading,80%, -> G__letvariable()
*  82, type (*b)[10]; in G__readpointer2func(),
*                          G__ASSIGN_VAR(). THIS CHANGE IS NOT GOOD. SHOULD
*                          BE REIMPLEMENTED.
*  83, casting separated in G__castvalue()
*  84, makecint with -p option
*
*  5.1.4 23 Dec 1994
*  85, type (*b)[10]; reimplementation 1
*  86, type (*b)[10]; reimplementation 2
*  87, typedef xxx type,*type; twice bug fix
*
*  5.1.5 28 Dec 1994
*  89, cpplink bit-field bug fix
*  90, G__varmonitor version up
*  G__CLINK, makecint -h C header option
*
*  5.1.6 29 Dec 1994
*  91, (xxx)=xxx; (xxx)xxx=xxx;
*  92, *(type*)x=xxx; loop compile bug fix
*  93, type *p; (p)=x; bug fix, loop compilation
*  94, operator() definition bug fix
*  95, non reference type return nullified.
*  96, C++ compile reference type 
*
*  5.1.7 5 Jan 1995
*  97, &func()
*  98, operator[]()
*  99, debug command , G__pause()
*  100, type& func(type a); bug fix
*  101, optimization
*
*  5.1.8 6 Jan 1995
*  G__globalvarpointer void* -> long
*  G__makeinclude.c checks sizeof(long)>=sizeof(void*) at installation
*  -c-1,-c-2 option, macro compilation bug fix
*  102, beautiflize error handling routine
*  104, pure virtual function, abstract class
*  105, C++ compiled class inheritance
*  106, G__make_ifunctable() destructor call bug fix
*  107, virtual destructor support
*  108, -c2 option fopen limit but fix
*
*  5.1.9 14 Jan 1995
*  109, multiple break point supported
*  110, step into constructor
*
*  5.1.10 18 Jan 1995
*  61~110,G__INHERIT*,G__ACCESS,G__CPPLINK*,G__CLINK*
*  ,G__WARNPREP deleted
*  111, class member as array, constructor call bug fix
*  112, can not quit from constructor
*  113, (xxx)->xxx, 
*                           private base class pointer conversion
*                           class pointer casting
*  114, struct xxx[] = { {x,x}, {x,x} }; bug fix
*  115, if() ; #xxx else  ;
*
*  5.2.0 22 Jan 1995 ,      header file changed, dynamic link library
*                           must be recompiled.
*  116, scope operator ::
*                           bug exist, member variable name duplication
*                           not allowed.
*  117, G__getvariable(),G__letvariable() modify
*  118, function call stack, tagnum, struct_offset
*  119, G__ifunc_exist() don't check return type,reftype
*  120, type *X::f() bug fux
*  121, :: operator loop compilation
*  122, constructor,destructor call in G__make_ifunctable()
*  123, more memberfunction information,
*                           bug fix a.b[member] in member function
*  124, scope operator for static member
*  125, class declaration file position
*  126, static class member
*  127, goto statement
*  128, cast to pointer to function work around
*
*  5.2.1 10 Feb 1995
*  129, local enum
*  -                      , c=G__fgetc() change 'char c' => 'int c'
*
*  5.2.2 8 Mar 1995
*  130, if(),&&,||,?: compile, 
*  -                      , switch() no match  bug fix
*  -                      , header file search order fixed
*  -                      , textprocessing $# bug fix
*  -                      , G__setarray() interface bug fix
*  -                      , $regex(char *regex,char *string=$0) added
*
*  5.2.3 14 Mar 1995
*  G__SIGNAL              , signal support
*  -                      , bug fixes null pointer and lint
*  131, optimization complexity reduced
*
*  5.2.4 16 Mar 1995
*  -                      , typedef debugging command
*  132, p=NULL; p->a; error detected
*  -                      , protected base class
*  133, func prototype in function
*  -                      , in G__preprocessor(), .cpp,.cxx,.cc, preprocessor
*                           selected by command line option and env CPP.
*
*  5.2.5 20 Mar 1995
*  134, unsigned var; supported
*  -                      , Preprocessor command in G__fgetname,fgetspace,
*  -                      , DLL revision check
*  -                      , re-write tagname,typename search function
*
*  135, Local class/struct identifier in G__tagtable.
*                           Compile interface not generated for local class.
*  88 , func(int,double); ANSI func header supported
*  136, #pragma includepath "xxx"  added with bug
*                         , #pragma preprocessor on    added with bug
*  137, define macro 'mcr(a,b);' searched
*
*  5.2.6 4 Apr 1995
*  -                      , bug fix, G__exec_loop()
*
*  5.2.7 
*  138, use of G__defind_typename()
*  139, bug fix f(int); f(a) int a; {..}, etc
*  140, typedef a b[c]; bug fix
*
*  141, static in member function bug fix,
*  -                      , size zero struct allocation
*  142, struct A* a; bug fix
*  143, file info correction with -p option
*  144, A *a=new A; bug fix in G__define_var()
*  145, enum{ };
*
*  5.2.8 22 Apr 1995
*  G__TEMPLATECLASS       , template implementation
*   O 1) B<int> a;
*   O 2) class A : B<int> {...};
*   O 3) A::A() : B<int>() {...}
*   x 4) b = a * B<int>(c) ;   // explicit type conversion
*   x 5) B<int>::f();  a.B<int>::f(); // ambiguity resolution
*   x 6) int B<int>::f() {...} ?????
*   O 7) os = offsetof(B<int,double>,b); // bug in G__library_func ','
*   O 8) sz = sizeof(B<int,double>);     // bug in G__library_func ','
*   O 9) a = (B<int>)c;  // casting
*   O10) typedef B<int> bint;
*   O11) template<class T,class E,int SZ> ....
*   o12) B<int,5> a=B<int,5>(d,e,f); // B<int,2+3>(a,b,c) X 
*   O13) B<int,5*2> b;
*   O14) B<int> *p=new B<int>(1,23);
*  146, G__exec_function() for optimization
*  147, for __CINT__,__MAKECINT__,__FILE__,__LINE__
*  148, short unsigned int *a; bug fix
*
*  5.2.9 27 Apr 1995
*  149, Bug fix request from Fons Rademakers
*                         , makecint G__search_typename => G__defined_typename
*                         , 'type &var;' can be accepted
*  150, ifunc->isinherit[id] flag added to resolve
*                           hiding overloading resolution by scope.
*
*  5.2.10 30 Apr 1995     , Bug fix request from Fons Rademakers 2
*  151, member inheritance validity check bug fix
*  152, multiple inheritance bug fix
*  153, pointer to function 
*  154, local enum bug fix
*                         , pointer to function returning pointer bug fix
*                         , enum, typedef makecint bug fix
*  155, function returning pointer to function bug fix
*  156, type* a,b; handled
*  157, pointer to function and typedef bug fix
*
*  5.2.11 5 2 Apr 1995
*  158, typedef fundamentaltype* newtype; bug fix
*  159, bug fix in local static automatic array
*                         , typedef struct A { struct A *p; } aaa; bug fix
*  160, for(int i=0;i<xxx;i++) supported
*  161, A::A() : base(new type) {...}; supported
*  162, func(A&); reading C++ header bug fix
*  163, func(type) const {...} supported
*  164, f(a<T,E> a,type ...) bug fix
*
*  5.2.12 10 May 1995
*  -                      , trying to support IBM AIX
*
*  5.2.13 
*
*  5.2.14 20 May 1995     , Global function template ignored
*                         , makecint,G__makecfunc,G__makesetup,G__makestub
*                           G__makemkfile,setup. Test command changed for
*                           portability.
*
*  5.2.15 21 May 1995     , monitor template
*  165, template<...> class A : B,C { };
*
*  5.2.16 8 June 1995
*  166, #if xxx \ \n xxx \ \n xxx
*  167, default parameter in virtual function, bug fix
*  168, close file when 0!=G__globalcomp in G__loadfile()
*                           unsure if this is implementation is OK.
*  169, f(type a = b) { }, default parameter
*  170, compact G__cpplink.C
*
*  5.3.0 22 June 1995     , Changed source code organization
*
*  5.3.1 17 July 1995     ,
*  171, file won't be closed with -cN option w tmplt,macro
*  -                      , bug fix, 'typedef othertypedef newtype;' in
*                           G__define_type_gcomp5().
*  -                      , makecint bug fix when struct came last in the
*                           G__globalsetup().
*
*  5.3.2 20 July 1995     ,
*  G__ASM_IFUNC           , loop compilation in nested ifunc.
*  172, bug fix precompiled class + override prohibited.
*                         , bug fix precompiled class returned from function
*                           temp object creation is done correctly.
*  173, for(i=0,j=1;i+j<10;i++,j++) { } fix
*
*  5.3.3 10 Aug 1995      ,
*  174, K&R style func in new linking 
*
*  5.3.4 21 Aug 1995
*  175, Local enum scope wasn't correct at default para
*                         , Local enum inherited, free duplicated bug fix.
*                          But any inherited static member has only one body.
*                         , pointer to memfunc type -> 'A'
*  176, CC -E must process .C file, make tmpfile if .h
*                         , macro function in initialization
*  177, sizeof pointer to member function
*  178, selective preprocessor application +P -P
*
*  5.3.5 22 Aug 1995
*  179, access and static specification override bug fix
*  180, operator new, operator delete can be registered
*                          but not quite ready to be called from interpreter
*                         , type conversion operator, not quite ready yet
*                         , Local enum type2string bug fix
*  181, multiple inherited f(base&) ambiguity resolution
*                         , Linkage to a function taking pointer to member 
*                          function as argument
*  182, Bug fix 'typedef void ( *abc)(int)'
*
*  183, enclosed class ios::xxx
*  184, -I path /usr/include/CC and codelibs
*  185, class A { friend f() { ; } };
*  186, const a=1; static a=1;
*  187, type friend f()
*  188, local enum scope wasn't right in ary[index]
*  G__OLDIMPLEMENTATINO189~193, compact G__cpplink?.C s
*  194, pointer to pointer as struct member bug fix
*
*  5.3.6 4 Oct 1995
*  G__TYPEINFO            , Run time type information
*  -                      , Speed up newlink a little bit
*  -                      , fix. template instantiated as member declaration 
*                          causes size and other errors in enclosing class
*  -                      , typedef char Name[10]; sizeof(Name) returns 1. 
*                           not completely
*
*  5.3.7                  , class title , sent to Fons Rademaker
*
*  5.3.8 14 Oct 1995      , class specific trace/break
*                         , class name completion
*                         , loop compile + do {} while(); bug fix
*
*  195, including /usr/include headers
*  -                      , a[f(i)]=val;  bug fix in G__parse.c
*  -                      , Multiple inheritance base class information bug fix
*  -                      , enum and static member
*
*  196, -O2 optimization recovery for G__letvariable()
*                           G__exec_statement()
*
*  197, pcode bug in LD_IFUNC no_exec_compile
*
*  5.3.9
*
*  5.3.10
*
*  5.3.11 15 Nov 1995
*  -                      , global function template
*  -                      , template as template argument
*  -                      , template class as template argument
*  -                      , Start porting to Turbo C++ 4.5
*  199, template parsing bug fix
*  200, template related bug fix
*  201, complete typedef name for readline
*  202, bug fix for template
*  203, bug fix for template, reading STL still causes err
*  G__FRIEND              ,
*  204, template related bug fix
*
*  5.3.12 28 Nov 1995
*  205, 
*
*  5.3.13 9 Dec 1995
*  -                      , template default argument
*  206, newlink.c defined_tagname() -> search_tagname()
*  207, newlink.c only public inheritance exported
*  208, #pragma link [lang] [categ] [name]
*  209, ifunc.c, para_default inheritance bug fix
*  210, 
*  211, 
*  212, 
*  213, Checking non public operator new for constructor
*  214, Filename malloc, MAXFILE, MAXSTRUCT increased
*  215, purevirtual count bug fix.
*  216, enum { }; unified as $
*  217, #pragma link [lang] class [regex]
*  218, compact G__cpplink.C by not making inherited func
*  219, type *const p;  somehow handled
*  220, ambiguous member variable inheritance(bug found)
*  221, G__cpplink6.C size problem fix
*  222, G__cpplink6.C parameter type 105 -> i
*  223, var.c letvariable,getvariable modified
*  224, searchvariable,define_var, G__decl bug fix
*
*  5.4.0 16 Dec 1995
*  225, G__shl_load() minor modification
*  226, cpplink tagnum buffer
*  G__SECURITY            , Security mode introduced, (premature)
*  227, G__search_next_member() ifunc bug fux
*  228, G__isbinaryfile() checks and avoid reading binary
*  229, variable declaration compiled
*  230, LoopCompiler tempobject bug fix
*  231,
*  232,
*  233, LoopCompiler tempobject for interpreted func
*  234,
*
*  5.4.1 5 Jan 1996
*  235, X a[2][3]; a[x][y][z][w] REORDER in bytecode
*  236, constructor return type
*  237, bug fix loop optimizer (long*) -> (int*)
*  238, G__exec_statement() -> G__exec_breakcontinue()
*  239, Switch compilation tried but abondaned
*  240, Bug fix "... / ..."
*  241, Bug fix C++ compiled object DLL
*                         , Bug fix Loop compilation this reference
*  242, return compiled
*  243, break,continue compiled
*  244, typedef t* T; T** a; bug fix
*  245, Inheritance purevirtual func bug fix
*  246, bug fix
*  247, bug fix
*  248, bug fix
*  249, TVG[i].check_cycle(lasttime) bug fix
*
*  5.4.2 21 Jan 1996
*  250, loopcompilation if() continue,break bug fix
*                         , BASECONV pcode bug fix
*  251, REWINDSTACK, ALLOCTEMP,SETTEMP bug fix
*  252, class browser improvement
*  253, X::operator[]()  x[i++]=val;  bug fix
*  254, while() for(i=0;i<N;i++) { if(!i) break; } bug
*  255, fons comment display when debugging
*  256, break while browsing 
*  257, loopcompile bug, macrofunc fixed 
*  258, class memberfunc flag introduced
*  259, G__classassign modified
*  260, no_exec_compile optimize and break bug fixed
*  261, #pragma preprocess [string]
*  262, eliminate union G__x_poIntEr
*  263, bug fix typedef void *(*newtype)(arg);
*  264, bug fix -c-1/2 comment
*  265, bug fix G__add_ipath, duplication 
*  266, Porting to Windows-NT
*  267, G__float() Disabled
*  268, $xxx -> G__value G__getreserved(char*)
*  269, DLL without G__library_func
*  270, G__cpplink.C filename customization
*  271, ifunc_table add para_name information
*  272, bug fix class A{f(class B); g();} G__define_struct
*  273, bug fix printf("\"");
*  274, cpplink link length cut for ROOT CMZ
*  275, DLL revision check, need get back and fix this
*
*  rev 5.4 freeze
*
*  5.5.0  23 Feb 1996
*  276, change G__setup.c eliminate G__cfunc.c G__stub.c
*  277, 
*  278, Duplicated G__calc(),G__int().. deleted in fproto.h
*
*  5.5.1  27 Feb 1996
*  279, X a(i); syntax works fine
*  280, "scratch" command + #pragma setstdio
*
*  5.5.2 1 Mar 1996
*  -                      , pause.c, #define G__ROOT to be root specific
*  281, store_globalcomp bug fix
*  282, 
*  283, store_tempobject to explicit conversion. 
*
*  5.5.3 2 Mar 1996
*  284, cpplink data member setup change
*  285, cpplinkmemfunc,memvar incremental setup
*  286, cpplink independent global name 
*  287, not using G__sharedlib_func 
*
*  5.5.3 6 Mar 1996
*  288, char *buf; !buf bug fix
*  289, Fons' new C++ DLL loading scheme
*  290, G__LN_[tagname] -> G__[dllid]LN_[tagname]
*
*  5.5.4 10 Mar 1996
*  291, bug fix
*  292, bug fix
*  293, bug fix
*  294, eliminate old compiled function interface.
*  295, Exception handling keywords warning
*  296, automatic global object a=T();a=new T;
*
*  5.5.5 11 Mar 1996
*  297, dictionary partial clear, G__scratch_upto()
*  298, garbage collection
*
*  5.5.6 16 Mar 1996
*  299, func param name and default name, etc
*  300, pointer&&pointer, pointer&&!pointer bug fix
*  301, C and C++ mode by .c and .C .cxx .cpp, -A/K
*  302, extern struct xxx; bug??? temporary fixed
*  303, operator=(($G__value)-1,($G__value)0) bug fix
*  304, G__process_cmd(),G__pause() bug fix, view init
*  305, #pragma eval and loop compile bug fix letstruct()
*  306, Env restore bug fix in G__define_var()
*
*  5.5.7 19 Mar 1996
*  307, no_exec_compile bug fix in G__tovalue() 
*  308, # line  bug fix in G__setline() 
*  G__FONS1               , Separate G__cint_version()
*  G__FONS2               , reset cint in pause.c
*  G__FONS3               , 'E' and 'x' command in pause.c
*  G__FONS4               , 'func' and 'L' command in pause.c
*  G__FONS5               , Dict init sceme, need to come back
*  G__FONS6               , Dict init sceme, need to come back
*  G__FONS14              , bug fix testing G__struct.filenum[i]>=0
*  G__FONS15              , bug fix testing G__struct.filenum[tagnum]>=0
*  G__FONS16              , G__var_type restore after defered dict init
*  G__FONS18              , $xxx.yyy $xxx->yyy, Need to comeback,not complete
*  G__FONS21              , G__scratch_global_upto() added
*  G__FONS22              , G__destroy_upto() refined
*  309, func param name and default name newlink.c
*  274, 2 places stilll needed this to avoid longline
*
*  5.5.8 21 Mar 1996
*  310, Security, { int a=1 } missing semicolumn improve
*  -                      , +C,-C => +V,-V, -L => -n option,
*  311, File table struct G__filetable
*  312, G__exec_tempfile() refined
*  313, bug fix calling global func from member func
*  314, security mode specified file by file basis
*  315, preprocessor command read from MAKEINFO
*  316, bug fix, uninitialized G__value ob.d upper word
*  -                      , Garbage collection was rewritten
*  G__IMMEDIATE_GARBAGECOLLECTION, not activated
*  317, bug fix, return(new T);
*  318, G__IMMEDIATE_GARBAGECOLLECTION activated
*  319, bug fix $xxx, __xxx 
*  320, refined no_exec_compile exec return value getvari
*  321, STL bvector.h, nested type changing def_tagnum fix
*                           friend enclosing class fixed, etc...
*                           but not good enough to parse bvector.h still
*
*  5.6.0 27 Mar 1996
*   Exposed to hp.unix, hp.lang and www://cern.root.ch
* 
*  5.7.0 29 Mar 1996
*  322, Bug fix G__exec_tempfile() class T{public:int i;};
*  323, API GetMethod(), GetDataMember() implemented
*  324, bug fix typedef x (*p)(int,char*,doule*);
*  -                      , setup script, for HPUX without CC
*  -                      , api/CallFunc.C added
*  325, Precompiled Private member dict, -
*
*  5.7.1 1 Apr 1996
*  326, G__readandipara() G__make_ifunctable() changed
*  327, ^M supported as newline
*  328, G__valuemonitor() enclosed class/struct/enum name
*  329, G__istypename() used
*  330, C++ newlink para typename
*
*  5.7.2 3 Apr 1996
*  331, bug fix type f(int=0)
*  332, bug fix class A : public virtual B { };
*  333, true iostream support
*  G__FONS30~32           , ALPHA and SGI porting, maybe more to do for 64bit
*
*  5.7.3 6 Apr 1996
*  334, virtualbase flag in inheritance info
*  335, xdumpinput, after end of dump file
*  336, const string table size limited -> unlimited list 
*  -                      , ctor/dtor/= conditional exec tried but failed
*  337, const string buffer -> tempbuf tried but failed.
*
*  5.7.4 9 Apr 1996
*  G__FONS31              , Thorough change to 64bit address for ALPHA
*  -                      , default security mode level0
*
*  5.7.5 10 Apr 1996
*  338, G__del_refcount bug fix
*  339, { #ppcom xxx } fixed
*
*  5.7.6 15 Apr 1996
*  -                      , bug fix calling G__label_access_scope() in parse.c
*
*  5.7.7 17 Apr 1996
*  -                      , AIX ported by Fons
*  340, for() p=new A(b.mem[i]); bug fix
*  341, work around for G__newtype.nindex[] problem
*
*  5.7.8 17 Apr 1996
*  342, for() p=new A(b.mem[i]); bug fix garbage collection
*  343, garbage collection questionable fix
*
*  5.7.9 19 Apr 1996
*  344, Interperted class inherits precompiled class
*  345, Stub function
*  346, garbage collection bug fix
*
*  5.7.10 
*  G__GCCPROBLEM          , defined to avoid g++ new(arena) obj[ary]; problem
*                         , Solaris4.3 porting
*   Still problem with linux1.3 linking C++ object with operator new/delete
*  344,G__GCCPROBLEM, fix
*
*  5.7.11 May 6 1996
*  345, bug fix, set Prerun G__memvar_setup
*  G__N_EXPLICITDESTRUCTOR, tried but failed because of g++ template class
*  348, cint testmain.c loop compiler bug fix
*  349, operator new delete problem fix
*
*  5.7.12 May 11 1996
*  350, type **b; enum aa { a,b,c} bb; newlink bug fix
*  351, newlink bug fix
*  352, newlink xlib bug fix enum
*
*  5.7.13 May 13 1996
*  353, G__bstore() no_exec_compile bug fix
*  354, G__searchvariable() type x=mem; bug fix
*                         , fixed later but questionable
*  355, G__getcommentstring() escape quotation
*
*  5.7.14 May 14 1996
*  356, precompiled private member access protected
*  357, bug fix segv in G__isfilebusy(), not confirmed
*  358, class G__CallFunc 
*
*  5.7.15 May 15 1996
*  359, bug fix, template instantiation in func arg
*  G__FONS41              , ifunc.c unknown
*  G__FONS42              , CallFunc.C bug fix
*
*  5.7.16 May 18 1996
*  370, char**  int*& bug fix in G__exec_statement()
*  371, getopt() loopcompile bug fix
*  -                      , bug fix getopt() in winnt_spec.c
*  Exposed to Interface Magazine InterGiga CD-ROM
*
*  5.7.17 May 21 1996
*  372, const type const *xxx;
*  -                      , disp.c varmonitor protected member display bug fix
*  373, problem fix, undefined constructor call 
*  374, root mode debugging interface
*  375, undefined constructor, list up canditites
*  376, incsetup bug fix loop compile
*
*  5.7.18 May 24 1996
*  377, CallFunc API, overloaded func resolution fix
*  378, A *p=p1->f(1,2); bug fix
*  379, type f() const {}
*  380, non class member initialization
*
*  5.7.19 June 11 1996
*  -                      , bug fix G__exec_tempfile() line number off by 1
*
*  5.8.0 June 12 1996
*
*  5.9.0 June 18 1996
*  381, api bug fix
*  -                      , api/Typedef.C,h added
*  382, ROOTSPECIAL Add title to typedef 
*  
*  5.9.1 June 19 1996
*  383, api bug fix
*
*  5.9.2 June 20 1996
*  -                      , Darryl Okahata feedback. shl.c FreeBSD
*                           newlink.c extern C dllrev
*
*  5.9.3 June 21 1996
*  384, api bug fix
*  385, purify error fix, from Darryl Okahata
*  386, api, isvirtual,ispurevirtual,staticalloc
*  -                      , BaseClass.C Next() only iterate direct inheritance
*  G__FONS60              , Duplicate DLLID
*  387, newlink.c return type bug fix
*
*  5.9.4 June25 1996
*  388, pointer casting between public base-derived
*  389, ? operator precedence
*
*  5.9.5 July2 1996
*  -                      , WinNT Symantec porting, file organization changed
*  390, security mode level1 casting to pointer bug fix
*  391, pragma ertti G__ci.a includes ERTTI API
*  392, file organization changed for symantec C++
*
*  5.9.6 July2 1996
*  393, object instantiation in loop work around 
*
*  5.9.7 July4 1996
*  394, nested G__exec_tempfile() prohibited.
*
*  5.9.8 July9 1996
*  395, G__destroy(), G__destroy_upto() destructor loop
*  396, intrpt.c (int signame) added 
*  397, operator<<(ostream& (*f)(ostream&));
*  -                      , endl,ends,flush support
*  398, anonymous union support
*  399, bug fix int i=1<<3;
*  -                      , mapped_xxxname size increased
*  -                 ON385, purify tested more 
*                            memory leak when G__input() is used
*                            uninitialized memory copy in datain.c
*
*  5.9.9 July14 1996
*  400, check non-public ctor for member object,newlink
*  401, newlink.c f(const int a) fix
*  402, newlink.c sunos:/usr/ucb/cc makecint support
*  -                      , tab and ^L => \t and \f
*  G__FONS64              , G__struct.rootflag[] introduced
*  G__NONESTEDMACRO       , Nested macro allowed again, but not clean solution
*
*  5.9.10 July19 1996
*  -                      , stub function support comes back
*  403, p2f(); support, 403-407 Kamata-san's request
*  404, int static a;
*  405, int *f();  a=f()[n];
*  406, sizeof(*a);
*  407, a.f()->f2(), a.f().f2() bug fix
*  -                      , Fons fixed ifunc.c,newlink.c,DataMbr.cxx
*
*  5.9.11 July 27 1996
*  408, newlink.c eliminate global variable access in DLL
*  409, negative pointer bug fix (type)-xx => (type)((-xx))
*
*  5.9.12 July 30 1996
*  410, windows.h parsing possible on WinNT
*
*  5.9.13 July 31 1996
*  _SC_                   , Valery Fine changed preprocessing for Symantec
*
*  5.9.14 Aug 1 1996
*  411, Undefined type automatic class decl with -c-1
*                           This change is very risky
*
*  5.9.15 Aug 2 1996
*  -
*
*  5.9.16 Aug 5 1996
*  -                      , isconst initialization
*  412, f() { class A{A(){}};} missing ';' bug fix
*  413, type classname(obj1,obj2) display bug fix
*
*  5.9.17 Aug 6 1996
*  414, class A { B<int> b; }; bug fix
*  415, regexp in pragma link
*  _SC_                   , init, P_tmpdir 
*  _SC_                   , loadfile
*  -                      , var, isbase, baseclass && baseclass->basen
*  416, .i -> .h automatically in newlink.c
*
*  5.9.18 Aug 7 1996
*  417, class A{union{int a;};struct{int b;}a}; fix newlink
*  _WINDOWS               , fopen(srcfile,"rb") for windows text mode
*  -                      , makecint.c fix for +P,-P,+V,-V option
*
*  5.9.19 Aug 11 1996
*  -                      , WinNT FreeLibrary , alarm bug fix
*  418, -a option obsolete
*  419, union { }; anonymous union bug fix, global
*  420, pure vritual void f() = NULL ;
*  421, pure vritual void f() = [constant 0] ;
*
*  5.9.20 Aug 16 1996
*  G__OLDIMPLEMENTATOIN422, bug fix G__isprivateconstructorifunc()
*  G__OLDIMPLEMENTATOIN423, shl.c old sharedlib p2f delete
*  G__TRUEP2F             , true pointer to global function supported
*  G__OLDIMPLEMENTATOIN424, func.c G__getindexedvalue() bug fix??
*  G__FONS70-74           , MacOS etc
*
*  5.9.21 Aug 20 1996
*
*  5.9.22 Aug 21 1996
*  425, #pragma ifdef, #pragma endif for -p iostream.h
*  426, 0123 octal base expression
*  -                      , p.com, p.pos initialization
*
*  5.9.23 Aug 21 1996
*  427, t (show stack) command bug fix in disp.c
*  428, pure virtual precompiled function bug fix
*  G__FONS75              , bug fix in DataMbr.cxx,Method.cxx,
*  G__ROOT                , ROOTDIR instead of CINTSYSDIR in ROOT/CINT
*
*  5.10.0 Aug 23 InterGiga No.3 shipped
*
*  5.10.1 Aug 26  CERN shipped
*
*  5.10.2
*  5.10.3 
*  5.11.0 Aug 28 1996
*  429, security mode , pointer instantiation 
*
*  5.11.1 Aug 30 1996
*  430, pragma xxx ;
*  431, #define xxx   aaa\\\n bbb
*  432, prompt short filename and cintname
*  433, bug fix, #define xxx //  
*  434, bug fix, #define in function
*  435, G__conststring[G__MAXSTRING] eliminated
*  -                      , G__test() lbuf[] expanded to G__LONGLINE
*  436, bug fix 0 member class setup newlink.c
*  437, file security mode change for # line file
*
*  5.11.2 Sep 12 1996
*  438, ctorA() : ctorB(new type) { } bug fix
*  439, a/ *b not a comment bug fix, may not be all done
*  440, STL class A{ class B; tmplt<B> a; }; bug fix
*  441, explicit type conversion to fundamental type
*
*  5.11.3 Sep 14 1996
*  -                      , Symantec C++ 7.2 setup.bat installation
*  -                      , Symantec C++ 7.2 makecint -dl support
*  442, Symantec C++ 7.2 maincint -o support, p2fsetup
*  443, bug fix type var[]; newlink.c
*
*  5.11.4 Sep 18 1996
*
*  5.11.5 Sep 20 1996
*  G__VIRTUALBASE         , virtual base class support for precompiled class
*                         , virtual base class support for interpreted class
*  444, class object monitoring of base class
*  -                      , WinNT tmpfile bug fix
*  445, A<T> *p=A<T>(param) bug fix
*  446, loop compile optimize, static member bug fix
*
*  5.11.6 Sep 30 1996
*  -                      , sunos4_gcc bug fix G__NONANSI, G__SUNOS4
*                         , G__BORLAND tmpfile work around. bcstrm.cxx
*
*  5.11.7 Oct 5 1996
*  447, clearerr(stdin) in G__input()
*  448, bit-field support for interpretation
*  -                      , loadfile.c G__mfpopen() bug fix
*
*  5.11.8 Oct 8 1996
*  449, bug fix newlink.c typedef char* STRING; f(STRING&)
*  450, bug fix newlink.c G__add_macro() 
*  -                      , ios:: enum value platform dependency handled
*
*  5.11.9 Oct 9 1996
*  451, user defined pragma
*  G__TCLTK               , Tcl/Tk link
*  452, 
*  453, -Binitfunc for -c-1 -c-2
*  -                      , The WildCard interpreter created lib/WildCard/
*  454, define macro in WinNT \r\n bug fix
*
*  5.11.10 Oct 11 1996
*  -                      , WildCard Windows-NT porting start, 
*  454, (*GetSpecialObject)(name) change
*  455,
*
*  5.11.11 Oct 15 1996
*  456, pointer to pointer in G__value 
*  457, pointer to pointer in G__value phase 2
*  458, friend class scope bug fix
*  459, static member delete order bug fix
*  460, #include PP_MACRO
*  460, #include <xxx> omit .h
*  461, default template argument implemented
*  462, template template arg bug fix
*
*  5.11.12 Oct 17 1996
*  463, stderr,stdout,stdin redirect
*  457, decl.c size of pointer to pointer bug fix
*  464, G__exec_tempfile() exposed to interpreter
* 
*  5.11.13 Oct 22 1996
*  465, func def in temp file gets error message
*  466, G__getmakeinfo() checks env-var before MAKEINFO
*
*  5.11.14 Oct 26 1996
*  G__MULTIBYTE           , multi-byte char comments and strings
*                           fread.c , parse.c , quote.c
*                           EUC and SJIS automatic judging algorithm. 
*                           Half-size kana must not be used in SJIS.
*                           Can not handle JIS code.
*  467, lconv, ldiv, tm struct true link, strstrct.c added
*  468, precompiled bit-field access
*  469, fpos_t may not be scalar type
*
*  5.11.15 Oct 26 1996
*
*  5.11.16 Oct 30 1996
*  -                      , library_func and compiled_func tuned up
*  -                      , sscanf,fscanf,scanf can handle upto 12 arguments
*  469, fpos_t bug in fread.c macro.c sizeof.c, need to
*                           define G__NONSCALARFPOS for Convex computer.
*
*  5.11.17 Nov 2 1996
*  470, +=,-=,*=,/=,etc... operator overloading support
*  471, ++,-- operator overloading support
*  472, #pragma link C++ function f(char*,int);
*  473, pause.c bug fix
*
*  5.11.18 Nov 7 1996
*  474, bug fix copy constructor with scalar argument
*
*  5.11.19 Nov 7 1996
*  G__REDIRECTIO          , I/O redirect in debugger interface
*
*  5.11.20 Nov 9 1996
*  G__SPECIALSTDIO        , Tcl/Tk link on WinNT, 
*  -                      , bug fix operator reference
*  475, FILE **sout,  *sout bug fix
*
*  5.11.21 Nov 12 1996
*  -                      , bug fix temp file , store fpos_t
*  477, Bug fix cout<<"abc?" confused with a<b?"abc":"def"
*  478, G__clearerror() API added for interpreter
*  479, G__GetSpecialObject fix
*
*  5.11.22 Nov 15 1996
*  480, return in G__exec_tempfile()
*
*  5.11.22 Nov 15 1996
*  -                      , Visual C++ 4.0 installation kit available
*
*  5.11.23 Nov 17 1996
*  481, Root Special object fix
*
*  5.11.24 Nov 20 1996
*  482, loop compile optimize level 3
*  483, loop compile parameter passing(not activated)
*
*  5.11.25 Nov 22 1996
*  484, func overloading, enum->int conversion
*  485, func overloading, class* bug fix
*  -                      , WILDCDIR switch for WILDC compilation
*  486, autocc generarized
*  -                      , Visual C++ makecint support
*
*  5.11.26 Nov 27 1996
*  487, autocc improved
*
*  5.11.27 Nov 29 1996
*
* BIG CHALLENGE ***************************************************
*  5.11.28 Nov 30 1996
*  G__ASM_WHOLEFUNC       , bytecode compile whole function
*
*  5.11.29 Dec 4 1996
*  488, G__deletevariable() API
*
*  5.11.30 Dec 13 1996
*  -                      , optimize3, type* a; a[i];
*
*  5.11.31 Dec 21 1996
*  489, bug fix G__free_ifunc_table_upto()
*  -                      , 'x yyy.c' bug fix security recover
*
*  5.11.32 Dec 28 1997
*  -                      , G__appendautocc() linenumber bug fix
*  -                      , WILDC AllocConsole(), FreeConsole() improved
*
*  5.12.0 Jan 4 1997
*  -                      , static -> extern G__security_recover() 
*  -                      , G__add_ipath() adding double backslash for Win32
*  -                      , WildC Windows-95 problem fixed
*  492, operator[], opr.c, G__tryindexopr(), use tovalue()
*  493, Array<T> operator <<() tmplt.c G__declare_template
*  494, user defined conversion operator remove space
*                           type of user defined conversion operator
*
*  5.12.1 Jan 15 1997
*
*  5.12.2 Jan 20 1997
*  495, pause.c redirect bug fix by Fons
*
*  5.12.3 Jan 25 1997
*  -                      , pause.c G__NUM_STDERR bug fix
*  496, conversion operator bug fix 2, Ralf Garison reports
*  497, inheriting template class bug fix, Ralf Garison
*  498, printf("###\n"); appears in template
*
*  499, predefined macro __cplusplus, fixed later
*  500, template A<int>; instantiation in bstring.h
*  501, expr.c explicit destructor
*  502, pause.c removing grep temp file rm -> remove()
*  503, loadfile.c .c .cxx strlen() bug fix
*  504, struct.c atom_tagname G__MAXNAME->G__ONELINE
*  505, constructor return type 'i'
*  506, typedef.c defined_typename() global scope operator
*  -                      , G__ci.h #ifdef nesting is corrected
*  507, incremental bytecode compilation speed-up 
*
*  5.12.4 Jan 30 1997
*  508, bug fix bytecode compiler LDST_VAR_INDEX
*  509, bug fix incremental bytecode compile
*  510, bug fix ...
*  511, debugger if func command shows only global func
*  512, G__compiled_func,G__library_func, name buf problem
*  513, G__compiled_func,G__library_func, name buf problem
*  514, static local variable initialization
*  G__TO_BE_DELETED in ifunc.c with 515-517 change
*
*  5.13.0 Feb 1 1997
*  515, member function bytecode compilation
*  516, bytecode optimize2 bug fix INCJMP i+=1
*  517, bytecode function default parameter
*  517, member function bytecode exec flag set
*
*  518, G__memberfunc_tagnum,G__memberfunc_struct_offset
*  519, NEWALLOC,DELALLOC
*   NOTE: Need to redesign G__new/delete_operator() for bytecode func compile
*         Calling constructor/destructor for array new/delete need refinement.
*  520, cast type& 
*  521, bug fix, comment in template with ' "
*
*  522, default parameter
*  523, reference type in bytecode experimental
*                         , malloc.c pcode.c var.c
*  524, bug fix for multiple inheritance inherit.c
*  525, bug fix, pure virtual func ifunc.c
*  526, tmplt.c A<const int> bug fix
*  -                      , newlink.c name conflict derived base fixed
*
*  5.13.1 Mar 1 1997
*  527, typedef.c 'signed' fixed
*  528, newlink.c program link typedef
*  529, tmplt.c  t<T> *t<T>::f() bug fix
*  530, new.c new t<T>[x] bug fix
*  531, ifunc.c bytecode func returns NULL for pointer
*  532, decl.c struct initialization by {}
*
*  5.13.2 Mar 12 1997
*  533, CallFunc::SetArgArray()
*  534, G__MethodInfo::PointerToFunc() calls 
*                           G__compile_bytecode
*  535, delete p (p=NULL) 
*  536, block and protect duplicate declaration
*  537, check variable table before constructing compiled
*                           object. TURNED OFF now in var.c,decl.c
*  G__FONS85              , .x func.C("abc.C") bug fix
*
*  538, check variable table after constructing compiled
*                           object and delete afterwards.
*  539, var.c bytecode compile Alpha bug workaround
*  540, object construction+bytecode compile bug fix decl.c
*  541, a==b?1:0 bug fix
*  542, G__exec_bytecode() speed up by 10%
*  543, bytecode if(double) bug fix
*  544, expr.c G__btest() avoid Alpha crash
*  545, garbage collection turned off while bytecode comp
*  -                      , S__security problem in ALPHA not closed yet
*  546, delete global variable table
*
*  547, HTML API Token.h/cxx, MakeLocalTable() not complete
*  548, ROOT special object bug fix
*  549, pointer to function bytecode reference big fix
*  550, #pragma link on enum xxx; enables all enum members
*  -                      , var.c pointer to member decl bug fix
*
*  5.13.3 Mar 19 1997
*  551, bug fix
*  552, +=,*=,/= optimize
*  EXOSED THIS VERSION FROM CERN
*
*  5.13.4 Mar 22 1997
*  553, proto debugger command
*
*  5.13.5 Apr 5 1997
*  554, pcode.c *=,+=,etc bug fix
*  -                      , pcode.c G__LD_p1_pointer, P10_pointer bug fix
*  EXPOSED THIS VERSION FOR CQ PUBLISHING BOOK
*
*  5.13.6 Apr 10 1997
*  555, parameter debugging when calling compiled func
*  556, template class A<A<int> >
*
*  5.13.7 Apr 25 1997
*  557, while() c=!c; bug fix
*  558, template default argument
*  559, nested typedef buf fix
*  560, explicit type conversion of typedef name
*  -                      , G__set_stdio_handle() exported as DLL
*  561, power operator with non positive operand
*  (backup archive cint.tar.gz.bk here)
*  562, Windows Console allocation in disp.c
*  563, cintready flag is introduced
*  564, breakkey, stepmode tracemode API added
*  -                      , disp.c WIN32 autoconsole improved
*  565, virtual offset in no_exec_compile bug fix
*
*  5.13.8 May 11 1997
*  566, bug fix var.c automatic variable
*  567, typedef char ** a; bug fix
*  568, typedef volatile char ** a; bug fix
*  569, typedef char* *a; bug fix
*
*  5.13.9 May 17 1997
*  570, class A { A() { int l=strlen("abc"); } }; fix
*  -                      , Watcom compiler problem fix, G__ci.h global.h
*
*  5.13.10 May 24 1997
*  571, double *y=new double(100); bug fix
*  572, bytecode speed up by judging operand type
*  573, int f(int a[][3]) newlink bug fix
*
*  5.13.11 May 22 1997
*  574, platform/visual/makecint.c bug fix G__LIB
*  575, security for ANSI C library function
*  576, *p++ *++p bug fix
*  G__NONANSIOPR          , illegal operator checks for real number
*  577, /[keyword] search without grep
*
*  5.13.12 Jun 1 1997
*  578, i++ optimize
*  579, int f(int a[][3]) newlink bug fix, bug fix again
*
*  5.13.12 : C++ interpreter - CINT book first print CD-ROM version
*
*  5.13.13 Jun 14 1997
*  580, typedef globalcomp auto link-on
*  -                      , void **VV;  &V[6] bug fix in var.c 315-319
*
*  5.13.14 Jun 15 1997
*  -                      , scanf() with 6 arguments bug fix
*  581, new int*[10]; this change is under experiment
*
*  5.13.15 Jun 22 1997
*  583, string concatination by "abc" "def"
*
*  MAJOR CHANGE FOLLOWS, 
*
*  5.13.16 Jun 28 1997
*  582, operator precedence complies to ANSI standard
*   This change went well, however, G__getexpr() got too big and calling
*  overhead affects performance by 3% on Linux. 
*  584, #error when reading interface method header
*  585, new(arena) type(); implemented in new.c pcode.c
*  586, p->~int() error check avoided
*
*  5.13.17 Jul 5 1997
*  587, struct initialization with inheritance err msg
*  -                      , G__get_linked_tagnum returns -1 at NULL input
*  588, func returns class object is not compiled
*  589, A::f() { int i=index(); } crash bug fix
*  590, same as above, solved inherited function
*  591, zero size class/struct padding
*  592, G__no_exec_compile result.obj.reftype.reftype fix
*  593, A &a=B.GetA(); bug fix
*  594, f(sizeof(int),member) bug fix
*  595, p=new type[0]; delete[] p; bug fix
*  596, ++obj[i]; operator[] bug fix
*  597, a=new T[x]; delete[] a; bytecode disabled
*  598, protected/private operator delete makecint bug fix
*  599, loopcompile bug while() if() i++; else n++; fix
*
*  5.13.18 Jul 12 1997
*  600, G__getexpr(), tmplt<cls>::abc
*  589_YET, bug workaround
*
*  5.13.19 Jul 21 1997
*  601, for(init;;next) bug fix*
*  Scott Snyder's feedback
*  602, Type.cxx enum reftype and isconst bug fix
*  603, invalid baseclass access protected in ifunc.c
*  604, invalid baseclass access protected in inherit.c
*  -                      , char signedness change for SGI compiler bug G__ci.h
*  605, A<const int> x; bug fix
*  606, newlink.c file open bug fix
*  607, #pragma link off all methods; added
*  608, A<const int> x; newlink problem, Risky change
*  609_YET, typedef int Int_t; A<Int_t>, 
*                            only in G__templatemaptypename() so far
*  -                      , for(;;) { A *p; return p+i; } bug fix
*  610, class A{ f() {static int a;}}; bug fix
*  611, class A{ f() {#define A 123}}; bug fix
*
*  5.13.20 Jul 27 1997
*  -                      , makecint supports DJGPP
*  612, namespace, malloc.c, var.c, parse.c, sizeof.c
*                           val2a.c, struct.c
*                           postpone changes in newlink.c about makecint
*                           postpone changes in sizeof.c about ERTTI
*  613, using directive and declaration, parse.c,struct.c
*  614, WinNT/95 WildC++ using common libcint.dll
*  615, class X { f() const {...}}; g(){int n=f();} bug fix
*  616, namespace X{ #include "..." };
*  617, Nick's calorimeter.cc bug fix int i=index(col,row)
*  Scott Snyder's contribution
*  618, #pragma link off all methods bug fix
*  619, void foo() const = 0; bug fix
*  620, typedef scope bug fix
*  621, G__isenclosingclass() env_tagnum test
*  622, A::B::disp(); bug fix
*
*  5.13.21 Aug 12 1997
*  623, class object in bytecode function error msg fix
*                           This was a mistake. Deleted at ON629
*
*  5.13.22 Aug 17 1997
*  -                      , CINT and WildC++ has the same binary for WinNT/95
*  -                      , CINTOCX documentation
*  624, virtual base class pure virtual function override
*  -                      , G__SIGNEDCHAR_T bug fix
*  625, private enum { x = MACRO(y) }; bug fix
*  626_YET, typedef char Char_t; display convenience
*                          speed issue, disabled
*  627, no static fgIsA problem? commented out now
*  628, newlink.c, bug fix compiled
*
*  5.13.23 Aug 23 1997
*    fgIsA problem by Rene, turns out that it happens when bytecode function
*                           compilation. 
*                           Also need to figure out why p->pX()->Y() causes
*                           bytecode compilation to be invalidated.
*  629, bytecode func compile undefined symbol undetected
*
*  5.13.24 Aug 24 1997
*  630, immediate exit from function by return command
*                           This causes problem if class/struct object is
*                           required as return value. Use at user's risk.
*  631, x->f1()->f2() bytecode compile turned on. 
*                           3 cases, f1() returns A,A&,A*. Not quite sure
*                           for A, but seems like copy constructor is called
*                           properly.
*
*  5.13.25 Sep 9 1997
*  Nobuyuki Nakashima's feedback
*  632, 0x1A at the end of file, bug fix
*  633, f() bytecode compile
*  634, typedef int * pint; pint *b; *b bug fix
*
*  It was very unfortunate that my Linux2.0 disk crashed here. I lost some
*  data. Following works are done one Linux1.1 and Windows95.
*
*  Nick's feedback
*  635, f(float v[]) {} bytecode compile bug fix
*  636, G__defined_tagname() " Cls" fix
*  637, G__GET_STRUCTPVAR fix
*  638, G__letstructp fix
*  639, Cls **pp; delete[] pp[0]; bug fix
*  Arbel soft Yamamoto-san's request
*  640, more
*
*  5.13.26 15 Sep 1997
*  641, explicit type conv omitted ctor, func.c
*  642, templaet<class T> x f(T*) {} fix??, tmplt.c
*
*  5.13.27 20 Sep 1997
*  643, G__asm_exec, reset in G__calc
*  ECF
*  644, fp,fpos returns from G__MethodInfo
*  644, funcpage, index initialization of G__MethodInfo
*  -                      , mkincld.c sizef(fpos_t)==sizeof(long)*2 ->
*  bug fix
*  645, G__constvar = constvar in G__memvar_setup()
*  646,-, Protect overwriting const compiled object
*  647, virtual func resolution fixed
*
*  5.13.28 23 Sep 1997
*  -                      , mkincld.c bug fix
*  648, pointer to funciton typedef id, not complete
*  649, sizeof(const)
*  650, typedef type x; x(5); constructor call
*  651, #pragma link [C++|C|off] nestedclass;
*  -                      , G__incsetup_memvar() G__asm_wholefunc store
*  652, bytecode compile off for virtual base resolution
*  653, bytecode compile func if() .. fix
*  654, bytecode ~ operator bug fix
*  -                      , dec.oct,hex manipulator supported
*  -                      , iomanip.h supported
*
*  5.13.29 18 Oct 1997
*  655, unsigned long to double cast bug fix
*  -                      , bug fix 'void f() const ;'
*
*  Re-install Linux2.0, restored CINT and ROOT environment.
*
*  Alex Telea's request
*  656, copy ctor for normal assignment type conv
*    side-effect found, precompiled default assignment opr, copy ctor 
*    confusion.
*  657, virtualbase *p0 = pderived; bug fix
*  658, pvbase->vfunc()  vbase to derived resolution
*  659, delete pvbase; vbase to derived resolution
*  660, pvbase->Derived::f() vbase to derived NOT NEEDED?
*  661, (Derived*)pvbase; vbase to derived NOT NEEDED?
*
*  Scott Snyder's contribution
*  662, template<class T> class a;
*  663, template<class T=fee<int> > class { };
*  664, template<class T1,class T2=fee<T1> > class { };
*  665, -n???.cxx  post fix strchr -> strrchr
*  666, mutable and typename in casting
*  667, namespace std:: as global scope
*
*  Alex Telea's request
*  668, derived to public base assignment memberwise copy
*   problem remains with bytecode exec with multiple inheritance and virtual
*   ID.
*
*  Voropaev S.G.'s feedback
*  669, X *p=NULL; delete p; protected
*
*  Valeri Faine's feedback
*  670, LoadLibrary '/' -> '\'
*
*  Scott Snyder's contribution
*  671, foo<fee::tt> fix
*
*  5.13.30 25 Oct 1997
*  Alex Telea's request
*  672, conversion operator, fundamental type only
*
*  Scott Snyder's contribution
*  673, typedef X ** foo; typedef X *& foo; etc... fix
*
*  Alex Telea's request
*  674, conversion operator, to class/struct object
*
*  Scott Snyder's contribution
*  675, infinit recursive call of G__templatemaptypename
*  676, using namespace std; ignored
*  677, bar<fee<const int>, fee<const int> > bug fix
*  678, typedef const const int; 2nd const ignored
*
*  Alex Telea's bug report
*  679, *this[x] , (*this)[x]
*
*  5.13.31 1 Nov 1997
*  -                      , G__ci.h macro G__NOINPUTOPERATOR added
*  -                      , newlink.c ??? within G__ROOTSPECIAL
*  -                      , G__globalvarpointer=G__PVOID, but why?
*  680, operator new overload makecint rule change
*
*  Alex Telea's request
*  681, ignore #ident directive 
*
*  Scott Snyder's request
*  682, template in namespace, major change
*  683, new A*[x]; memory leak bug fix
*  684, class {int& b=a;}; memory leak bug fix
*  685, protection from long input command
*  686, using directive in global scope only for template
*  687, function template namespace scope
*  688, default template arg with 0 arg
*  689, namespace #define as global
*  690, operator=(Array<X>& x) in G__define_var() fix
*  691, forward template class and member func declaration
*
*  5.13.32 3 Nov 1997
*  Alex Telea's bug report
*  692, virtual base inheritance makecint bug fix
*  693, template instantiation within class , bug fix
*                           problem remains for ctor/dtor in some case ???
*  694, ctor/dtor tmeplate inst experiment
*  Christoph Borgmeier's bug report
*  695, ctor/dtor tmeplate inst experiment
*                           broke root special object,
*  Enhancement
*  696, pause.c nested 'p' bug fix
*                         , s [expr] , S [expr] step over/into expr added
*  Alex Telea's bug report
*  697, base==derived comparison
*
*  5.13.33 8 Nov 1997
*  698, new A; without assignment or func call
*  699, bytecode compilation assignment bug fix
*  -                      , same as above
*  Jacek's request
*  700, int k(5); fundamental type initializaion
*  701, cout << (unsigned char*)p << endl; bug fix
*  Alex Telea's request
*  -                      , 0 value assignment to pointer 
*
*  5.13.34 19 Nov 1997
*  702, return TBuffer::operator<<(xxx); unkonw reason bug
*  703, operator new/delete detection in ifunc.c 
*                         , detection in newlink.c needed???
*  695, ROOT special object bug fix 
*  705, new(arena) A; bytecode compiler bug fix
*
*  5.13.35 24 Nov 1997
*  -                      , SunOS4.x /usr/ucb/cc compile problem fixed
*  706, Stub member function (non ctor/dtor) supported
*  707, G__TypeInfo
*  708, pointer to func 'Q' typedef name uniqueness
*
*  5.13.35 : C++ interpreter - CINT book second print CD-ROM version
*
*  5.13.36 30 Nov 1997
*  Scott Snyder's bug report
*  709, instantiated template class scope bug fix
*  710, typedef ns::mytype mytype2; bug fix
*  711, size of G__type2string() , G__fulltagname()
*  -                      , G__TypedefInfo::EnclosingClassOfTypedef() added
*  712, template memfunc, scope 
*  Fons Rademaker's request to clean up -Wall warnings
*  713, Clean up g++ -Wall warnings
*
*  5.13.37 6 Dec 1997
*  714, template instantiation /usr/include bug fix
*  715, G__getreserved(), delete extra eval
*  716, template func param match bug fix
*  717, &*p++
*  718, constxxx
*  719, G__overloadopr() bug fix full tagname,typename
*  720, typedef int* pint; pint p; *p; bug fix
*  721, new (arena) type; bug fix
*  722, STL template func instantiation by fundamental type
*  723, bug fix bytecode compilation
*  724, const arg for reference argument 
*  725, G__exec_memberfunc setting in ifunc.c
*  726, G__bstore() no_exec bug fix
*  727, template<class T> void f(x<y,T,z> a) { } support
*  728, *p++ bug fix in bytecode compilation
*
*  5.13.38 16 Dec 1997
*  729, typedef void *(*pf)(); bug fix
*  Alex Telea's bug report
*  -                      , f(int=3); 
*
*  5.13.39 19 Dec 1997
*  730, f(class A*) 
*  731, f(class A& x) 
*  732, bug fix in decl.c
*  733, p->~U() where ~U() is default dtor
*  734, Allocator template workaround
*  -                      , STL HP reference implementation is included 
*  735, enclosed template instantiation, WORKAROUND
*  Alex Telea's bug report, G__TypeInfo::Init() invalid type handling
*  736, new A(v); without copy ctor,
*  737, class list { f() { list_node tmp=get_node(); }};
*  738, class B::A; A((A)0x1234) scope problem
*  739, class B::A; A::f() { A tmp = *this; }
*  -                        operator*() overloading in G__getvariable
*  740, operator*() overloading in G__tovalue
*  741, cout << setiosflags(ios::left) << ..
*  742, (int*)&abc
*  743, Mandatory func call stack break 
*
*  5.13.40 4 Jan 1998
*  744, for(;;) if(1) continue; bug fix
*  745, operator!=(xxx,yyy); call in STL, opr,c typedef.c
*  746, STL list.h bug fix, ifunc.c
*  747, operator*() call G__store_struct_offset bug
*                           This change may slow down bytecode execution speed
*  748, template<class T> void f(T* x); bug fix
*  749, Implicit conversion parameter scope
*  750, Argument conversion for template function
*                           derived to base, 
*  751, operator*() for assignment
*  -                      , var.c G__ASSIGN_PVAR 
*  -                      , puts + newline
*  752, return(iterator(tmp)); G__templevel 
*XX753, T& operator*() { return(dat); }
*
*  5.13.41 13 Jan 1998
*  -                      , char *c; c->Draw(); error detection in var.c
*  754, Exception handling
*  755, Bytecode compile continue for not found virtual fnc
*  756, Bytecode compile status display
*  -                      , bug fix -O3 virtual func bytecode optimization
*
*  5.13.42 23 Jan 1998
*  Scott Snyder's contribution
*  757, const pair<const float,int>
*  758, G__string2type_body() retain space
*  759, A::B::C when B is defined within scope A
*  
*  760, Protected base ctor call
*  761, template<class T> T const* f() const;
*                           still not perfect, T const *A<T>::f()
*  Fons Rademakers's request
*  762, ANSI/ISO C++ compliant iostream
*  Alex Telea's bug report
*  763, f(A**** x), not complete, func call causes segv
*  764, f(A* x); f(NULL) f(0)
*  765, deletion of assertion in G__get_envtagnum()
*
*  5.13.43 4 Feb 1998
*  Scott Snyder's contribution
*  766, #define DOOM_STD std::
*  Ulli Schwanke's bug report
*  767, if(!i%x) bug fix
*  Valeri Dorofeev's bug report
*  768, func proto overriding bug fix
*  ifstream deletion problem fix,
*  -                      , libstrm.cxx malloc(size) -> new(size)
*  769, linking undefined class/struct 
*  Scott Snyder's contribution
*  770, namespace nam{class S; A<A<S> > f; } 
*  771, const
*  772, 
*  773, 
*  773, 
*  774, 
*  775, 
*  Tetsu Watanabe's feedback
*  776, Evaluation of array size decl in bytecode compile
*                          array size decl as local const still causes problem
*  Scott Snyder's contribution
*  777, nested template reading and writing to same file
*  778, G__instantiate_template() tagnamein -> replacetmpl
*  -                      , +V problem error->warning
*  779, decl, reference initialization workaround
*  780, opr.c std::
*  781, vec<int>a;
*
*  5.13.44 1 Mar 1998
*  -                      , G__search_typename2 exported. bug fix
*  782, #pragma include   error -> warning
*  783, makecint -cc & -cint option added
*  G__VARIABLEFPOS        , record global variable file position
*
*  5.13.45 17 Mar 1998
*  784,(ON698) new A(); without assignment or func call
*  785, ON707 bug fix, 
*  Scott Snyder's contribution
*  -                      , G__DONT_CATCH_SIGING in init.c
*  786, forward tmplt decl, in memfunc tmplt ?
*  787, foo<fee*> ?
*  788, ??? G__templatetypename() ?
*  -                      , check also stack depth in G__getexpr()
*  789, null terminate string in fread.c
*  790, in expr.c ?
*  791, default arg in func tmplt ?
*X 792, string substitution problem of tmplt instantiation?
*  793, var.c , cint -q0 scott26.C segv workaround
*
*  5.13.46 1 Apr 1998
*  794, #include ".." first try where source code exists
*  795, workaround to ON792  T() -> void*() -> (void*)()
*  796, void (*p2f[])() = {a,b,c}; bug fix
*  797, for(;;) { CLS x=init; } bug fix
*  798, for(;;) { CLS& x=init; } bug fix
*  799, for(;;) { CLS& x=init; } bug fix bytecode
*  -                      , G__check_nonull() G__int(*para) bug fix for SGI
*
*  5.13.47 2 Apr 1998
*  800, load XXX.dll with XXX.[DLLPOST] in MAKEINFO
*  801, reset G__reftype in G__memvar_setup()
*  802, #define A 3.14  , A -> 1.1343e-314 bug fix
*
*  5.13.48 11 Apr 1998
*  G__STD_NAMESPACE       , ON780 766 676 667, this does not work yet
*  Scott Snyder's bug report
*  803, typedef foo<const const int> x;
*  804, G__library_func() in bytecode, result->ref=0 fix
*  805, Array index check changed for STL end()
*  806, throw bytecode turn off, segv
*  807, reference type global for dictionary generation
*  808, Eliminate gets in g__cfunc.c for ROOT
*
*  5.13.49 18 Apr 1998
*  809, G__pointer2func recursive call bug fix
*  810, G__getexpr() a<b<c>> -> a<b<c> >
*  -                      , G__stepmode(1) from interactive session bug fix
*  811, 
*  812, memberfunc template
*  813, if(i) return x;  double x;  buf fix
*  814, new A(g->f(),g->f()); bug fix
*
*  5.13.50 25 Apr 1998
*  815, tempate<> class numeric_limits<float> { ... };
*  816, sizeof( signed char )
*  817, f() throw() ;
*  818, template<class T*> A { T a; } A<char*> b;
*  819, iostream style header with preprocessor
*
*  5.13.51 1 May 1998
*  -                      , Array index check changed for STL end() in pcode.c
*
*  5.13.52 5 May 1998
*  Otofuji-san's feedback,
*  -                      , src/Makefile.base.nec fix 
*  820, inherited virtual flag
*  821, p2f resolution bytecode vs compiled in shl.c
*  -                      , G__define_var new_name length, f ( LongListOfArg )
*  
*  5.13.53 10 May 1998
*  -                      , SIGALRM
*  822, bytecode optimization in wholefunc copilation G__LD
*
*  5.13.54 15 May 1998
*  823, G__CallFunc::Exec interpreted func call
*
*  5.13.55 16 May 1998
*??824, number of function argument exceed error message
*  825, typedef struct { } tstruct; cpplink bug fix
*
*  5.13.56 20 May 1998
*  Ralf Garionis's contribution
*  -                      , cint -p -c-1 xxx tmp file removal bug fix
*  826, (Lost this modification)
*  827, printf string length warning
*??828, #pragma link function operator<<(xxx); bug fix
*
*  5.13.57 20 May 1998
*  829, extern "C" G__InterfaceMethod
*  -                      , Illegal assignment error mask for wholefunc compile
*  -                      , CallFunc error message mask
*  830, double ***x;
*  831, bytecode compilation with class object rejection
*
*  5.13.58 21 May 1998
*  832, form(char *format ...);
*  833, Fundamental reference type arg for precompiled func
*--834, Unlimited number of function arguments 1, disabled
*  835, float xy[2][] = {1,2,3,4}  err det, bug fix
*
*  5.13.59 31 May 1998
*  Stefan Kluth's bug report 
*  836, enclosed class dictionary new A::B; bug fix
*  Zvyagin Alexander's bug report
*  837, if(NULL==(a=new int)) bug fix
*  Damir Buskulic and Pasha's request
*  838, TH1F* h3("h3","h3",0,1); error message
*  -                      , VisualC++5.0 Win32api.dll support
*  -                      , bool.h included in stdio.h and iostream.h
*  Wolfgang Rothermel's bug report
*  839, f(void* f); f(NULL); bug fix
*  840, f(unsigned *p); bug fix
*  -                      , G__ASM_BYTECODE_FUNC_LIMIT 100 => G__MAXINST
*  841, bytecode compiler more messages
*
*  5.13.60 7 June 1998
*  842, goto statement bytecode compilation in function
*  843, Explicit conversion bytecode compilation
*  -                      , ios::setbase() bug fix
*  844, switch statement bytecode compilation in function
*
*  5.13.61 19 June 1998
*  Fons Rademakers' bug report
*  845, f(char&); newlink.c, bug fix from ON833
*  -                      , f(unsigned char) bug by ON840
*  Alex Telea's bug report
*  846, f(int[]); 
*  847, operator double *();
*
*  5.13.62 21 June 1998
*  Valery Fine's bug report
*  848, a-> f();
*  849, +V , C style comment
*  850, Value evaluation function call
*
*  5.13.63 4 July 1998
*  -                      , inherit.c G__publicinheritance() bug fix
*  -                      , help command GNU readline #ifdef
*  851, friend func in template class late instantiation
*  -                      , Value evaluation debug mode mask
*  852, str1 = "abc" + str2; fix
*  -                      , enum ref arg , bug fix in newlink.c
*
*  5.13.64 11 July 1998
*  853, symbol name length check
*  854, trace mode function name and file name
*  -                      , src/new.c 336 0==memarena bug fix {}
*  -                      , G__MAXNAME 60->80
*  855, dynamic,static,reinterpret,const_cast no check
*  -                      , ON843 bug fix
*
*  5.13.65 12 July 1998
*  856, ls,dir,pwd,cd command
*  857, char ** A::f() { } bug fix 
*  858, baseclass offset when size is 1
*  859, OP2_OPTIMIZE p+i p-i bug fix
*  860, operator[] a[i][j][k]  G__oprovld bug fix
*
*  5.13.66 24 July 1998
*  Ron Eastman's contribution
*  -                      , xppp[i][j][k][l] in var.c
*  -                      , xppp[i], xppp[i][j], xppp[i][j][k] bug fix
*  Gunay Arslen's request
*  857, -O5 another level of increment bytecode compile
*  858, enum A {a,b}; no memory for static fgIsA bug fix
*
*  5.13.67 26 July 1998
*  -                      , input.c readline returns NULL with ^D, bug fix
*  859, pause.c G__resetifuncposition. extra reset
*  860, pause.c init_process_cmd_called flag
*  Release for CINT book 3rd print
*  
*  5.13.68 31 July 1998
*  861, dlerror()
*  Akiya Miyamoto's contribution
*  -                      , HI-UX Hitachi Supercomputer DLL support
*  -                      , Notes banner for -? option and h commnad
*  862, G__CallFunc::SetFuncProto SetBytecode bug fix
*  863, void* G__findsym(char* fnc);
*  864, delete 0 accepted
*  865, c=a+b where a,b,c are class without operator+ error
*  Scott Snyder's contribution
*  - in macro.c 178       , #define foo unsigned char   bug fix
*  - in macro.c 192       , #define foo double          bug fix
*  866, #define foo signec char     bug fix
*  867, #define foo className       bug fix
*  868, #if xxx \\n || yyy    bug fix
*??869, #define foo int \n #ifdef foo   fix ???
*  870, float matches=std::numeric_limits<float>::xxx;
* /871, namespace n{class A{static cls x;}; A::cls::x={1};}
*  872, R__EXTERN symbol added in parse.c
*  873, G__display_newtypes() API
*
*  874, VC++ makecint -m option support, makecint.c,init.c
*  875, G__aterror added, G__p2f_void_void() added
*                           Both G__atpause & G__aterror use G__p2f_void_void
*
*  5.13.69 22 Aug 1998
*  876, a[b?1:0] optimize bug fix
*  877, f() { a[] = { 1,2,3 }; } bytecode abort
*                           f(T a[],T b[10],T c[][3]) { } bytecode abort
*  878, #if defined(X) in bytecode compilation buf fix
*  879, T a[10]; &a[9]-(&a[0]) fix in value.c OP2 optimize
*  -                      , pcode.c G__indexconst bug fix
*  880, f(T a[],T b[10],T c[][3]) { } bytecode 
*  881, class T **p=T*[10]; 
*  882, f() {while(x){if(cnd) return; else xxx;}} buf fix
*  883, long long and G__longlong type
*  884, bool automatically loaded
*  885, G__shl_load G__allsl 
*
*  5.13.70 29 Aug 1998
*  886, #pragma link C++ class A<T*>-;
*  887, typedef CLS* pc; pc *q=new pc; bug fix
*  888, enum A { a }; enum B { b=a }; bug fix
*  -                      , G__ANSI defined , prototype mismatch fixed.
*  -                      , Linux2.0.34 Redhat-5.1 support, longlong WildCard
*  889, RH5.1, getopt() old spec version G__getopt()
*  890, orignal base of vfunc message checks compiled cls
*
*  5.13.71 6 Sep 1998
*  891, Bytecode compilation of virtual function
*  892, ROOT Command input improvement F("abc) 
*  -                      , uname POSIX system call
*  893, Platform dependent symbol support
*  -                      , G__completionlist in shl.c bug fix
*  -                      , more on POSIX
*
*  5.13.72 8 Sep 1998
*  -                      , cintsock.dll and winposix.h emulation supported
*  894, Note: Bit-field ... omitted.
*  895, G__security_recover() added in G__calc()
*  896, G__atevaluate() bug fix
*  Alex Telea's bug report
*  897, Pure virtual flag decrement bug fix
*  898, newlink.c virtual dtor flag set,
*
*  5.13.73 15 Sep 1998
*  899, G__calc and G__CallFunc asm stat store
*
*  5.13.74 19 Sep 1998
*  900, newlink , G__add_macro -p -DX=\"abc\" bug fix
*  -                      , IsTmplt, TmpltName, TmpltArg added to G__ClassInfo
*  901, pause.c G__security assignment bug fix
*
*  5.13.75 23 Sep 1998
*  G__VC60BUGFIXED        , VC++6.0 exception handling bug workaround
*  903, undefined member assignment SEGV, bug fix
*  -                      , long.dll already loaded  bug fix in decl.c
*  Gunay ARSLEN's bug report
*  904, #define xxx "abc"  bug fix
*  905, G__replacetemplate, G__asm_wholefunction escape
*  906, if(CLS==INT) x; else y; free_tempobj bug fix
*  907, LD_FUNC,LD_IFUNC, ++sp condition
*  908, sizeof(*ptr) bug fix
*  909, EOF problem fixed in G__readansiproto()
*  910, bit-field and bytecode optimization bug fix
*  911, T *p=new T[x] bytecode abort
*
*  5.13.76 2 Oct 1998
*  912, #pragam link C++ CLS::MEMFUNC(args); 
*  913, bool loading in class definition
*  914, cout << (bool)1 ; bug fix
*  915, for(int i=0,i<10;i++) protection
*  916, multiple inheritance virtual func resolution
*  917, #46  -> line  Solaris bug fix
*  918, atol -> strtoul in getitem, unsigned in bstore
*
*  5.13.77 11 Oct 1998
*  919, typdef T** x;
*  921, typedef T** x; x pp=aa; bug fix reference
*  922, template<class T> f(T x); f(int** x); 
*  923, template<class T> f() { new T(); } T=X*
*  924, new(p) A*(x); new.c bug fix
*  925, p->~int(); bug fix 
*  926, T x[] = {long list}; bug fix
*  - ON753 deactivated    , nov> cint Complex.cxx test2.cxx bug fix
*  927, f() {static MyClass a;} bug fix
*  -                      , a=3 , undefined member  bug fix
*  928, G__allincludepath unlimited length
*
*  5.13.78 22 Oct 1998
*  929, iterator f(iterator x);
*  930, sizeof(void) sizeof.c
*  931, iterator x=a.begin() decl.c 
*  932, namespace foo{template<class T>class x{};}
*
*  5.13.79 30 Oct 1998
*  -                      , tmplt.c 2126, comment fixed
*  933, bug fix ON919???
*
*  5.13.80 3 Nov 1998
*  934, G__param_match enum reference bug fix
*  -                      , iostream G__ateval template added
*  935, %p format
*          14 Nov 1998
*  -                      , G__MAX_SL increase common.h
*  936, shl loading error
*  937, G__clear_asm G__no_exec_compile reset removed
*  938, G__NOT_USING_2ARG_NEW operator new change
*  -  , lib/posix/winposix.h/c bug fix
*  -  , lib/stl/* refined
*  939, #define xxx lll  comment ,  bug fix
*
*  5.13.81 22 Nov 1998
*  940, var.c 4467,new.c 468
*  -  , Borland C++ 5.3 (C++ Builder 3.0) porting start
*
*  5.13.82 25 Nov 1998
*  -                      , aCC compiler setup and hpux10_acc fixed
*  Scott Snyder's contribution
*  941,  #define in class def, etc...
*  942,  #define macro in more complex way
*  943,  virtual base cls, pure virtual func count
*  944,  better error handling 
* ?945,  reference member error ignore, -c-1
*  946,  class obj init error
*  947,  token concatination
*  948,  macro replacement 
*  949,  scope, search base of enclosing class
*  950,  memfunc tmplt in nontmplt class
*  951,  #pragma line num
*  952,  include file tree
*  953,  before/after parse hook
*  954,  macro
*  955,  G__psep ...
*  956,  assert(2<=x)  bug fix
*
*  957,  (x*TMath::power(2,2)) bug fix
*  958,  int x=0 int y=1; error detect bug fix
*  -  ,  cint.exe, libcint.dll for Borland C++ Builder 3.0
*  959,  VC++5.0 preprocessor problem fix
*  960,  VC++5.0 preprocessor problem fix
*
*  5.13.83 1 Dec 1998
*  961, string a; (const char*)a
*  962, string a; (const char*)a -> (char*)a  constness cast
*  963, cout<<a<<: typo err check
*  964, compiled operator[] caused bytecode compile err, bug fixed
*  -  , C++ builder iostream support, C++ builder porting complete
*
*  5.13.84 12 Dec 1998
*--965, informative err msg 'obj.mem' obj not found, obj.mem not found
*  966, operator ** overflow msg, integral literal overflow msg 
*  -  , limits.h UINT_MAX, ULONG_MAX was wrong. bug fixed in mkincld.c
*  967, add debugger command 'class A  /keyword' 
*  969, fix948, ClassDef problem fixed by Scott Snyder
*  -  , informative error message for mem func call
*  -  , add putenv system call in lib/posix/posix.h
*  970, add -C option, copy src file to $TMPDIR. src can be changed during run
*  -  , add FAQ.txt in source code package
*
*  5.13.85 19 Dec 1998
*  971, 'namespace x{ class A{ A();}; A::A(){}}' ctor/dtor scope bug fixed
*  972, friend template function improved (still not 100%)
*  -  , Solaris(SunOS5.6) lib/posix,lib/socket fix, 
*  -  , predefined macro G__SUN,G__SUNPRO_C,G__SPARC added
*  -  , 965 deactivated because of ROOT special symbol search problem
*  973, 948, 969 still problem, Fixed again, ??? 
*     , G__othermain, G__globalcomp
*  974, store/restore bytecode param in G__loadfile
*  975, 'if([enum val])' bug fix 
*  976, 'class A { A(nontype E) { } };' catch syntax error
*
*  5.13.86 20 Dec 1998
*  977, 'unsigned int a=0x80000000; a>>12;' bug fix
*  978, 'enum x {a,b}; void f(x *y){} f(b);' bug fix
*  -  , demo/tcpip, TCP/IP demo programm added
*  -  , demo/mthread, Multi-Thread demo program added
*  979, iterator& operator=(iterator& x); scope bug fix
*  980, basector, G__no_exec_compile bug fix
*  
*  5.13.87 8 Jan 1999
*  981, Private dtor linkage in rootcint
*  -  , 762 deactivated, seekg,seekp, need to verify portability
*  982, reference member error message
*  983, Txxx a = new Txxx;
*  984, shl.c HPUX/egcs fix
*  985, Double_t(1)/a bug fix, need verification
*  986, f(){const int SIZE;static int a[SIZE];} bug fix, need verification
*  987, f(){static int a[3]={1,2,3};} bytecode compile validation
*  988, bytecode abort message
*  989, f(int &,int a) { } byteocde POP bug fix
*
*  5.13.88 17 Jan 1999
*  990, unary + operator const int a(+1);
*  991, for(i=0;i<10;i++){if(i){A a(6);}}  Object creation bug fix
*  992, A *p(0); bug fix 
*  993, int a[2][3][4]; a a[0] a[0][0] eval pointer level bug fix
*  817-2, class A{virtual void f() throw=0;};  bug fix throw=0 in ifunc.c
*  994, int *p=(int*)new int;  bug fix
*  995, operator@(A& a,int*& b) { } bug fix
*
*  5.13.89 17 Feb 1999
*  996, cint -c-1 error return value
*  -  , G__asm_noverflow reset message display, only 1->0
*  -  , .a added as DLL extention. For AIX
*  997, 986 buf fix 'f(int a){const b=a;}'
*  998, string literal "abc" n  syntax error
*  999, operator error message improved
* 1000, #pragma link C++ operator<=(T& x,T& x); bug fix
* 1001, a.f()[1] bug fix
* 1002, delete problem fix. always use delete in ROOT
* 1003, non-const reference parameter promotion check
*
*  5.13.90 18 Feb 1999
* 1004, recursive G__process_cmd call in interpreted function bug fix
* 1005, vector<const A*> a;  bug fix
* 1006, A *p=A(); A *p=new int;  error report
* 1007, while(x) sum+=; error detection
* 1008, '.cover ' SEGV avoided
* 1009, f(char const*) bug fix
* 1010, G__defined_tagname
* 1011, return A(x); return type mismatch error, bug fix
* 1012, 986 fix,  class A{void f() {const int a=3;const int b=a;}};
* 1013, . vs -> warning message
* 1014, 2dt  error detection
* 1015, G__linked_taginfo::tagnum reset
*
*  5.13.91 10 Mar 1999
* 1016, void f(const float& x) { y=x; } f(2.0); referencey type argument
* 1017, cout << true ; bug fix
* 1018, operator A(); conversion
*
*  5.13.92 11 Mar 1999
* 1019, for(;;) { if(x) { } }  CL insert
* 1020, class G__FriendInfo ERTTI class added
* 1021, G__isInt() optimization
* 1022, while(x) { if(y) continue; i++;} bug fix  should keep JMP 0
*
* 5.13.93 17 Mar 1999
* 1023, f() { enum {start=10}; }  bug fix
* -   , 1013 improved. Warning not displayed for command line and ROOT macro
* 1024, while(x) test(CString()); copy ctor bug fix
* 1025, fixed template function parameter display
* 1026, template<class T*>  display
* 1027, template<class T> void f(T* x); display
* 1028, template<class T> void f(T* x,T* y); matching bug fix
* 1029, makecint/rootcint original base class message supressed
* 1030, void f(int x); p f()  list candidates
* 1031, error recovery, dictionary rewinding
* 1032, A t=new A;  error handling fixed
* 1033, reference count control toggle command
* 1034, G__IsInMacro() API
* 1035, Lock for thread protection
* 1036, f("long long string") limitation 
* 1037, void A< B , int >::f() {} bug fix
* 1038, template class name length check
*
* 5.13.94 31 Mar 1999
* 1039, G__free_ifunc_table_upto bug fix
* 1040, f(A*& x); f(new A) . bug fix
*
* 5.13.95 6 Apr 1999
* 1041, prec_stl directory added
* 1042, call SetFuncProto() more than twice bug fixed
* 1043, G__replacetemplate() store_reftype struct A{const char* x;} bug fix
* 1044, vector<int> , vector<int,allocator<int> > typedef default template arg
* -   , bug fix reloading template class DLL
*
* 5.13.96 11 Apr 1999
* 1045, map.h load/unload bug fix G__tagdefining reset in scrupto
* 1046, struct.c map.h reloading error fixed
* 1047, tmplt.c search for typedef for default template parameter
* 1048, pause.c 'class vector<int,allocator<int> >' bug fix
* -   , G__overloadopr() buffer length 
* -   , HP-UX aCC makecint.c newlink.c modification for include trick
* -   , include > tmp redirection bug fix
* 1049, TString* a("abc") syntax checking
* 1050, (string)??? error check
* 1051, #include<stdio.h>
* 1052, typedef new bug fix
* 1053, G__shl_load() G__setup_tagtable order change
* 1054, namespace compilation
* 1055, Internal error: G__type2string() ??? removed
*
* 5.13.97 18 Apr 1999
* -   , 1006 side effect fix
* Scott Snyder's contribution
* -   , KCC warning removed
* 1056, A<int, int>  space in template argument bug fix 
* 1057,namespace foo{class X{};}struct bar{using namespace foo;class Y{X x;};};
* 1058, initialization of G__using_namespace member
* 1059, Looking up enum in namespace
* 1060, using namespace directives in global scope
* 1061, spaces in macro arguments (8)
*-1062, imporovements for 'variable' macros
*-1063, More CRLF problems
* 1064, Parsing problem of A::B & X() {}
*
* 1065, (c1+c2).disp() bug fix
* 1066, G__clearfilebusy()
* 1067, security_recover
* 1068, return mem=local;
* 1069, f(1)[2] bug fix
* 1070, int a[10]; *a=3; bug fix
* 1071, delete (float*)l; bug fix
* 1072, G__loadfile() G__store_struct_offset reset
*
* Increment minor version because of the risk of 1073 
* 5.13.98 24 Apr 1999 ,  1073 disabled
* -   , G__pp_undef() #undef 'g' command bug fix
* -   , 1062, 1063 implemented but turned off by macro defined in G__ci.h
*-1073, EXPERIMENTAL! class object instantiation in bytecode function
* 1074, Api.cxx delete interpreted object
* 1075, G__Lderived declared if only necessary
* -   , G__more_pause() COLUMN enhancement
* 1076, function overloading and class inheritance scan order changed, err det
* 1077, class to fundamental type conv in func arg, bug fix
*
* 5.14.1  30 Apr 1999
* 1078, -Q quiet option for cint not to print prompt.
* PHIL0, ROOT class comment off of Dictionary
* 1079, G__display_proto() display also base class member function
* 1080, char *s; s->Data() error detection
* 1081, G__scrupto() crash prevention
* 1082, void*& argument to compiled function, bug fix
*
* 5.14.2  4 May 1999
* 1083, const data member in class handled as static const
* 1084, non-const static data member initialization in class def, warning
* 1085, 'class' command displays class/struct/union/namespace
* -   , G__dasm() uninitialized instruction protection
* 1086, G__EOFfgetc() does not exit, call G__genericerror instead.
* 1087, class A { }  missing ';' error detection
* -   , G__calc_internal() for not rewinding dictionary
* 1088, reference member dictionary generation allowed
* 1089, automatic variable supported
* 1090, -I,envvar option
* 1091, ROOT macro static variable prohibited
* 1092, (a+b.data()).data() bug fix
* 1093, A *p= new A; bug fix
* 1094, undo rewind implementation
*x1095, compiled class redeclaration, object deletion order, NOT IMPLEMENTED
* 1096, T b; T a=b; precompiled class bytecode bug fix
* -   , G__assign_error message
*
* 5.14.3  9 May 1999
* 1097, automatic variable turn on/off
* 1098, special character allowed as project and dllid for makecint
* -   , include/bool.h  -DTRUE, -DFALSE  problem fixed
* 1099, .hh .hxx. hpp extension allowed
* 1100, template comment
* -   , STL header files vector.h -> _vector.h
*-1101, non-static member func call->error, Not activated:dictionary problem
* -   , .X t141.cxx ("abc",123)  bug fix
* 1102, .X error recovery bug fix
* 1103, f(int x) { const int N=x*2; }
* -   , operator overloading floating accuracy %.12e -> %.17g
* 1104, f(scope::cls& x=scope::cls()) fix for makecint, not yet for interpreter
* 1105, .X f.C( sin(1.23) )  bug fix
*
* 5.14.4 22 May 1999
* -   , 1093 improved for makecint/rootcint
* 1106, G__tagdefining reset bug fix
* 1107, G__tagdefining questionable restore fixed ???
* 1108, La (reLoadAll) command 
* 1109, (enum A::)0 bug fix
* 1110, default parameter evaluation
* -   , G__getmakeinfo() API added
*
* 5.14.5 30 May 1999
* 1111, typedef char* value_type; f(value_type& x); bug fix
* 1112, typedef char* value_type; typedef value_type& ref; f(ref x); bug fix
* 1113, comment in command line
* 1114, vector<int > a; bug fix
* 1115, v1.insert(v.end(),4); bug fix
* 1116, template<class T> void f(int x,vector<T> y) { }
* 1117, ostream& operator(ostream& os,int a) { } bug fix
* 1118, float ary[3] = {1,2,3)   CR } bug fix
* 1119, variable array in bytecode function
* 1120, function overloading match, pointer level
* -   , 1013, G__IsInMacro() improved
* -   , .proto command displayed line number clear
* -   , L_tmpnam problem for LinuxPPC fixed
* 1121, pointer to pointer in bytecode
* 1122, void f(NonExist&); error in makecint
* 1123, ** warning
* 1124, operator const char*() bug fix
*
* 5.14.6 10 Jun 1999
* 1125, DLL duplicate class initialization avoided
* PHIL1, ROOT script compiler
*
* 5.14.7 26 Jun 1999
* 1126, undefined type in function argument. Warning message
* 1127, B b(new A(123,3.14)); bug fix
* 1128, float(x); type conversion operator bug fix
* 1129, cout << x; type conversion operator with operator overloading bug fix
*      Still having problem with t182.cxx with bytecode. Need to fix this.
* 1130, print(float f); print(x); implicit type conv
* -   , floatinc accuracy expression %.17g -> %.17e, integral literal bug fix
* 1131, cout << this << endl; bug fix
*
* 5.14.8 4 Jul 1999
* 1132, cout << c*1./d << endl; bug fix
* PHIL2, inode checking in #pragma defined_in
* 1133, -u [undeffile] improved with #pragma link off
* 1134, int const a; bug fix
* 1135, static var access in include file, static func is still not implemented
* 1136, script compiler shl.c modification 2
* 1137, function parameter match improvement for default constructor
*
* 5.14.9 4 Jul 1999
* -   , G__VARIABLEFPOS, linenum added
* 1138, #pragma link, undefined symbol warning
* -   , disable 1083, class A{const char *str; const int N=5;}; 
* 1139, G__type2string, invalid tagnum protection
* -   , 1137 fixed
* G__PTR2MEMFUNC, t195.cxx, pointer to member function support
* -   , G__reloadfile() improved
* -   , -p option, -I$CINTSYSDIR/stl added
* -   , -p option  'vector' loading bug fix
*
* 5.14.10 4 Jul 1999
* 1140, virtual base class instantiation in ctor, risk1
* 1141, typedef long long int __quad_t; bug fix, risk2
*
* 5.14.11 30 Jul 1999
* 1142, G__optimizemode(), G__getoptimizemode() added, risk0
* 1143, lib/stream 'extern istream cin;' wrong error detection fixed, risk2
* -   , istream::seekg activated for Visual C++, risk1
* 1144, lib/longlong , G__longlong <=> long conversion changed, risk2
* 1145, Warning message for in function typedef, risk0
* 1146, error message improvement, risk0
* 1147, enum {a,b,c}; string x[c]; error bug fix, risk1
* 1148, 1086, G__check_semicolumn_after_classdef() bug fix ')' missing, risk4
* 1149, int npar 10; warning message, risk0
* 1150, cout<<setw(5) name<<endl; warning message, risk0
* 1151, const int N=p->x; eliminate error message, dynconst flag set, risk2
* 1152, class A{ Trk* trk() const; }; bug fix, risk0
* 1153, class A{long long a;}; bug fix, not perfect , risk2
* 1154, new A(v,w,x) error detection for interpreted class, risk2
* 1155, G__asm_loopcompile, G__RECOVER_ASMENV changed, risk3
*-1156, G__init_env() in G__clearfilebusy() didn't solve Ctrl-C problem
* 1157, A* p=new A(px,new int,new B); bug fix in new_operator, risk4
*
* 5.14.12 1 Aug 1999
* 1158, struct without dtor with class object member with dtor, bug fix, risk3
*-1159, template member function call in func.c, overloading problem
* 1160, template member function call in ifunc.c , risk4
* -   , bytecode compiler reset, warning message improved, risk0
* G__TYPEDEFFPOS, filename and linenumber for typedef, risk0
* 1161, class bool { ... }; if(bool) {}  evaluated in G__iosrdstate(), risk2
* -   , 1122 STAR dictionary problem solved, Error -> Warning, risk0
* 1162, error message for dictionary generation problem, risk0
*
* 5.14.13 8 Aug 1999
* 1163, Add local variable dictionary in ERTTI API, risk0
* 1164, Local variable table, bytecode compiler workaround, risk0
*
* 5.14.14 15 Aug 1999
* -   , G__get_security_error(), G__map_cpp_name() exposed for VC++
*
* 5.14.15 18 Aug 1999
*-1165, std conversion + reference type argument bug fix
*       note: This fix is not good. There is a known problem still.
* 1166, B *A::ptr = 0;  bug fix, risk1
*?1167, std conversion + reference type argument bug fix, risk5
*    This fix is not activated by default because it breaks DLL compatibility.
*    Newer Cint can load older DLL. But older Cint can not load newer DLL. 
*    Define -DG__REFCONV in G__ci.h or platform dependency file to activate.
* 1168, nested interpreter call compiles bytecode twice, bug fix, risk1
* 1169, G__DLLREV -> G__CREATEDLLREV=51111, G__ACCEPTDLLREV=51415, risk3
*
* 1170, operator-> overloading, risk1
* -   , 1032 turned off. auto_ptr<T>::auto_ptr<T>(T* x), risk1
* 1171, FILE:/a/b/c/./x.cxx -> ./x.cxx , risk0
* 1172, .x test-1.cxx -> test_1(), risk0
* -   , ios, hex,dec,oct manipulator bug fix in iostream.h, risk0
* 1173, __FILE__,__LINE__ fix,  risk2  (for $hpx)
* 1174, a.b, a.f() error message improvement, risk2 
* 1175, char* a[]; argument for derived class initialization, t230.cxx, risk3
*
* 5.14.16 22 Aug 1999
* 1176, cast error message was too strict. Allow pointer cast, risk1
* 1177, (pary[i])->f(new A); bug fix, risk5
* -   , default editor for .E command , notepad for Windows, risk0
* 1178, n,y,z,< debugger command eliminated from ROOT help, risk0
* 1179, Macro expansion bug at dictionary generation, risk1
* 1180, no default constructor errmsg in bytecode compilation eliminated, risk0
* 1181, G__calc("delete a"); bug fix, risk1
* 1182, class A { A const& operator=(A const& x); }; buf fix, risk1
*
* 5.14.17 17 Sep 1999
* 1183, #pragma define added, lib/prec_stl/memory  PREC_STL_MEMORY, risk1
* -   , G__KCC flag added , risk0
* -   , prec_stl/ headers modified for SGI6 KCC , risk0
* 1184, G__tracemode(int) bug fix, risk0
*
* 5.14.18 3 Oct 1999
* 1185, mem func not found errmsg, signature displayed, risk0
* 1186, p f(1.25) errmsg bug fix, risk1
* 1187, G__check_semicolumn_after_classdef bug fix, risk1
* 1188, operator int16(); typeconv opr with typedef supported, risk1
* 1189, G__MethodInfo::Property() CONSTFUNC flag added, risk0
* 1190, int *a[3][5]; a -> int**  bug fix int***, risk1
* 1191, const info in precompiled dictionary, risk1
* 1192, check scanf parameters are pointers, risk3
*
* 5.14.19 11 Oct 1999
* 1193, extern "C" in G__cpp_XX.h moved, risk1
* 1194, c1=new G__ClassInfo; return value improved, risk2
* 1195, missing semicolumn , reset G__def_tagnum, risk1
* 1196, /a/b/c/./d.cxx handling for .f and .L command, to be improved, risk3
* 1197, remove dictionary file if makecint/rootcint fails, risk4
* 1198, G__calc() error recovery and last error location, risk1
* 1199, #error, DANGEROUS -> RECOVERABLE, risk1
* 1200, #endif// bug fix,still not perfect for C style comment, risk0
* 1201, explicit ignored, risk1
* 1202, template class duplicate def ignored, risk3
* 1203, int ***f(); bug fix, risk2
*-1204, G__loadsystemfile(char* filename) unloadable shared lib support, risk4
*-1205, unloadable shared lib suppport 2, risk4
*
* 5.14.20 20 Oct 1999
* 1206, local class def after global class def, bug fix, risk1
* -   , disable and delete 1204, 1205
* 1207, G__loadsystemfile(char* filename) unloadable DLL, new support, risk4
*
* 5.14.21 22 Oct 1999
* 1208, class A { public: operator const char*(); }; cin>>a; bug fix, risk2
* 1209, class A { public: void f() const; private: void f();}; bug fix, risk4
* 1210, G__ignoreinclude, G__set_ignoreinclude added, risk1
*-1211, opr overloading, search order changed, not std compliant still,
* 1212, vector<A*> v; v[0]->f(); bug fix, risk3
* -   , G__splitfilename((char*)NULL) bug fix, risk0
*-1213, base to derived conversion disabled at initialization, risk4
*       1213 deactivated. This feature is used widely in ROOT application
* 1214, if(1!=libp->paran) ; in dictionary, eliminated, risk1
* 1215, func( f();  error detection, risk4
* 1216, A* volatile a; supported, risk1
* 1217, Unnamed macro error detection for G__loadfile(), risk1
* 1218, Fons's change, risk1
* 1219, func arg conversion from/to p2f disabled, risk3
*
* 5.14.22 31 Oct 1999
* 1218_YET, G__ClassInfo::IsValid() inline -> normal mem func, risk1
* 1220, Ref arg with CallFunc, Philippe Canal fixed this, risk1
* 1221, f(1,); f(,); warning message, risk3
* 1222, unsignd* f(); unsigned& f(); bug fix, risk3
* 1223, A<B,typename C> , bug fix risk3
* 1224, template<> class A<int> { A& f(); };  support, risk2
* 1225, Fix to 1219,
* 1226, Recursive call of G__isprivateconstructorvar/ifunc, bug fix, risk3
* 1227, type.class_property initialization
* G__EXCEPTIONWRAPPER, Exception catching in G__call_cppfunc, risk2
* -   , const added for ANSI/ISO compliant C++ compiler, risk3
* -   , Philippe's script compiler script.C+++() , risk2
* -   , Valery and Fons's request, G__getipathentry added, risk1
*
* 5.14.23 7 Nov 1999
* 1228, dictionary line exceeding 255 chars, fixed, risk1
* -   , support SGI6 KCC iostream in lib/kccstream
* -   , try to support Sun CC5 iostream in lib/snstream
* PHIL6, ifunc.c, copy in previous get the wrong tp2f, risk1
* PHIL7, ignore include fclose, risk1
* -   , config.h HAVE_CONFIG, CINTINCDIR, risk2
* 1229, new/delete in pcode.c fixed, risk4
* 1230, static local var in -c-1 , bug fix, risk1
* -   , kccstrm.cxx and sunstrm.cxx updated, risk1
* -   , libstrm.cxx ((const ios*)) fix for Alpha/cxx, risk2
* -   , lib/ipc and include/sys/ipc.dll supported, risk1
* -   , lib/pthread added, but does not work yet, risk1
* 1231, Sun CC5 extern "C" and C++ function matching problem, risk3
* -   , 1218, "common.h" included in Api.h instead of Class.h, risk1
*
* 5.14.24 21 Nov 1999
* 1232, pure virtual destructor warning, risk1
* 1233, vector<intvector> bug fix, risk2
* 1234, __DATE__, __TIME__ support, risk2 , t284.cxx
*
* 5.14.25 25 Nov 1999
* 1235, C++ pointer to function problem fixed for G__CPPIF_EXTERNC, risk2
* 1236, explicit operator()(int x) call, risk3, t286.cxx
* 1237, printf("%*s",3," "); supported, risk2, t287.cxx
* 1238, Default ctor rejected for interpreted class with ctor, risk2, t292.cxx
* 1239, typeid(obj) abort bytecode, risk1, t294.cxx
*-1240, derived -> base -> userconv function argumet, risk3 , t293.cxx
*   PROBLEM FOUND , t318.h/cxx, baseconv0.c, t321.cxx
* 1241, namespace N { extern int& i; } bug fix, risk2, t296.cxx
*
* 5.14.26 8 Dec 1999
* 1242, #pragma link C++ namespace, risk1, t298.h
*
* 5.14.27 19 Dec 1999
* 1243, #pragma link C++ defined_in tagname; risk1, t299.h
* 1244, default template arg, get typenum at the first instantiation, risk2
* 1245, prompt \ newline escape, risk2, t301.cxx
* 1246, p = new scope::ctor(); bug fix, risk2
* 1247, gROOT->Macro("f.c") in loop, 1168 side effect, risk3
* 1248, fix to 1219, 1225, pointer to function argument, risk2
* 1249, f(void (*p)()=0); bug fix, risk 2, t307.h
* 1250, 'explicit' support, risk4, t308.cxx,
* 1251, compiled default ctor in bytecode loop, bug fix. risk2, t310.h/cxx
* -   , G__NOMATHLIB switch, risk1
* 1252, 1.0 + obj; buf fix, risk1, t309.cxx
* 1253, tempbuf display,
* 1254, A& a=A(x); temp object lifetime bug fix, risk4, t312.cxx
* 1255, UInt_t -1 display bug fix, risk2
*-1256, n=0;for(i=0;i<n;i++); bytecode, risk5, t313.cxx
*   BUG FOUND, intprt_cint infinit loop, CINT simple.cxx
* 1257, pragma link C++ class A*-; supported risk3, t315.h
*
* 5.14.28 5 Jan 2000
*/1258, const and non-const member function override, risk3, t316.h
*/1259, constness flag for G__value
*/1260, func overload matching with object constness
*  Note: constness checking is implemented by 1258-1260. There are several
*       problems and this feature is not activated unless G__CONSTNESSFLAG
*       is explicitly defined in platform/dependency file.
*         - DLL/sharedlib binary incompatibility
*         - STL container's const_iterator begin/end can not be compiled
* 1261, #pragma include_noerr "f1" #on_error "f2"
* 1262, A*** x; bug fix, risk3, t317.h
*
* 5.14.29 17 Jan 2000
*-1263, 1240 fix, implicit conv + derived to base conv, t321.cxx, not done
* 1264, more than 10 class object member , risk2, c:/src/err/MyDlg.cpp
* 1265, operator-> support t323.cxx
* 1266, void (*p2f)(int&); bug fix t326.cxx, t325.cxx
* 1267, G__ClassInfo::New(int n); added, risk2
* 1268, compiled exception catching, t332.h/.cxx, risk4
*
* 5.14.30 30 Jan 2000
* 1269, static member function flag missing, t333.h , risk2
* 1270, exception in bytecode, t332.h/.cxx, risk5
* 1271, auto loading of std header in DLL, t332.h/.cxx, risk4
* 1272, #pragma link postprocess file action; t335.h/.cxx t335post.cxx, risk3
*
* 5.14.31 7 Feb 2000
* 1273, function only macro smart unloading, risk4, t336.cxx
*          G__set_smartload() added
* 1274, A f() { return B(); }, risi3, t338.cxx
* -   , auto_ptr added in stl/_memory, t340.cxx
* 1275, template<class T> class A{template<class Y> A(Y& x){}};, risk2,t340.h
* -   , auto_ptr support, t343.cxx t342.cxx, t345.cxx
*   1240 -> G__WORKAROUND000209_1
*
* 5.14.32 16 Feb 2000
* 1276, assert in bytecode fixed, t347.cxx, risk2
* -   , G__CINTVERSION added in G__ci.h
* 1277, G__free_exceptionbuffer(), freeing precompiled object, t332.cxx, risk2
* 1278, autoloading of std hdr in dll, -Z option switch,
*
* 5.14.33 5 Mar 2000
* 1279, stub class virtual func resolution, t350.h/cxx t350s.h/cxx, risk3
* 1280, use G__expr() for if(expr), t351.cxx, risk4
* -   , 998 error masked for makecint/rootcint, risk1
* 1281, throw int exception , eh.cxx
* 1282, try throw nesting with -O0, eh.cxx
*
* 5.14.34 10 Mar 2000
* -   , ready for std namespace support in standard header files
* 1283, namespace ignored for autoload_stdheader, risk5, t352.h/cxx
* 1284, DLL loaded within namespace, risk5, t352.h/cxx
* 1285, activate namespace std by option, risk3, t353.cxx
* -   , changed STL include file organization to support std namespace,
* 1286, DLL member inc setup in intprtd namespace, risk5, t353.cxx
* 1287, explicit info in DLL and MethodInfo, risk3, t354.cxx/.h
* -   , loadfile error message fixed,
* 1288, truep2f bug with iterator_category fixed, risk4
*%1289, true pointer to member function, risk5
*
* 5.14.35 26 Mar 2000
* -   , DataMbr.h/cxx, contribution from Philippe Canal
* 1290, function overload matching algorithm change, risk5
* 1291, A ***x; x[0]=new X**[n]; x[0];x[0][0] bug fix, risk3, t358.cxx
*-1292, 1289 bug fix for protected/private member,
*
* 5.14.36 9 Apr 2000
* -   , minor fix in VC++ and BC++ setup
* -   , turned on G__CONSTNESSFLAG
* 1293, bug fix to 1290, risk3, t364.cxx
* 1294, SetGlobalcomp() changed by Philippe Canal
* -   , G__STRUCTPVAR -> divided as 1.2 due to size reason
* -   , ifunc.c C++ comment error
* 1295, G__free_friendtag() problem only with rootcint,,
* 1296, static member in nested class, t370.cxx, risk3
* 1297, nested ClassDef,
* 1298, ImplFileLine support
*
* 5.14.37 29 Apr 2000
* 1299, overload matching for pointer to function, t373.cxx
* 1300, Check $LINES, $COLUMNS for G__more_pause(), risk1
* 1301, Bug fix for PHIL0, null fp, t372.h, risk3
* -   , DataMbr.h/cxx, errno -> errnum fix
* 1302, 1290 bug fix, infinit loop, t376.cxx
* 1303, bug fix from Philippe Canal,
* 1304, workaround for Philippe's problem, bad3.cxx, t377.cxx
* 1305, Win32, ifstream::open(), t375.cxx, bug fix
*
* 5.14.38 5 May 2000
*-1306, ctor call for class object as static data member, t377.cxx, t380.cxx
* 1307, global namespace, using directive and function call, t382.h/cxx
* 1308, pointer to reference conversion bug fix, t383.cxx
* 1309, #pragma link C++ function A::B(); t384.h
* 1310, f(int (**)()); t385.h
* 1311, namespace{class{enum{}}} bug fix, t386.h
* 1312, N::A a; N::f(a); f(a); 3.4.2, t387.cxx, review needed
* 1313, #pragma link C++ function A::B(); with function template, t384.h
* 1314, Assume CINTSYSDIR from GetModuleFileName(),Win32
*
* 5.14.39 14 May 2000
* 1315, explicit keyword for distinguishing user def conversion, t391.cxx
* 1316, conversion operator bug fix for new overloading algorithm, t391.cxx
* 1317, const T and T=void* -> T *const, t389.h/cxx, risk4
* 1318, handling of f(const char* x=""); t392.h, risk3
* 1319, 0 taken as pointer, t392.cxx/Cint, t393.cxx/ROOT, risk1
* 1320, class A<void* const&> , fix, risk2
* 1321, operator new(size,void), with 0 pointer, t389.cxx, risk5
* 1322, G__globalvarpointer reset, t389.cxx, risk3
* 1323, static var, file scope checking, t395.i/h/cxx/C, risk3
* -   , license condition, 
*
* 5.14.40 21 May 2000
* -   , bool.h, use #pragma include/define/endif
* -   , stl/_memory, auto_ptr change
* 1324, overriding precompiled func by interpreted func, default para, t397.cxx
* 1325, extern A obj; constructor error fixed, pb1b.h
*
* 5.14.41 31 May 2000
* 1326, NS ::A a; parse.c support,
* 1327, warning for compiled/interpreted inheritance, t400.h/cxx
* 1328, const return value func, newlink.c, t399.h/cxx, risk4
*?1329, typedef char chname[100]; for function argument, t398.cxx, risk5, 
* 1330, namespace x {A operator+(A&);}; bug fix
* 1331, buffer size check enabled, t402.cxx
* -   , G__MAX_SL increased from 50 to 150
* -   , G__ClassInfo::New(void *arena); added
* 1332, bool(a),(bool)a bug fix, t404.h/cxx
* 1333, datambr n, if(n==42) ... bug fix, This was a rather significant bug.
* 1334, protected access dictionary by #pragma link C++ protected, t405.h
* 1335, improved 1334
*-1336, create virtual func stub along with 1334
*
* 5.14.42 20 Jun 2000
* 1337, bug fix, VT_ERROR incorrect referencing in VC98
* -   , lib/posix/winposix.h does not need windows.h anymore
* PHIL8, Philippe Canal's changes
* 1338, if((a).f()) {} bug fix, NEED MORE WORK for &&,|| operator
* 1339, 0==pointer bug fix
* 1340, &&,|| problem fix in G__getexpr, risk5
*
* 5.14.43 5 Jul 2000
* -   , PHIL8 '//' style comment was included , fixed
* -   , val2a.c 'a' isupper() check removed
* -   , some changes in 5.14.42 was remved by accident. Recovered.
* -   , platform/hpux11_acc_so,hpux10_acc_so,solaris5.7_cc5_so added
* -   , setup,Makefile.base modified for HP & Sun so installation
* 1341, bug fix (ff(3)!=num(3)), explicit/implicit conversion, t406.cxx
* 1342, cout<<a++<<endl; bug fix
* 1343, namespace bug fix,
*
* 5.14.44 18 Jul 2000
* 1344, G__isbinaryfile() multi-byte char
* 1345, G__Lock/UnlockCriticalSection() added for G__loadfile/unloadfile,risk5
* 1346, f()[i] warning deleted
* 1347, typedef void FUNCTYPE(int x,double y); ignore
* -   , G__process_cmd() returns error status too
* 1348, G__exec_text() added
* 1349, for(){ for(){ A obj=init; }}, bug fix, t422.cxx, risk5
*
* 5.14.45 28 Jul 2000
* 1350, for(){swithc(){}} compile trial
* 1351, (new A(a,b,c))->f() bug fix, t423.cxx, risk3
* 1352, alarm(0) in G__pause() is masked, risk5, t424.cxx
* 1353, longlong, compile bug by PHIL12 fixed,
* 1354, class A{void f(bool a=bool());}; bug fix,
* 1355, operator bool() supported
* 1356, (not used)
* 1357, temp return value bug fix, cintbug1/main.cxx
* 1358, list<int >* b; parsing bug fix cintbug2/test.h
* 1359, constness match
*
* 5.14.46 1 Aug 2000
*PHILIPPE21: In case of error, G__define_var was not resetting G__prerun
*        correctly.  This is a problem when error are intentionally ignored
*        (by G__const_noerror==1).  Some more error messages are also
*        quieted down. [ However some messages, like in the one removed 
*        in malloc.c might be indicative of a problem ]
*PHILIPPE22: UsedClass* const& operator() was not parsed properly
*PHILIPPE23: Error recovery was not properly done when dealing with template
*        some arguments
*PHILIPPE24: const TempClass<Class>* func() was not properly handled.
*        also const information was not restored properly when instantiating
*        a template
*PHILIPPE25: when using an external preprocessor the real visibility of
*        static variable was still not grabbed correctly (see ON952).
*PHILIPPE26: completely enable ON1125 in newlink.c
*PHILIPPE27: always ignore the register keyword.
*PHILIPPE28: c:\\x\\y\\z fix
* 1360, Dictionary -> ImplFileLink  in ifunc.c
*-1361, sunstrm G__NDxx support, suspended ~/tmp/newlink.c
* 1362, namespace loaded from multiple DLL, ???1125
* -   , strstream.h pragma setstream changed to include iostream
* 1363, user define type conv ambiguity and undesired err msg
* -   , shl.c for Alpha/Linux support
* 1364, precompiled const re-initialization bug fix
* 1365, compiled/interpreted pointer to function err detection
*
* 5.14.47 12 Aug 2000
* 1366, enum scoping for inherited class declaration, t437.cxx
* 1367, explicit type conversion in the same class member function, t439.cxx
* 1368, precompiled/interpreted class inheritance message change
*
* 5.14.48 25 Aug 2000
* 1369, pragma link C++ function x::y::f; warning message bug fix, t441.h
* 1370, typedef.c len check in G__defined_typename
* -   , G__getmakeinfo, line, argbuf size -> G__LONGLINE*2
* 1371, multiple inheritance ambiguity bug fix for newlink.c, t443.h
* 1372, auto object in whole func bytecode, bug fix, t444.cxx, t445.cxx, risk3
* 1373, A x = y+z; copy constructor problem, t440.cxx, risk5
* 1374, reference type template argument, omit &, t442.cxx,t449.cxx, risk3
*
* 5.14.49 27 Aug 2000
* 1375, if(){} // // else {}, 2 comments between if/else, bug fix, t447.cxx
* 1376, G__calc() store_security_error added,
* -   , dllrev modified, risk5
* -   , dllrev check in shl.c && -> || bug fix
*
* 5.14.50 2 Sep 2000
* -   , bug fix in bool.h loading, G__p_ifunc restore, t451.cxx
* 1377, protected dtor, no A[] in dictionary, t452.h
* 1378, bug fix in const bool member
* 1379, bug fix, SpecialObject and const static, t450.cxx
* -   , fix to 1376
* 1380, bug fix reference default parameter with implicit conversion,t453.cxx
* 1381, private static const as template arg, t454.cxx
*
* 5.14.51 10 Sep 2000
* 1382, same enum name in base/derived class, t463.cxx
* -   , template<typename T> allowed
* 1383, p2p passed as arg and referenced by *, t456/t457.cxx, risk5
* 1384, A **ppj;  *(&pj)=0; bug fix, t458.cxx, risk3
*
* 5.14.52 17 Sep 2000
* 1385, permanent link DLL with #pragma permanent_link xxx.dll, pthread.h
* 1386, 1332 fix mybool(), mybool(mfalse) default and copy ctor, t466/t467.cxx
* 1387, asm_wholefunc illegal pointer to class, bug fix, cint space.c gr1000
* 1388, ANSI-C disable nested struct, cint space.c gr1000
*
* 5.14.53 27 Sep 2000
* 1389, 1386 fix, t469.cxx
*
* 5.14.54 14 Oct 2000
* -   , cout << hex << 1234 ; bug fix in _iostream, t470.cxx
* 1390, default parameter and implicit conversion REWINDARG, t471,cxx
* 1391, &&,|| operator overloading bug fix, t472.cxx
*
* 5.14.55 16 Oct 2000
* 1392, src/test/Rt.C bug 
* 1393, (*arr)[5] bug fix, t473.cxx, risk2
* 1394, typedef const int* tdef; constness check missing, t475.cxx, risk2
*       1394 causes dllrev up to 51455 
* 1395, const int* py=&x; (*py)=5; constness check missing, t475.cxx, risk2
* 1396, typedef int *const tdef2; t475.cxx, risk2
* 1397, BaseRef = (Base&)DerivedObj; t476.cxx, risk2
* 1398, for(;;) {string a=x;} for(;;) {string a=y;}, t478.cxx/.h, risk4
* 1399, G__BOOL added, t481.cxx
* 
* 5.14.56 21 Oct 2000
* -   , 1399 improvement
* 1400, bytecode TOPVALUE optimization, t483.cxx
* 1401, bytecode TOVALUE optimization, t483.cxx
* -   , 1391 fixed only debug version, fixed also non debug version, t472.cxx
*
* 5.14.57 22 Oct 2000
* -   , minor fixes in README.txt and FAQ.txt
* 1402, G__exec_bytecode, constant buffer copy scheme memcpy -> for,temp12.c
* 1403, 507 mostly disabled for speed. Debugging feature sacrificed
* 1404, f(vector<int> &x); bug fix, t488.cxx risk5
* 1405, G__LD_pn_xxx ary[i][j][k] optimized, t490.cxx, staticmem1.C, risk4
* 1406, G__ST_pn_xxx ary[i][j][k]=x optimized, t490.cxx, staticmem1.C, risk4
* 1407, unsigned long** bug fix, t491.cxx, risk1
* 1408, cout << (int)x << endl; cast reference bug fix t492.cxx, risk5
* 1409, cout << ppv ; ambiguity bug fix t493.cxx
*
* 5.14.58 24 Oct 2000
* 1410, f(TH2D* tmp[]) in bytecode bug fix, t495.cxx, risk5
* 1411, template class X<T>; bug fix, t496.h
* 1412, #define max(a,b) (a>b?a:b)  in command line, protection added,
* 1413, repetitive macro function use in command line
* 1414, f(register int x); bug fix, t498.cxx
*
* 5.14.59 28 Oct 2000
* 1415, explicit_template_specialization simply calls exec_statement,t499.h/cxx
* 1416, string literal "a" "\n" bug fix, t500
* 1417, A<const B>; t501.cxx
* 1418, string literal freeing, bug fix, t502.h/cxx
* 1419, f(const typename std::vector<typename A::iterator>::iterator x); t503
*       side-effect, name 'typename' causes problem in C script, fixed in
*       5.14.60
*
* 5.14.60 4 Nov 2000
* 1420, side-effect of 1379, error masked after special object search, t504
* 1421, G__security_recover, G__prerun,G__decl are reset also, t505.cxx
* 1422, avoid segv after error recovery, t505.cxx
* 1423, new scheme for operator new, delete, experimental
* 
* 5.14.61 8 Nov 2000
* -   , segv fixed, for illegal source ostream os(x) multiple times, t510.h
* 1424, enum, int overloading resolution, t513.cxx
* 1425, operator A::B() bug fix, t514.cxx
* 1426, operator double(), operator Type(), resolution, t514.cxx, risk3
* 1427, operator overloading member vs global match rating, t512.cxx, risk4
* -   , 1423 experimentally turned on with newlink.c bug
* -   , 1423 deactivated for ROOT
*
* 5.14.62 12 Nov 2000
* 1428, inline keyword after return type specification. t515.cxx
* 1429, skip this number
* 1430, (1291) a[i][j][k]=x with 2 operator[] and pointer [], t516.cxx
* -   , 1423 experimentally turned and previous bug is fixed
* -   , 1423 deactivated for ROOT, activated by G__EXPERIMENTAL1423
* -   , define G__NEWSTDHEADER for g++ 2.97
* 1431, add operator delete(void*,DLLID_tag*) for exception throwing
* 1432, delete if(0!=libp->paran) ; in dictionary, similar to 1424
* 1433, friend function argument can be a local type, t518.cxx
* -   , G__setautoccnames(), fname with '/', bug fixed, t517.c with ROOT
* -   , auto-compile, supported for Borland C++
* 1434, auto-compile, write protect, bug fix, t517.c
*
* 5.14.63 19 Nov 2000
* -   , $(CINTSYSDIR)/cint designated specifically by makecint 
* -   , 1427, G__rate_binary_operator, // style comment exists, fixed
* 1435, f(void*), f(long*) matching, t519.cxx
* 1436, operator new/delete, debugging, t520.h/cxx
* 1437, operator new[] bytecode bug fix, t520.h/cxx 
*     , risk in pcode, G__DELETEFREE instruction, 
* 1438, class/struct forward declaration, t522.cxx
* 1439, class A {~A(){};} bug fix, t524.h
* 1440, Philippe Canal's fix, (sorry, I didn't have time to understand this)
* 1441, 1423 fix, class operator new/delete detection
*       1441 causes dllrev up from 51455 to 51463
* 1442, 1436 + t520.cxx/.h
* 1443, 1436 + t520.cxx/.h
* 1444, 1436 + t520.cxx/.h
* -   , libstrm,vcstrm,bcstrm,cbstrm,sunstrm,stdstrct,Apiif.cxx regenerated
*     , kccstrm,sun5strm,etc.. are still old
* 1445, overload matching, allow duplicated function definition, t525.cxx
*
* 5.14.64 26 Nov 2000
* 1446, file loaded in member function, scope -> global, t529.cxx
* -   , newlink.c , G__DJGPP flag added
* -   , _utility.h , includes _pair.h
* -   , platform macros included in -p option, t531.h
*PHILIPPE29: -p option and STL class instantiation, t532.h
* -   , macro G__EH_DUMMY_DELETE to avoid compiler dependency on opr delete 
*
* 5.14.65 6 Dec 2000
* -   , platform dependent problems in new memory allocation system
*  AIX
*     "cint/src/Apiif.cxx", line 30.6: 1540-080: (S) Wrong number of arguments
*     for "operator delete". 
*  Solaris/CC
*     "cint/src/Apiif.cxx", line 30: Error: Illegal number of arguments for
*     operator delete(void*, G__ApiifdOcxx_tag*).
*  HP-UX/aCC
*     Error (future) 251: "cint/src/libstrm.cxx", line 38 # An object cannot be
*     deleted using a pointer of type 'void *' since the type of the object
*     allocated is unknown. Either delete the object using the allocated
*     type or call operator delete directly.
*     delete[] p;
*              ^
*     Error (future) 251: "cint/src/libstrm.cxx", line 48 # An object cannot be
*     deleted using a pointer of type 'void *' since the type of the object
*     allocated is unknown. Either delete the object using the allocated
*     type or call operator delete directly.
*     delete[] p;
*              ^ 
*     Warning:        2 future errors were detected and ignored. Add a '+p'
*     option to detect and fix them before they become fatal errors in a future
*     release. Behavior of this ill-formed program is not guaranteed to match
*     that of a well-formed program
* -   , pcode.c, warning eliminated
* 1447, Dummy call to G__operator_delete() in dictionary, t535.h
* 1448, Root Segv with pthread_mutex, 1422 side effect, fixed,
*
* 5.14.66 10 Dec 2000
* 1449, (*member)[i] = x; segv bug fix, t538.cxx/.h, t537.cxx/.h
* -   , CallFunc::SetFuncProto() char* -> const char*
* -   , complex<T> precompilation, try 1, t539.h
* PHLIP30, #pragma extra_include
* 1450, bug fix G__identical_function
* -   , dimention -> dimension typo fixed
* 1451, -U [dirname] option for disabling dictionary generation, t544.h
*
* 5.14.67 24 Dec 2000
* -   , 1451 enhanced, t544.h maket544_1, maket544_2, maket544_3
* 1452, makecint.c, add -Y, -Z option 
* -   , demo/Win32App/TestApp added
* 1453, Scott Snyder's change, 
*       G__DataMemberInfo::IsBitfield()
*       TypeInfo::Property(), G__BIT_ISREFERENCE bit added
*       template<int N> class A; template<int M> class A{}; t546.cxx
* 1454, namespace bar{const int foo=5;} const initialization in namespace,t547
* -   , SGI flag added
* -   , G__getexpr stack depth increased from 12 to 100, G__test,  t548.cxx
* 1455, template typedef problem, t549.cxx
* 1456, const at the start of a non-type template formal argument, t550.cxx
* 1457, #if 1 // comment , bug fix, t551.cxx
* 1458, t552.cxx
* 1459, #elif with continuous line, t553.cxx
* 1460, signed keyword in template argument, t554.cxx
* 1461, template operator() function, only for -c-1, t555.cxx
* 1462, typename in template formal argument, t556.cxx
* 1463, typename before a return type, t557.cxx
* 1464, function template with empty argument list, t558.cxx
* 1465, t559.cxx
* 1466, undefined template err msg problem, t560.cxx
* 1467, long double in macro definition, t561.cxx
* 1468, struct initialization with more than 10 members, t562/3.cxx
*
* 5.14.68 6 Jan 2001
* 1469, temp obj for member initialization, bug fix, t565.cxx/h
* 1470, allocvariable, autoobjectflag, bug fix, t445.cxx, t566.cxx
* -   , vcstrmold.cxx, Apiifold.cxx, libcintold.mak added for VC++ 97
* -   , ifdef utility added to the package
*
* 5.14.69 13 Jan 2001
* 1471, va_arg prototype supported, t567.cxx
* 1472, va_arg interpreted func support, t567.cxx
* 1473, va_arg compiled func support, t567.cxx
*       forgot to change dllrev
*
* 5.14.70 13 Jan 2001
* -   , dllrev up from 51463 to 61469, this is caused by 1473
*-G__VAARG_COPYFUNC, va_arg compiled func with copied function in dictionary
*       The code remains, but not completely implemented.
* 1474, '1;' no print, '1' with print, fix
* -   , 1471, 1473 changed , Alpha/cxx/gcc problem fixed
*
* 5.14.71 18 Jan 2001
* 1475, __FILE__, reference init error, fixed, t569.cxx
* 1476, temp obj destruction in command line eval, improved, -
* 1477, 1471, bug fix 'f(int a,...) const;'
*
* 5.14.72 23 Jan 2001
* 1478, ifunc->pentry[ig15] null check in shl.c
* 1479, variable argument, bug fix for constructor and staticness, t567.h/cxx
*       dllrev up from 61469 to 61472
*
* 5.14.73 28 Jan 2001
* 1480, Disable multi-byte char by -m option
* 1481, Protected constructor, risk5, t575.cxx/h, 
* -   , Change for 1481 done without ifdef in G__cppif_genconstructor()
*
* 5.14.74 4 Feb 2001
* 1482, G__class_2nd_decl_i, POPSTROS missing, t577.cxx
* 1483, private constructor, risk5, t576.cxx/.h
* -   , -DCINTSYSDIR=\"/usr/lib/cint\" can be defined in src/Makefile
* 1484, A::B(a,b,C::k), bug fix, t579.cxx
* -   , undef free added in dictionary
*
* 5.14.75 9 Feb 2001
* -   , 1481, G__cppif_geniconstructor buf size, fixed
*
* 5.14.76 10 Feb 2001
*/1485, error message callback, t581.cxx
* -   , changes associated with 1458 fprintf(G__serr, -> G__fprinterr(
* 1486, infinit loop with assertion, bug fix
* -   , VC++, debug compilation warning, fixed
* 1487, C link, nested class name bug fix, t582.h, risk4
* 1488, template<class T> operator A<T>();, bug fix t583.h
*
* 5.14.77 20 Feb 2001
* -   , 1485, err msg callback va_arg syntax error, fixed,
*
* 5.14.78 21 Feb 2001
* 1489, friend const A<T,U> operator+<>(const A<T,U> x);
* -   , Disable 1485 by default. Activate it by G__ERRORCALLBACK
*
* 5.14.79 24 Feb 2001
* 1490, Fons's newlink.c fix,
* 1491, unsigned int operation, bug fix t588.cxx, risk4
* 1492, bytecode compile with f(const int n) { int a[n]; }, t589.cxx/C
* 1493, newlink.c f(const char*& x); fix
*
* 5.14.80 10 Mar 2001
* 1494, unsigned long operation in bytecode, t595.cxx
* 1495, ???
* 1496, union object as return value from compiled function, t596.h
*
* 5.14.81 20 Mar 2001
* 1497, bytecode, static class object as local variable, t601.cxx, risk5
* 1498, bytecode, for(;;){if(i) b["a"]="c";}, operator[] and =, t599.cxx, risk5
* 1499, void f(vector<Int_t> x); bug fix, t602.h
* 1500, func.c POPTEMP -1, cout<<setw(4)<<v[i]<<endl; bug fix, t603.cxx
* 1501, Borland C++ Builder, demo/stl/list1.cxx bug fix,  
* -   , cxx2cpp.c script added
*
* 5.14.82 25 Mar 2001
* 1502, A *a[1]; for(;;) a[0]=NULL;  bug fix, t604.cxx
*
* 5.14.83 5 Apr 2001
* -   , G__parenthesisovld() bug fix, operatr -> operator, t605.cxx with root
*
* 5.14.84 11 Apr 2001
* 1503, vector<int,__malloc_alloc_template<0> > -> vector<int>, t607 deque0
*       side effect fixed, risk5
* 1504, G__asm_clear call G__free_tempobject, t609.cxx, t611.cxx, t612.cxx
*       risk5, NOT FIXED YET
* 1505, ROOT special object in for(;;) if(i) h->Fill();, t613.cxx, risk4
* 1506, void f(double [3][3]); bug fix, t614.h
*
* 5.14.85 22 Apr 2001
* 1507, 1504+ A f(){return A();}, free temp object fixed, t609.cxx, t618.cxx
* 1508, t620.h/cxx, interpret new/delete within dtor,
* 1509, fix to 1506 side effect, t621.h f(double [])
* 1510, typedef const iterator const_iterator, newlink.c bug fix, t622.h
* 1511, int!=unsigned int in optimize3, bug fix, t625.cxx
* 1512, Added message for G__setgvp(G__PVOID) in newlink.c
* 1513, -M0x1? warning message added
*
* ??? 1508, 1512, really fixed the problem?
*
* 5.14.86 30 Apr 2001
* 1514, 'Class' command added
* -   , lib/xlib and demo/xlib added
* -   , lib/gl added
* 1515, f(GetDefaultGC()()); t627.cxx/h, operator()
* -   , activate 1061. Don't know why this was deactivated?, t628.h
*
* 5.14.87 6 May 2001
* -   , demo/gl completed, Thanks to Prasad.
* -   , stdexcept added
* 1516, (0&&f1==3) temp object bug fix, t630.cxx, risk5
*       CAUTION: in expr.c, no ifdef 
*       Side effect  found in demo/graphs/modulation.c, expr.c
* -   , linux_RH7.0*, -DG__P2FCAST removed. Pointer to C++ function problem.
* -   , lib/stream/stdiostr.h,strm.h,__APPLE__ support added by Fons 
* 1517, A &x;for(;;){A &x=f();} fix, t633.cxx
*       t633.cxx test4-6 problem remains, A x;for(;;){A x=f();}
* 1518, A::~A(){C* p=new C;delete p;} bug fix , risk5
* 1519, f(){if(x) return;int i=0;y} G__const_noerror, bug fix, t634.cxx
* -   , _MSC_VAR -> _MSC_VER typo fixed
*
* 5.14.88 13 May 2001
* 1520, operator==(const Complex<int>,const Complex<int>), bug fix
* 1521, operator>>(istream&,Complex<int>&); buf fix, t636.h
* 1522, #pragma link [badkeyword], -> report error
* 1523, #pragma link function A::B(A::C); bug fix, t636.h
*       #pragma link function A::B(C); where C=A::C, bug fix, t637.h
* 1524, 1516 side effect fix, demo/graphs/modulation.c
* -   , #pragma link C/C++ warning message, t638.h/hxx
*
* 5.14.89 20 May 2001
* 1525, Multi-thread libcint DLL, libcint explicitly exports functions 
* 1526, long int& f(); bug fix, t642.h
* 1527, typedef struct { } A; #pragma link C typedef A; bug fix, t643.h
* 1528, G__const_whaterror added in error.c
* -   , include/cfloat #includce <cfloat> fix -> #include <float.h>
* 1529, A(int a) : B( a<0 ? a : b) { } bug fix, t644.h 
*
* 5.14.90 27 May 2001
*(5.15.01 27 May 2001)
* -   , std::FILE fix in cstdio, t645.h
* 1530, G__ONELINE increased and G__param layout changed
* 1531, #pragma link C++ function f(A<int >&); t647.h
* 1532, #pragma link C++ function f(A<B<double> >&,const B<double>&);, t647.h
*         cint complex.h MArray2.hxx MArray2LinkDef.h
* 1533, 'long double' supported in long.dll, t648.cxx, risk5
* 1534, operator<<(ostream&,G__CINT_xx) rejected, t651.h
* 1535, for(;;){int a[2]={1,2};A a;},fix, vtxwrite.cc, ralice.so, Alice/xxx
*
* 5.15.02 2 June 2001
* 1536, #pragma link C++ all class|func|typedef|global; bug fix, t652.h/cxx
* 1537, #pragma link C++ defined_in class A; , t652.h t653.h
* 1538, #pragma link C++ xxx *keyword*; t654.h
*
* 5.15.03 5 June 2001
* -   , makecint.c, $(CINTLIB) added for G__CYGWIN when linking DLL
* 1539, v(const T& x=(const char*)()); bug fix, t659.cxx, t658.cxx/h
* 1540, (double ***p;p=x;p[i]=xx;) p[i][j]=xxx; p[i][j]; bug fix, t657.h/cxx
*       t660.cxx
* 1541, namespace a{class b{class c{friend void f();};};}, fix, t661.h/C
* 1542, for(;;){int **p=x;} REDECL bug fix, t662.cxx,t663.cxx
* 1543, ifunc->funcname[],var->varnamebuf[], variable length
* -   , Buffer size expansion
*       G__preprocessor temp[G__LARGEBUF], 
*       G__DLLID[] G__NEWID[] G__MAXDLLNAMEBUF
*       G__MAXFILENAME 256 -> 1024
* 1544, void f() const throw() { }, demo/exception/ehdemo.cxx
* -   , G__ClassInfo::IsLoad() added
* -   , qqqqq,qqqqqqq command added
* -   , OLDIMPLEMENTINO1250 -> OLDIMPLEMENTATION1250, ifunc.c
* -   , rewinded -> rewound
* 1545, rootflag saved in dictionary
*
* 5.15.04 17 June 2001
* -   , G__closemfp() bug fix
* 1546, G__load_text() added
*       G__set_emergencycallback(), added
* 1547, G__CallFunc::Init() improved
* -   , fix to 1534, 
* 1548, typedef unsigned* x; t677.h
* 1549, t676.cxx static var, verify init value bug fix,
* 
* 5.15.05 23 June 2001
* 1550, G__defined_tagname("ns::A"), error message suppression, t682.cxx
* -   , G__load_text,G__exec_text,G__genericerror,G__init_cint(const char*)
* 1551, 1191 one more fix, t684.h/cxx/dll, f(const char*) matching
*       increment dllrev
* 1552, string a[2]={"a","b"};
* 1553, -I"Program Files\xxx\yyy" supported for external preprecossor
* 1554, Explicit type conv, no ctor err msg, t685.cxx, risk4
* 1555, mask default param eval errmsg at dict generation, t687.h
* 1556, mask abstract class obj errmsg at dict generation, t687.h
* 1557, G__string2type_body(), 'int &' bug fix, t693.cxx
*
* 5.15.06 30 June 2001
* -   , ::new((G__%s_tag*) in dictionary code, '::' added
*-1558, eval default param each time, t694.cxx/.h, risk5 -> note
* 1559, free temp obj in G__scratch_all
*w1560, func<A>(val); explicit template argument duduction, t695.cxx
* 1561, protect funcname==NULL, 
* 1562, close file order in G__loadfile
* 1563, initialize parameter info G__ifunc_table
* 1564, tmpnam() -> G__tmpnam in init.c
*
* 5.15.07 9 July 2001
* 1565, Root dictionary initalization problem, 
* -   , kccstrm.cxx reviced by Philippe Canal
* 1566, Fons' fix on shl.c
*
* 5.15.08 20 July 2001
* 1567, Solaris segv fix, scrupto.c ifunc->pentry[i] test,
* 1568, for(;;) { if(i=0) continue; A a; }, fix t705.cxx, risk5
*
* 5.15.09 6 Aug 2001
* 1569, using std::cout, bug fix, by Philippe Canal
* 1570, f(MIN(x,y)) macro call in bytecode, x,y evaluated twice. t706.cxx/h
* 1571, error message improvement,
* G__NOMAKEINFO, No MAKEINFO access, Christoph Bugel <chris@tti-telecom.com>
*
* 5.15.10 12 Aug 2001
* -   , gcc -fexceptions added to platform/linux*
* 1572, f(A (*)(A&)) -> f(ns::A (*)(ns::A&)), fix, t709.h
*-1573, object instantiation in loop and if, t705.cxx, t707.cxx
*       disabled in var.c
* 
* 5.15.11 1 Sep 2001
* 1574, const T const& obj; in newlink.c , t713.h
* 1575, (1&&(a&&b||c&&d||e&&f)), bytecode bug fix, no ifdef, t714.cxx
* 1576, bool true,false destroying problem, fixed, t714.cxx -<iostream>
*
* 5.15.12 2 Sep 2001
* 1577, map<int,pair<const int,const A* > > x; bug fix, t717/t718.h
* -   , dmystrm.c fix, common.h had to be included at the beginning
* -   , fixed problem in linux_RH6.2*, SYSMACRO <= G__ERRORCALLBACK 
* 1578, don't change tp2f after bytecode compilation, t720.cxx, t721.cxx
* 1579, f(const int a[][3]); newlink.c bug fix, t722.h
* 1580, G__allincludepath initialization problem, 
* 1581, #pragma do_not_include "xxx" added
*
* 5.15.13 18 Sep 2001
* 1582, f(signed char *s); t726.h
* 1583, G__REGEXP, ABC* -> ABC.*, t727.h, risk 5
* 1584, -p -c-1 option with std include files globalcomp flag, t728.h, t729.h
*
* 5.15.14 25 Sep 2001
* 1585, operator const char* conversion for if(obj), t731.cxx,732.cxx
* -   , gcc3strm.cxx added, lib/gcc3strm added
* 1586, gcc3strm, static char buf bug fix, typeinfo.C
* G__NOPOWEROPR, disable '**' power operator,  '@' still remains
* 1587, template specialization, t733.h
* 1588, ifunc->pentry[] and ifunc->friendtag free problem
*
* 5.15.15 30 Sep 2001
* 1589, <algorithm> automatically added in G__cpp_X.h, t734.h
* 1590, divide G__c(pp)_setup_func to avoid compilation problem, vector.dll
* 1591, CallFunc, result.type set,
* -   , G__funclist_add, missing argument fixed, 
*
* 5.15.16 13 Oct 2001
* 1592, #line xx "file" jkj:w
* 1593, object destruction at error, t742.h/cxx
*
* 5.15.17, 25 Oct 2001
* 1594, boolflag initialization problem
* 1595, Loop compile with fscanf, t743.cxx
* 1596, G__free_tempobject, statement -> static
*
* 5.15.18, Nov 3 2001
* 1597, Philppe Canal's fix
*
* 5.15.19, Nov 10 2001
* -   , G__MAXLINE 128->256
* 1598, string binary operator support, 
* 1599, G__init_globals() static flag,
* 1600, G__last_error, G__get_last_error(), G__reset_last_error()
* 1601, tempfilenum,
*
* 5.15.20, Nov 23 2001
* 1602, for(;;){if(i){string x;}}, bug fix, t749.cxx but not complete
*
* 5.15.21, Dec 8 2001
* 1603, A a[]={1,"abc",2,"def"}; struct init with string, t751.cxx
*
* 5.15.22, Dec 9 2001
* 1604, bool valid range = 0-1, t750.cxx, need more fixes in pcode.c
*
* 5.15.23, Dec 15 2001
* 1605, segv problem with undefined member func, t754.cxx
*-1606, constructor with private inheritance , t755.cxx, problem found
*
* 5.15.24, Dec 22 2001
* 1607, char a[][5]={"abc","def"}; t757.cxx, but not good for a[][3][5]={..};
* 1608, include inside class, t758.cxx
* 1609, 011220_4, Philppe Canal's fix
* 1610, 011220_3, vector<pair<Int_t,double> >* Bar() const; 
* -   , philippe canal's process_cmd fix,
* -   , +1604 for f(bool a); G__istypename() , t761.h
* 1611, t.Handle<int>(), t756.cxx/h, 
*       OBJECT TYPE RESOLUTION IS NOT COMPLETE. TO BE COMPLETED.
* -   , lib/prec_stl/map fixed for G__KCC
* 1612, class D:public A{}; A* f(){return new D;}, t759.cxx (typo)
* 1613, p1::p1() : v(prec()) bug fix, t760.cxx, temp obj alloc recursiveness
*
* 5.15.25, Jan 6 2002
* 1614, 1606 fix, constructor with private inheritance, t755
* -   , G__s390 for IBM s390 added in init.c
* 1615, printf("% 15.5e\n",1.23); bug fix, t763.cxx
* 1616, signed char problem for IBM s390
* 1617, f(){static a[]={1,2,3}; a[j];} bug fix, t764.cxx t765.cxx
* 1618, G__bytecodedebugmode(), G__getdbytecodedebugmode() added
*-1619, a[N][M]; *a; t767.cxx , deleted in expr.c, left in var.c
* 1620, power operator '**' disabled, t767.cxx
* -   , platform/freebsd* renamed
* -   , cint mailing list 'cint@root.cern.ch' started
* 1621, char* a[] = {"abc"}; bug fix t768.h, dirty solution
*
* 5.15.26, Jan 7 2002
* 1622, array.c, power operator
* -   , 1612 fixed, small typo
* -   , 1621 fixed 
*
* 5.15.27, Jan 13 2002
* 1623, int &a(b); t771.cxx
* 1624, static struct complex a[3] = {{1,2},{3,4},{5,6}}; t772.cxx
*?1625, do{if(cond)break; a; b;} while(1); t773.C, t773.cxx, t774.cxx
* 1626, temp obj destruction at the end of bytecode function, t775.cxx
* 1627, unsigned arithmetic with bytecode optimization, t776.cxx, G__OP2_xxx
* -   , 1616, signed char problem additional fix
* 1628, f(const A), f(A) overloading
* PHILIPPE31, bug fix for 'const MyClass' 'constMyClass'. t779.cxx
* PHILIPPE32, bug fix for 'const MyClass' 'constMyClass'. t779.cxx
* PHILIPPE33, bug fix for 'const MyClass' 'constMyClass'. t779.cxx
* 
* 5.15.28, Jan 20 2002
* -   , fstreambase::is_open() added in libstrm.cxx, t781.cxx
* 1629, function macro used with insufficient argument, t782.h
* 1630, void virtual f(); supported t783.cxx
* 1631, G__strip_quotation speed up???
* 1632, typedef char A[20]; A a[2]={"abc","def"); t784.cxx
*
* 5.15.29, Jan 27 2002
* -   , fstream::is_open removed again
* -   , vector::clear(), list::clear() added to prec_stl
* -   , 1604, bool changed from int to unsigned char
*
* 5.15.30, Jan 28 2002
* -   , demo/Win32App/graph01 updated
* -   , longlong.h, longdbl.h, std namespace unused for VC++
* 1633, type const f(); t790.cxx
* 1634, char a[]="abcdef"; sizeof(a); 
* 1635, command line redirection '>' 
*       only with libstrm.cxx, others has to be implemented and tested
* 1636, G__strip_quotation speed up, only for ROOT or with C++ compiler
*       G__CPPCONSTSTRING has to be defined to activate this change.
*
* 5.15.31, Feb 3 2002
* 1637, sizeof string literal, t797.cxx
*
* 5.15.32, Feb 10 2002
* -   , 1272, #pragma link postprocess bug fix, t335.h
* -   , 1636, G__strip_quotation minor fixed 
* 1638, T &operator>>() 
* 1639, G__display_func bug fix, 
* 1640, makecint.c MustUseDLLPOST
* -   , SGI/KCC, posix/posix.h, seekdir, setpgrp fixed
* 1641, A a=new A; bug fix, t802.cxx
*
* 5.15.33, Feb 18 2002
* 1642, TMath::Abs(p_eta) bug fix, 
* 1643, #include"file.h" fix, t804.cxx
* 1644, add G__getexitcode() API
* 1645, G__getmakeinfo1() added, take only the 1st argument from MAKEINFO
* 1646, const& in tmplt.c
* 1647, char test[] = " xxx" initialization
* 1648, float **c=new float*;*c=new float;**c=3.0; t806.cxx
*-1649, read source from string
*
* 5.15.34, Mar 5 2002
*
* 5.15.35, Mar 25 2002
* 1650, type checking char a[10],*p; *a=p;
* -   , G__LockCpp() added
* 
* 5.15.36, Apr 23 2002
* 1651, void f(float(*p2f)(float));
* 1652, Default ctor masking 'class F{private F(F&);}; class C{F x;};', t818.h
*
* 5.15.37, Apr 30 2002
* 1653, pointer to member function, t820.h/cxx
* 1654, pointer to static member function, t821.cxx
* 1655, interpreting template member function, t823.h/cxx
*?1656, compile template memfunc in separate dictionary t823a.h
*       This solution has a problem. 
* 1657, gPad->f(a++); fixed, t822.cxx
* 1658, vector<double> *p=new vector<double>(20); fix, t816.cxx, compiled
* 1659, vector<float> *p=new float<float>(20); bug fix t816.cxx, interpreted
*       risk5
* 1660, (*p)[1][2][3] t825.cxx multiple indexing operator with ptr ref
* 
* 5.15.38, May 3 2002
* 1661, for(;;) *last = *next; bug fix for operator*() assignment, t827.cxx
* 1662, *last = *next; *last G__var_type, t827.cxx
* 1663, *--last = *--next; demo/stl/vec4.cxx with gcc3.00
* 1664, 1656 bug fix, 
* 1665, template<class T=int> class A{}; A x; default tmplt arg fix, t830.cxx
* 1666, Bug fix, bool implementation in var.c
* 1667, static member initialization with { }, t814.cxx
* 1668, void f(long double); t833.h 
* G__UNADDRESSABLEBOOL, This macro has to be explicitly defined
*
* 5.15.39, May 11 2002
* -   , -J0 option to disable Note and Warning messages 
* G__UNADDRESSABLEBOOL, bug fix
*
* 5.15.40, May 12 2002
* 1669, double d=1; int i; cout<<(i=x)<<endl; bug fix, t837.cxx, risk5
*       This fix causes inconsistency in assignment operator returning
*       lvalue for fundamental types and rvalue for pointer types. 
* 1670, if(0.1) has to be true, t839.cxx
* 1671, for(i=0;i<3;i++) A x;for(i=0;i<3;i++) A x; compilation bug, t840.cxx/h
*       risk5
*
* 5.15.41, May 19 2002
* -   , dynamic_cast<toBase*>(fromDerived) in loop, fixed, t841.cxx/h
* 1672, break;continue in plain for,while,do,{}
*-1673, free_tempobj in loop, not essential, could be eliminated.
*
* 5.15.42, May 28 2002
* 1674, if( double && int )  bug fix,
* 1675, for(;;) c=a+b; temp obj destruction, bug fix, t840.dll
* 1676, class A{typedef enum X{a=BIT(0),b=BIT(1)}; bug fix, t849.cxx
*
* 5.15.43, June 3 2002
* 1677, -c-1 -V private infomation linking, t847.h
* G__DEFAULTASSIGNOPR activated,
* 1678, private ctor/dtor detection in base cls of data member
*
* 5.15.44, June 10 2002
* 1679, backslash in command line
*
* 5.15.45, June 18 2002
* 1680, default operator= dictionary generation, portability problem, fixed
*
* 5.15.46, June 22 2002
* -   , 1680 fixed for Alpha and other platforms
* -   , gcc3strm.cxx regenerated with bool
*
* 5.15.47, June 25 2002
* 1681, a.f(-0.2).f(0.1) bug fix, t858.cxx, NOTE: need more improvement
* 1682, Reference member avoids default assignment operator t859.h
*
* 5.15.48, June 27 2002
* 1683, (MyClass<int >*)0 t863.cxx
* 1684, default assignment operator, minor fix
*
* 5.15.49, July 2 2002
* -   , -J1
* 1685, typedef void*T;
* -   , prec_stl/vector, iterator for gcc3.00
* 
* 5.15.50, July 7 2002
* -   , using namespace std; added in -Y1 dictionary, t866.h
* -   , valarray.dll generated for gcc3.00
*
* 5.15.51, July 19 2002
* -   , using namespace std; in dictionary, fixed for hpux aCC
* 1686, long long
*
* 5.15.52, Aug 4 2002
* 1687, using scope::classname; t871.h, not complete
* 1688, unsigned long long, t873.h
* 1689, G__initcxx() in Api.cxx
* 1690, newlink.c fix for static member function
* 1691, ClassDef improvement, 
*
* 5.15.53, Aug 15 2002
* -   , include/_stdexcept added
* 1692, avoid std::std duplication
* 1693, :: global scope operator problem, fixed by Philippe Canel
* -   , Borland C++ compiler 5.5 supported in platform/borlanddcc5
* 1694, f(long (*p2f)()); t876.h
*
* 5.15.54, Aug 18 2002
* -   , platform/borlandcc5/makecint.c, makemakecint, README.txt enhanced
* -   , G__main(), G__setothermain(), G__set_p2fsetup() added in doc/ref.txt  
*-1695, for(;;){break;..void compilation..continue;}, t877.cxx
* 1696, vaarg PPC and HPPA added, but not tested, t878.h/cxx
* 1697, ns1::ns2::cls vs ns1::cls resolution
*
* 5.15.55, Aug 28 2002
* -   , Class.h G__ClassInfo dtor -> virtual
*
* 5.15.56, Sep 4 2002
* 1698, P2FCAST, bug fix for long double
* -   , RedHat7.3 support
* -   , #endif // EOF  bug fix, t892.cxx
* -   , gcc3.2 support
* 1699, vector<unsigned> , unsigned() supported
*
* 5.15.57, Sep 9 2002
* 1700, rootcint default behavior for G__globalcomp is changed
* 1701, string a[2]; RESETARYINDEX added , t895.cxx
*w1702, compiled function overriding intepreted function, t900.h, with 1706
*       side effect found in demo/makecint/Stub example
* -   , buf size increased in G__search_tagname 
* 1703, gcc3.1/3.2, avoid __gnu_cxx namespace
*
* 5.15.58, Sep 16 2002
* 1704, string a=string("abc")+b; bug fix
* 1705, vector<vector<float,allocator<float>::iterator > bug fix, t902,903
*-1706, function overriding improved, t904a-d.h/cxx, risk5 deactivated
*       1702 is also deactivated. No urgent request to solve this now.
* 1707, G__CallFunc::SetArgArray() with default argument,
* -   , demo/makecint/UserMain added
* 1708, G__free_p2fsetup() is removed from G__do_p2fsetup()
* -   , compiled/interpreted inheritance, do not display warning
* 1709, static protected member access in dictionary generation, t907.h
* 1710, breakcontinue bug fix, loopcompile2.c
* 1711, obj()() bug fix, t627.cxx
*?1712, class A{class B{};void f(list<B>&);}; t911-913.h/cxx, soope problem
*       deactivated due to side effect(demo/makecint/stl). 
*       Need to solve this. only in tmplt.c
* 1713, 1657 sideeffect(t822.cxx) fixed, operator->(), t914.cxx 
*-1714, demo/makecint/Stub bug fix with 1702, 1706, Stub memfunc dictionary is
*       not generated. Problem still remains in Stub2 example. Maybe different
*       solution is needed. Related to 1706, 1702.
*  
* 5.15.59, Sep 23 2002
*?1715, bug fix 1706, virtual function overriding, 
*	side-effect VPersonTest.cxx, fixed
* -   , 1712 problem with demo/makecint/stl fixed
* 1716, 1706 bug fix, demo/makecint/Array
* -   , 1706 addition,
* 1717, 1695,1710 problem solved, need more verification
* 1718, o<<123<<(char)0; bug fix, t918.cxx
* -   , src/allstrm.cxx is added
* -   , newlink.c link requested for unknown class is an error in ROOT
* 1719, G__isanybase,G__ispublicbase, with static resolving, VPersonTest.cxx
*       side-effect in t705.cxx
* 1720, for(i=0;i<5;i++){if(i==0)continue;A a;} bug fix, t705.cxx
*
* 5.15.60, Sep 29 2002
* 1721, A x(a<b); bug fixed, t921.cxx
* 1722, stdout+stderr redirection with >&
*-1723, redirection, this change is not needed
*
* 5.15.61, Oct 6 2002
* -   , 1700 fixed, init.c 1011, <= -> >=
* ROOT2002, 2002 Oct 14-16
* -   , G__load_text() file removal bug fixed, was a side-eff of using mkstmp()
* 1724, change behavior of missing endcompile, t925.C
* 1725, -H option (-cint -H1 for makecint) added , t926.h
* 1726, G__asm_cast bug fix with reference, t927.cxx/.h
* 1727, #pragma link C++ function A<int>::f<double>;, t928.h
* 1728, f<int>(); call, t928.cxx
*       problem in t938.cxx 1st, tmplt.c
* 1729, x.f<int>(); call, t928.cxx
* 1730, #pragma link C++ all_method ClassName;     t928.cxx/t928.h/t928a.h
*       #pragma link C++ all_datamember ClassName;
*       #pragma link C++ function A::f(); -> sets G__METHODLINK
* -   , G__tmpnam side-effect with mkstmp 
* 1731, G__SetUseCINTSYSDIR() API is added
* 1732, Bug fix, using namespace notexist; t929.cxx
* 1733, class A::B { }; nested class definition, t930.cxx
* 1734, G__loadfile("file.C++g"), "file.C++O"
* 1735, A::Map::iterator it; t931.h
* 1736, ::map<A,B,::less<B> > x; t931.h
* 1737, f(ostream &out=G4out); t932.h
*
* 5.15.62, Oct 21 2002
* -   , 1728 bug fix for ClsTmplt<T>() and Fnc<T>(), t933.cxx
* 1738, template<class A=double> class A{A f();}; A x; link problem, t934.h
* 1739, cast to long long, t935.cxx
*-1740, #pragma link defined_in, change only the public
* 1741, 1728 sideeffect, t938.cxx fix, risk5
*
* 5.15.63, Nov 2 2002
* 1742, vector(T& value=T()); bug fix, 
* 1743, #pragma link default change, bug fix
* 1744, late loading of template member function bug fix, t928
*
* 5.15.64, Nov 6 2002
* 1745, operator delete -> static , t953.h
* 1746, using namespace std; in dictionary with -p option, t945.h
*
* 5.15.65, Nov 11 2002
* 1747, unnamed private union bug fix, t948.h
* 1748, iostream flags, setw0.cxx
*
* 5.15.66, Nov 28 2002
* 1749, Pere Mato & Markus Frank's proposal
* 1750, TH1 *h=f("abc>>def"); -> abc> >def bug fix, t952.cxx
* 1751, merge Philippe Canal's change
* 1752, 1706 side-effect fix,
* 1753, 1745 bug fix,
* 1754, tmplt specialization templte<class T> class ri<T*>, t955.h t956.h risk5
* 1755, reverse_iterator<iterator> -> reverse_iterator<string*> bug fix, t956.h
*       vec.h for Borland CC5.5
*
* 5.15.67, Dec 2 2002
* 1756, ifile with parent namespace. ??? How about unloading ??? t958.cxx
* 1757, 1068 bug fix, t959.cxx
* -   , VC7.0 bug workaround in disp.c and func.c
* -   , testsuite directory is added as $CINTSYSDIR/test, There is a lot to do
*
* 5.15.68, Dec 12 2002
* 1758, f(v<float>* const & val=(v<float>*)()) fix, t961.h
* 1759, G__more % was interpreted, 
*
* 5.15.69, Dec 18 2002
* 1760, forward decl of tmplt class + memfunc, t963.h
* -   , iosenum.cxx added a feature to check compiler version
* 1761, reference type -> const, t967.h, risk5, potential conflict with STL
* 1762, G__defined() is added, but not good enough to be used
* 1763, typedef int (*p2f)(int,int); to be commended, t977.h
* 1764, regexp in #pragma link vector<int*>::iterator, 
* 1765, 1756 unloading file improvement, but still not perfect, t958.cxx
* 1766, compiled class ctor output as temp object in loop compilation t970.cxx
*       side effect in t705.cxx
* 1767, compiled class ctor output as temp object in loop compilation
*       side effect in t599.cxx, t601.cxx is fixed by 1768
* 1768, 1767 side effect fix
* 1769, 1766 side effect fix     
*
* 5.15.70, Jan 4 2003
*-1770, simpler scheme to skip func implementation in G__make_ifunctable
* 1771, avoid proc blocks in G__unexpectedEOF, t974.h
* 1772, 1705 side effect fixed by Fons
* 1773, typeid class name demangling, t977.h/cxx
*-1774, multi-line command line input, disabled 
* 1775, var init bug fix, by Philippe
* 
* 5.15.71, Jan 13 2003
* 1776, var->p initialization, by Philippe and Maarten, 2ways to fix this
* 1777, struct with single member can have arbitrary size, t975.cxx
* -   , don't use mkstemp because of tmpfile is not closed
*M1778, remove tmpfile when crash , Missing
*-1779, f(){string x("abc"); const string a=x;},t986.cxx, 
*-1780, same as above,  STILL PROBLEM
* 1781, G__ForceBytecodecompilation() API added, t985.cxx
* -   , 1760 side effect fixed in tmplt.c
* 1782, prec_stl/memory, __malloc_alloc_template and __default_alloc_template, Missing
* 1783, G__exec_text() comment problem, t990.cxx
* 1784, t991a-c.h class tmplt memfunc ovld,
* 1785, 1779,1780 fix, ignore static for cls/str obj,t986.cxx
* 1786, struct A{union{ }u;}; #pragma link C union A::;
*
* 5.15.72, Jan 19 2003
* 1787, cast.c tagnum referencing error, intprt_cint
* 1788, #pragma link C++ typedef list<x*>::iterator;, t995.h
* 1789, class A{class x;}; class A::x{};, bug fix, t996.h
* 1790, rev_iter<vec<c<float>*,alloc<c<float>*> >::iterator>, t961.cxx
*
* 5.15.73, Jan 28 2003
* 1791, catch(int), t977.cxx
* 1792, template<> class A<int>{A();}; t1002.h
* 1793, +1792, skip unspecialized class template,t1002.h
*
* 5.15.74, Feb 2 2003
* 1794, avoid using tmpnam() for command line 
* -   , activate 1774, multi-line command line input
* 1795, read command line input mode from MAKEINFO. 
*       INPUTMODE = [C++|root|cint]
*       INPUTMODELOCK = [on|off]
* 1796, bool array initialization, t1004.cxx
* 1797, 1753 fix, operator delete[], t1005.cxx
* 1798, function constness and overloading,abstract class judgement, t1007.h
* -   , fstream is added for gcc3strm, t1008.cxx
* -   , map, multimap, Allocator=std::allocator<pair<const Key,T> >,t1006.h 
*
* 5.15.75, Feb 10 2003
* 1799, typedef Unit*const* iterator; t1009.h
* 1800, default tempalte argument scope, t1011.h
* 1801, multi-line input for,while,do,namespace
*
* 5.15.76, Feb 17 2003
* -   , funcname, tested with G__MAXNAME -> G__LONGLINE
* -   , prec_stl/* merged from Philippes change for allocator<pair<>>
* -   , dll_stl/mp.h, multmp.h, link off pair<const string,xxx>::operator= 
*   if you want to return here, use backup/cint5.15.76a.tar.gz
* -   , G__readansiproto, buffer length -> G__LONGLINE
* 1802, variable length buffer 1
* 1803, buffer size protection, related to 1802 
* 1804, struct size = 0 protection, 1777 bug fix, t1013.h
*
* 5.15.77, Feb 24 2003
*-1805, template forward declaration in dictinary, t1010.h, bad, deleted
* 1806, template forward declaration in dictinary, t1010.h, fixed
* 1807, inheritance of size=1 class, t1016.h , t1017.h
* 1808, G__calc("f((const ns::A*)0)"); t1015.cxx, t1014[stub].h.cxx
* 1809, t1014[stub].h protected stub class ctor was missing
* 1810, G__set_stdio() bug fix,
* 1811, case ns::val:  bug fix, t1018.cxx
* 1812, G__set_stdio_handle() bug fix, t1019.cxx
* 1813, private inheritance, t1016.h/.cxx
* 1814, Private/interpreted inheritance warning suppression with -c-1
* -   , lib/dll_stl/vec.h, changed by Philippe Canal
* -   , lib/longlong/longlong.h, longdbl.h, changed by Philippe Canal
* -   , lib/prec_stl/*, changed by Philippe Canal
* 1815, Switch exception handling on/off for precompiled code, 
*
* 5.15.78, Mar 3 2003
*-1816, fgets -> G__fgetline, makes no difference???, t1022.cxx
* 1817, longlong embedded for ROOT,
* 1818, f()[i][j], t1024.cxx
* 1819, typedef float array_t[4]; t1025.h
* 1820, opr-(A,A), opr-(A) overloading problem, t1026.h
* 1821, A{operator int();} a; int x=a;, t1027.h
*
* 5.15.79, Mar 9 2003
* 1822, space after, t1022.cxx, problem in t961,t922,fixed
* 1823, variable length buffer 2, t1030.h, 
*       ifunc.c G__readansiproto() paraname[G__LONGLINE] is next limit
* 1824, variable length buffer 3, G__getfunction, fpara.parameter, t1030.cxx
* 1825, f((classname)234) -> f(_$u00_5_5323535), t1030.cxx
* 1826, buf size increase, t1030.h
* 1827, sizeof(long long)
* 1828, @ in dictionary
* 1829, short dictionary wrapper function name
*-1830, std::vector<A::B> -> typedef vector<A::B>, t1030.h
*       t1011.h side effect has to be solved, turned off in tmplt.c & newlink.c
* 1831, b=4+ ++a; t1032.cxx
* 1832, G__struct.funcs -> signed char
* 1833, long long,long double -> fundamental type, t1034.cxx
* 1834, operator value_type(); bug fix, t1035.h
* 1835, f(bool& x); change by reference, t1036.cxx
* 1836, long long G__TypeInfo::Name, TrueName, t1034.cxx
*
* 5.15.80, Mar 17 2003
* -   , 1836, side effect fixed for t987.h, t1011.cxx
* 1838, sizeof(unsigned long long), t1034.cxx
* 1839, Philippe's fix for forward declaration, t1040.h
* 1840, G__CallFunc with interprted ctor, t1041.cxx
* 1841, void f() const { }, t1041.cxx, G__static_alloc bug fix, risk5
* 1842, CallFunc and bytecode with -O0 option
* 1843, explicit template func instantiation, t1044.cxx, not leagal C++
* 1844, try{ if(x){f();}} catch(exception& x) { }, t1046.cxx, 
* -   , G__ateval() longlong bug fix
* 1845, namespace ns{ string x; }
* 1846, PointerToFunc() fix, t1048.cxx
*
* 5.15.81, Mar 24 2003
* 1847, T* h[1][1]; for(int k=0;k<2;k++) fit(h[0][0],10);, t1049.cxx
* 1848, t1048.cxx -O6 bug fix, restore G__memberfunc_struct_offset
*-1849, G__return stored in G__loadfile(), 
*       Bad idea, G__loadfile is part of G__include_file,
* 1850, typedef long long Long64_t; t1054.cxx
* 1851, f(){const int a=10;const double b=2*a;}, t1055.cxx, risk6
*
* 5.15.82, Mar 31 2003
* 1852, callfunc::SetArgArray
* 1853, template instantiation error during loading DLL, t1061.h
* 1854, error detection tmplt error during loading DLL, t1061.h
* -   , HP-UX long double bug fix
* -   , sizeof(unsigned long long int), sizeof(longlongint), t1034.cxx
* 1855, vector<char const*>; t1062.h
* 1856, vector<char const*>; t1062.h
* 1857, vector<char const*>; t1062.h
*
* 5.15.83, Apr 6 2003
* 1858, Philippe's change
* 1859, vector<char const*>; t1062.h
*
* 5.15.84, Apr 14 2003
* 1860, G__saveconststring() fix for Solaris8 
* 1861, 1394 bug fix & -> |
* -   , prec_stl/vector,iterator fixed for gcc3.0
*
* 5.15.85, Apr 23 2003
* 1862, operator function in namespace, t1068.h
*
* 5.15.86, Apr 29 2003
* 1863, more protection in typedef.c, expr.c
* 1864, void f(vector<const char *>); t1071.cxx, side effect 1855-7 fixed
* 1865, f(long long* x,long long y); with SetArgArray(), t1070.h/.cxx
* 1866, G__var_array::ifunc initialization, fixed, t1072.h
*
* 5.15.87, May 8 2003
* 1867, vector<Float_t> -> vector<float> + vector<float,alloc<float> >,t1074.h
* 1868, typedef char const * const * const_pointer; t1073.cxx
* 1869, void f(char const *x=(char const *)()); t1073.h
*
* 5.15.88, May 12 2003
* 1870, G__baseparam unlimited initializer
* 1871, a(1.2)(3.4); t1076.cxx
* 1872, typedef const char Option_t; void f(Option_t* x); f("a"); t1077.cxx
* 1873, in case MAKEINFO not found, in G__loadfile, dllpost
*
* 5.15.89, May 19 2003
* 1874, 1234LL, 
* -   , printf("%lld",a);
* -   , 1872 side-effect, fixed,
* 1875, 1624, one more change
* 1876, a()(1.2)(3.4)(5.6); t1076.cxx
*
* 5.15.90, May 30 2003
* 1877, while() { switch() {case x: continue;}}, t1086.cxx
*
* 5.15.91, June 5 2003
* 1878, G__strtoll,G__strtoull 
* 1879, BASECONV rewind stack bug fix, t1087.cxx
*
* 5.15.92, June 9 2003
* -   , VC++ 7.1 support, platform/visualCpp6 added
* 1880, A a; double x[i] = a; 
*
* 5.15.93, June 22 2003
* 1881, using namespace test; a1==a2; t1088.cxx
* -   , G__ClassInfo::HasDefaultConstructor() added
* -   , G__set_sym_underscore() bug fix,
* -   , #define G__P2F added
* -   , vc7strm minor fix, not tested yet.
* -   , fproto.h, G__ci.h prototype conflict fixed, 
*
* 5.15.94, June 30 2003
* -   , longif3.cxx added
* 1882, __extension__ ignored
* P34 , typedef long long&x;, but t1093.cxx need more test
* 1883, a(5.1)(3.2) bug fix with ROOT
* P35 , template
*
* 5.15.95, July 13 2003
* -   , sys/cdefs.h, __CINT_INTERNAL_CPP__ added
* P36 , 64bit platform fix in G__getiparseobject
*
* 5.15.96, July 24 2003
* 1884, void f(char const* x); t1098.h
*
* 5.15.97, July 27 2003
* -   , G__DISPROOTSTRICT, -J5 option and 'J 5' command
*-1885, class a{enum b{c,d};}; c,b private, t1100.cxx
*       side-effect building ROOT
*
* 5.15.98, Aug 5 2003
* 1886, f(){char s[99]=a?"b":"c";},t1101.cxx
* 1887, VC++6.0, copy ctor problem,
* 1888, G__BIT_ISDIRECTINHERIT
* 1889, 1885+, a::b::c gets warning with -J5, t1103.cxx
* 1890, typedef int A;class B {class A;}; B::A x; t1104.h
*       test/template3.cxx old style does not work. changed template3.cxx
* 1891, hpx->SetBinContent(1,1,hpx->GetBinContent(1,1)); h1dbg.C
* -   , -1885 caused side-effect
*
* 5.15.99, Aug 10 2003
* 1892, stub generation bug fix, t1108stub.h 
* 1893, newlink.c Philippe's fix, 
*-1894, A<type const,int>, t1111.h,  side effect tempalte0.cxx
* 1895, type_info const,ref t1111.cxx
*
* 5.15.100, Aug 28 2003
* -   , G__ci.h #elsee fixed
* 1896, shl.c strcpy potential bug fix
*
* 5.15.101, Sep 1 2003
* -   , G__CYGWIN_DLL support, cygwin51_gcc3_so
* 1897, pair<const const A,B> x; t1117.h,t1116.h fix
* 1898, break; if(xxx)) , syntax error detection, t1114.cxx
* 1899, G__exec_tempfile_core, free breakpoint memory, t1118.h
* 1900, SGI64 problem fixed
* 1901, allocator<pair<const Key,T> >, Key=const A* -> pair<const A *const,T>
*
* 5.15.102, Sep 6 2003
* -   , posix.dll fixed for Cygwin
* 1902, A::create(1)(2,3); handled in G__parenthesisovld, t1124.cxx
* 1903, A::create(1)[2]; t1124.cxx
* -   , f((BIT*)x) bug fix, t1125.cxx
* -   , gcc3.2 streampos::operator long added, t1126.cxx
* -   , class G__exception:public exception copy constructor bug fix
* -   , Cygwin, va_arg support, t1127.h/cxx
* 1904, a+=b; constness check, t1128.cxx
* 1905, constness bug fix
* 1906, explicit template specialization and scope,t1129.cxx
* 1907, strcat problem fixed,
* 1908, Bare DLL loading of global function, VC++, gcc3.2, BC++(C only)
*       t1130, t1195.
*
* 5.15.103, Sep 16 2003
* 1909, G__CallFunc::fpara initialization
* 1910, G__GET_VAR &a, avoid uninitialized variable access, t1133.cxx, risk5
*o1911, unused parameter, add dummy statement, optional
* 1912, (unsigned long long)1, casting bug fix
* 1913, printf("%LG",(long double)ld); 
* 1914, tmplt.c bug fix,
* 1915, #pragma link C++ function A::f<int>; memory leak, fixed, t928.h
* 1916, enum BIT; BIT *p=new BIT[3]; delete[] a; memory leak fixed, t1125.cxx
*
* 5.15.104, Sep 27 2003
* -   , Borland C++ 5.5 new setup script for Windows2000/XP
* -   , longif3.cxx G__NEWSTDHEADER defined
* 1917, function macro bug fix, t1138.h
*
* 5.15.105, Sep 28 2003
* 1918, G__tmpnam -> tmpfile() 1
* 1919, G__loadfile_tmpfile() & G__tmpam -> tmpfile() 3
* 1920, G__preprocessor(), tmpfile
* 1921, G__TMPFILE in common.h deleted
* -   , testall.cxx -c [cintoption] -m [mkcintoption]
*      Enable either of following 2 for fixing rootcint problem with +P +V
*      Define one of following 2 macro in the beginning of loadfile.c
*a1922, keep tmpfile for -cN +V +P, loadfile.c 1579
*a1923, keep opening all header files for -cN +V +P, loadfile.c 2285
* 1924, void f() { __asm eax, a[0x10] } , t1139.h
* 1925, vector<int> *p=new vector<int>[3]; t1140.cxx fix
* 
* 5.15.106, Oct 4 2003
* 1926, f(int mode=std::ios::in); with -Y1, t1143.h
* 1927, namespace x { static std::string=std::string("abc"); }, t1144.h
*       May need to come back confirming G__tagnum and G__def_tagnum handling.
* 1928, G__Class::GetMethod() overload resolution algorishm change, t1145.cxx
*       Turned off due to ROOT problem, ifunc.c
*       Turned on after 1931
*
* 5.15.107, Oct 10 2003
* 1929, #ifdef __cplusplus extern "C" { #endif
* -   , MAC fix for posix.h and init.c
*
* 5.15.108, Oct 21 2003
* 1930, fix to 1928 
* -   , lib/qt and demo/qt added
*
* 5.15.109, Oct 27 2003
* 1931, 1928 fix
* 1932, G__chdir() added, platform/visualCpp6/setup.bat improvement
* 1933, 1929 fix, #ifdef __cplusplus extern "C" { } #endif, t1148.cxx
*
* 5.15.110, Nov 9 2003
* 1934, 1928 fix, 
* 1935, ptr to memfunc check fixed,
*
* 5.15.111, Nov 14 2003
* 1936, VC7 compiler bug workaround
* -   , /MT(multithread) -> /MD(multithread DLL) for VC++
* -   , G__add_ipath, buffer length short by 1.
*
* 5.15.112, Nov 19 2003
* 1937, command history size mods API
* 1938, scientific(),dec,hex.oct,etc... added in gcc3strm
* 1939, string macro redefinition, bug fix,
*      A question arises whether or not to allow redefinition of macro 
* 1940, int i-1234; taken as bug
*
* 5.15.113, Nov 25 2003
* 1941, G__CallFunc::SetArgs() buffer length problem fixed, 
*-1942, 1910 in expr.c, -> renumbered as 1942 and disabled, it was a wrong fix
* 1943, long string support in quote.c,
* 1944, G__type_info restored in G__TypedefInfo
*
* 5.15.114, Dec 1 2003
* -   , testall.cxx remove .obj for Cygwin
*-1945, G__fsigXXX, signal function, !! did not work ??
* 1946, -E -E, exit without prompting
* 1947, -E -E, exit without prompting for C++ exception
* 1948, sizeof(static array);
* 1949, sizeof(*static array);
*
* 5.15.115, Dec 9 2003
* 1950, sizeof(static array); 2
* -   , -E -E, bug fix in input.c
* 1951, CINT.bat bug fix
*
* 5.15.116, Dec 17 2003
* -   , str.h fix for string.dll compilation for ROOT
* -   , shl.c TYPE_PROCEDURE not defined for !G__SHAREDLIB, fixed
*-1952, integral promotion from long to int when both are 32bit
* 1953, overloading ambiguity, t1160, t525-1445 ?
* 1954, overloading integral conversion, fix???
* 1955, pragma link nestedtypedef for root
* 1956, f(0) -> f(char*) demoted a little
* -   , G__MAXBASE increased to 50
* 1957, f(char (*p)[4][4]); same as f(char p[][4][4]);, t1157.cxx
*
* 5.15.117, Jan 04 2004
* 1958, char a[][5][7]={{"a","b"},{"c","d",}}; t1158.cxx, left over of 1607
* -   , G__MAXBASE decreased back to 30, Dr. Prasad needs this to be 70
*?1959, grading among integral promotions, t1164.cxx
*
* 5.15.118, Jan 07 2004
* 1960, ReadF.h/.cxx delimitor added
* 1961, command name change after 'reset' command, -> fixed
* 1962, x::f(1,2)(3,4)(5,6).xyz, parsing bug fixed, t1167.cxx
* 1963, G__SetCINTSYSDIR() added
* 1964, G__set_eolcallback(void*) added
* 1965, tmp object destruction delayed for .p command
*
* 5.15.119, Jan 15 2004
* -   , gcc3.3 fix in lib/dll_stl and lib/prec_stl
* 1966, VC7 fix in lib/prec_stl/*,
* -   , vector<bool> implemented in prec_stl/vector, dll_stl/vecbool.h
*
* 5.15.120, Jan 19 2004
* 1967, reference of pointer to pointer G__PARAREFERENCE 1 -> 0x40
* 1968, automatic loading of undefined class
* 1969, float i; x[i]; error message
* 1970, G__constvar problem, fixed
* 1971, *.def , -DESCRIPTION,-CODE,-DATA
*-1972, automatic destructor, variale buffer size, problem found
* -   , automatic destructor, buffer size increased
* 1973, pair<const Key,T> Key=char*, bug fix
* -   , cintdll VC++.NET support
*
* 5.15.121, Jan 25 2004
* 1974, pcode.c p2f, type declaration problem for BCC32
* 1975, typedef int* *iterator; f(iterator& x); bug fix, (John)
* 1976, 1973 bug fix, G__PCONSTVAR flag mask, (Philippe)
* 1977, f(A&) vs f(const A&) overloading
* 1978, return(iterator(xxx)); tempobj reftype.reftype initialization fixed
* 1979, p [expr] \v , shows G__value contents for debugging
* 1980, pair<char* const,int> ->pair(const T1&,const T2&); 'const ptr' bug fix
*
* 5.15.122, Feb 1 2004
* 1981, negative pointer value for operator overloading, 
* 1982, cout << true, bool to ostream bug fixed
*-1983, Windows redirection fixed by Valeriy Onuchin, 
* 1984, Root Linux problem, SET/REC MEMFUNCENV
*
* 5.15.123, Feb 9 2004
* 1985, stub class mixed virtual function resolution, t1205.cxx
*-1986, avoid infinite recursion 
* 1987, avoid stub registeration on the dictionary. this also avoid recursion
* 1988, typedef constness t1190.h
* 1989, G__ClassInfo::GetMethod() overload resolution option,t1191.cxx
* 1990, fix 1967 side-effect, t1192.cxx
* 1991, namespace a{class b{}obj;}; ctor call for obj, t1193.cxx
* 1992, namespace a{class b{int x;b(){x;}}obj;} member access problem,t1193.cxx
* -   , 1908, extern "xx.dll"{}, bug fix,
*
* 5.15.124, Feb 17 2004
*?1993, namespace NS { void f(); } -> p2f exposure to dictionary
* -   , 2> fclose(G__sout) bug fix,
* 1994, SETTEMP, FREETEMP workaround
* 1995, stub vfnc call, more fix
* 1996, --'interactive command'   interactive command option
* -   , STL + -p option bug fix, t1200.h
* 1997, vector<double *> -> vector<double*>
* 1998, Double_t **p;p=new Double_t*[3];p[0]=new Double_t[2];p[1][2];t1203.cxx
* 1999, 1985 side effect fix
*
* 5.15.125, Feb 23 2004
* -   , G__ERRORCALLBACK is default
* 2000, G__get_errmsgcallback() 
*-2001, G__ateval() error surpression by setting errmsgcallback
* 2002, add G__mask_error, this is only used for overloading ambiguity now
* 2003, G__ateval() error surpression by setting G__mask_error
* 2004, change interpreted/compiled class inheritance warning to DISPSTRICT
* 2005, eolcallback in G__process_cmd
* 2006, G__autoloading() -> (*G__pautoloading)()
* 2007, G__longdouble(const G__ulonglong&) casting added ??? ask Philippe
* 2008, a- -b, a+ +b, t1213.cxx
* 2009, class A{static const int a[];};const int A::a[]={1,2};t1214.cxx
* 2010, template constructor, t1215.cxx
* 2011, double a[1]; not completely fixed in var.c, marked as 2011 ???, 2025
*
* 5.15.126, Mar 4 2004
* 2012, display DLL name for .class, .func
* 2013, findposition() insure filenum>=0 && linenum>=0 
* 2014, classname autoloading , t1218.cxx
*-2015, classname autoloading 2, t1220.cxx
*
* 5.15.127, Mar 10 2004
* 2016, typedef double* X; f(*(X*)a); casting problem, t1221.cxx
* 2017, (enum xxx)1, ' xxx' => 'xxx', t1222.cxx
* 2018, operator[](char*) t1223.h/cxx
* 2019, G__CallFunc::SetFunc(... MatchMode), (t1228.cxx)
* 2020, G__CallFunc::SetFunc(), reftype handling bug, t1228.cxx 
* -   , stl/pair.dll, lib/dll_stl/pr.h experimental version
*
* 5.15.128, Mar 16 2004
* 2021, G__ANSI defined for gcc3.x, Solaris
* 2022, newlink.c, ptr to static member function, ns::f -> &ns::f 
* 2023, cintdll for Solaris
* 2024, 2014 side-effect found with valgrind, 
* -   , G__MAXBASE -> 50
* 2025, 2011, more to fix, by Philippe Canal
* -   , str.h, operator==, != to char* are added
* 2026, 2014 bug fix,
*
* 5.15.129, Mar 21 2004
*r2027, dtor always registered at the beginning (as part of reeng)
* 2028, 2024, one more fix
* 2029, long arguments in CallFunc
*r2030, G__calldtor() is added in struct.c, not used yet, (as part of reeng)
* 2031, $ command  -> sh -I -c [com]
*r-   , fix to 2030,
*
* 5.15.130, Mar 30 2004
* 2032, lib/prec_stl/memory
* 2033, typedef list<int**> listintxx;, 1967
*
* 5.15.131, Apr 6 2004
* 2034, #define ZEXTERN extern, t1239.cxx
*       CAUTION: This implementation has limitation. Using map, macro table can
*               only be reset in G__scratch_all.
* 2035, 2012 left-over
* 2036, operator=() more check
*r2037, memberfunc initialization in G__define_struct 
*r2038, add G__var_array::enclosing_scope, inner_scope member
*       G__free_bytecode() deletes inner_scope
*       G__searchvariable() searchs enclosing_scope
*r2039, 2027, dtor location left-over
* 2040, dictionary for implicit assignment operator turned on for ROOT
* 2041, G__defined_macro searchs for function macro and symbol macros
*
* 5.15.132, Apr 12 2004
*r2042, ENTERSCOPE, EXITSCOPE instructions, temporary disabled in pcode.c
* 2043, G__ClassInfo::Delete , Destroy added
*
* 5.15.133, Apr 18 2004
*-2044, detecting private ctor/dtor/opr= in precompiled class, t980.cxx problem
* 2045, generate dictionary for private ctor/dtor/opr=
* -   , regeneration of *strm.cxx due to 2045
* 2046, 1993 side-effect, #pragma link MACRO for static member function
* -   , IBM xlc,xLC flags are added
* -   , G__define_var temp1 length of buffer increased
* 2047, G__MBoolref(), t1250.cxx, not completely done yet.
*       Don't know why 2047 was disabled
*
* 5.15.134, Apr 27 2004
* 2048, autoloading patch
* 2049, G__TypeInfo::Init("int**&");  
*
* 5.15.135, May 07 2004
* 2050, G__struct.memfunc->busy[0] initizlization
*
* ---------------------------------------------------------------------
*
* 5.15.136, May 09 2004
* 6.0,0, May 09 2004
*r2051, activate cint dictionary for new bytecode compiler library
* 2052, namespace compiled member deallocation problem, t1258.cxx/.h
* 2053, missing initialization
*
* 5.15.137, May 17 2004
* 6.0,1, May 17 2004
*r2054, CTOR_SETGVP, store_globalvarpointer 
*r-   , 1073 activated
* 2055, ifunc.c compile error fixed by Philippe Canal
*r2056, G__callfunc0(), G__asm_exec restoration
*r2057, G__calldtor(), free memory for interpreted class 
*r2058, G__exec_bytecode(), allocate autoobjectstack for return value
*r2059, G__ClassInfo::GetCtor/Dtor/Assign added
* 2060, G__ST_LVAR optimization
* 2061, addtional fix to template, by Philippe Canal
*
* 5.15.138, May 23 2004
* 6.0,2, May 23 2004
*r2062, CL -> G__autoobjectstack::Autodelete()
*r2063, G__ClassInfo::Init(G__value) isconst,reftype initialization bug fixed
*r2064, # preprocessor command in G__reader::fgettoken
*r2065, # preprocessor command in G__reader::fgetc_gettoken
* -   , string operator+(const string&,char) (char,const string&) added
*
* 5.15.139, June 1 2004
* 6.0,3, June 1 2004
*r2066, LD_IFUNC -> always call new bytecode compiler
*r2067, G__interpret_func -> always call new bytecode compiler
* 2068, uninitialized G__value::isconst
*
* 5.15.140, June 6 2004
* 6.0,4, June 6 2004
* 2069, abs -> labs in G__setiparseobject
*rw2070, operator=, (on going change)
* 2071, TMath::pow wrong call
* 2072, f(arg) {const double x=arg;}
*r2073, G__struct.vtable, G__ifunc_table.vtblindex added
*r2074, virtual function bytecode generation in G__interpret_func()
*
* 5.15.141, June 14 2004
* 6.0,5, June 14 2004
*r2075, vtbl and implicit operator= generation in struct.c
*r2076, G__ClassInfo::AddMethod(name,arg)
*r2077, BASECONV, ref==0?ref=obj.i;
*r2078, PUSHCPY, does not clear ref.
*  One of 2077 or 2078 solves operator=(const A&) problem
*r2079, GetMethod() + withInheritance parameter
*r2080, G__MethodInfo::IsVirtual();
*
* 5.15.142, June 20 2004
* 6.0,6, June 20 2004
*r2081, pBase=pDerived;
* 2082, G__MethodInfo::GetBytecode() always compile bytecode.
* 2083, printf("%2$*1$d", width, num); printf("%*d", width, num);
*r2084, vtbl, add basetagnum for multiple inheritance resolution
* 2085, operator<< bug fix
* 2086, FOO::operator> bug fix
*r2087, new -> new implementation
*
* 5.15.143, July 6 2004
* 6.0,7, July 6 2004
* 2088, G__exec_asm() presult=NULL;
*r2089, G__CAST generation in G__asm_gen_stvar()
* 2090, Philippe's operator>> fix in func.c and ifunc.c cint_35.diffs
* 2091, tmplt.c fix by Philippe
* 2092, tmpfile()==NULL -> G__tmpnam()
*
* 5.15.144, July 12 2004
* 6.0,8, July 12 2004
* 2093, array dimention error detection
* 2094, fix to 'typedef void ** const * const_iterator;' by Philippe, (919)
* 2095, MacOS X problem with GNUC macros, by Fons
* 2096, G__calc("TPara<long long>::f()"), by Philippe
* 2097, autoloading patch, by Philippe
* 2098, static private array initialization
*
* 5.15.145, July 19 2004
* 6.0,9, July 19 2004
*r2099, G__SETGVP <- G__store_struct_offset
* 2100, typedef.c, patch by Philippe,
*r2101, new x[n],
*
* 5.15.146, July 25 2004
* 6.0,10, July 25 2004
*r2102, delete -> new implementation
* 2103, map forward declaration, by Philippe
* 2104, namespace fix, by Philippe
*r2105, G__genericerror() display message if cintv6
*
* 5.15.147, Aug 3 2004
* 6.0,11, Aug 3 2004
* 2106, friend template, by Philippe
* 2107, ICC v8.1 fix, by Fons
* -   , Type.cxx valgrind error fix, by Philippe, 2105 -> 2106
* 2108, missin protection in G__what_type, by Philippe
*
* 5.15.148, Aug 17 2004
* 6.0,12, Aug 17 2004
*r2109, exception handling, G__THROW instruction
*r2110, RTN_FUNC 2, G__exec_asm returns from try { }
*r2111, explicit conversion for exception, don't put into legacy tempobj buf
*
* 5.15.149, Aug 23 2004
* 6.0,13, Aug 23 2004
*r2112, G__exec_bytecode -> C++
* 2113, G__asm_optimize, i<5 optimization potential bug fix
*
*-2114, G__asm_optimize3() returns max stack usage
*-2115, re-sizable stack buffer
*   2114 and 2115 failed. Those changes are deleted. That state is archived
*   as backup/cint6.0.13C.tar.gz. 
*
*r2116, resizable G__asm_inst buffer
*r2117, throw G__bc_compile_error + error handling
* 2118, G__ClassInfo::Funcflag() returns G__struct.funs[]
* -   , Error handling
*
* 5.15.150, Aug 30 2004
* 6.0,14, Aug 30 2004
* 2119, G__delete_ipath(char* path);
* 2120, class A { operator()(int i);} a; a(i)(i) bug fix
* TODO, class A { operator[](int i);} a; a[i](i) reserved 2121
*r2122, assignment error check
*r2123, A<A<int> > x; avoid recursive G__bc_struct call
*r2124, G__asm_noverflow reset after template instantiation,
*
* 5.15.151, Sep 5 2004
* 6.0,15, Sep 5 2004
* 2125, initary[]={f(),g()};
* 2126, intassignbyref, if(!ref) 
*r2127, local stitic/const handling
*r2128, G__letvalue, 'c' memcpy
*r2129, G__OP2 '#', add arbitrary value to pointer
* 2130, implicit ctor -> allow array initiazliation
*r2131, incsetup_memvar in G__initmemvar()
*r2132, G__CL line+filenum
*
* 5.15.152, Sep 12 2004
* 6.0,16, Sep 12 2004
*r2133, G__CL, 's','S','c', + 2 lines G__pr() call 
*r2134, G__CL position, end of statement -> beginning of statement
*r2135, turn off source code trace in step mode
*r2136, implement new stack trace mechanism 
*r2137, use new stack trace mechanism for V command
*r2138, break/continue 
* 2139, eof check in G__input
*
* 5.15.153, Sep 20 2004
* 6.0,17, Sep 20 2004
*r2140, MEMCPY instruction 
*r2141, copy ctor dictionary -> array copying
*r2142, G__PAUSE() instruction
*r2143, argument name difference in header and definition,
* 2144, argument difference in reference,  header vs definition
* -   , int *a, b , &c=b; bug fix
* 2145, class A *p=new A[5]; p[i].disp();
*r2146, virtual base class G__abortbytecode()
* 2146, array of pointer to function
*
* 5.15.154, Sep 29 2004
* 6.0,18, Sep 29 2004
*r2147, MEMSETINT instruction
*r2148, G__BaseClassInfo::Property() G__BIT_ISVIRTUAL -> G__BIT_ISVIRTUALBASE
* 2149, template specialization bug fix by Philippe Canal
*r2150, virtual base offset initialization in bc_*
*
* 5.15.155, Oct 11 2004
* 6.0,19, Oct 11 2004
*r2151, virtual base class, G__ISINDIRECTVIRTUALBASE flag, may be unnecessary
*r2152, virtual base function resolution VIRTUALADDSTROS
*r2153, virtual base function resolution in bytecode, bc_exec_virtualbase_
*r2154, base class cast to array element, rewind stack before cast
*r2155, SETMEMFUNCENV, RECMEMFUNCENV for x.y when G__cintv6
*
* 5.15.156, Oct 20 2004
* 6.0,20, Oct 20 2004
*r2156, G__STATICCONST flag is set for constant literals
* 2157, bug fix A<T> A<T>::x=0;
* 2158, timeout at main()
*
* 5.15.157, Oct 24 2004
* 6.0,21, Oct 24 2004
*-    , r2156 fixed
*r2159, local variable monitor
*r2160, G__CAST instruction added
*r2161, B<int,5*2> bug fix for v6
*r2162, virtual table debugging, disp()
*r2163, G__exec_asm moved in bc_exec.cxx
* 2164, bug fix -> reserved dtor does not trigger template instantiation
*-    , bit field assignment in bytecode, bug fix
* 2165, vector::iterator::operator= added for gcc3.x
* 2166, (*vecvec[0])[0] bug fix
* 2167, multiple occurannce of using namespace, by Philippe
* 2168, HP aCC fix by Fons
*r2169, new int*; bug fix in SET_NEWALLOC

* 5.15.158, Nov 2 2004
* 6.0,22, Nov 2 2004
*r2170, A** p=new A*[3]; p[0]=new A[2]; p[0][0];
*r2171, G__ExceptionWrapper() returns value from running funciton
*r2172, virtual dtor free operation offset calculation in G__exec_asm
* 2173, template function and member name conflict
* 2174, loadfile.c fix by Philippe
* 2175, printf fix by Philippe
* -r2176, improvement on type conversion at assignment
*r2177, GetMethod() add doconvert flag
* 2178, Philippe's fix on tmplt.c
* 2179, Philippe's fix on scope operator '::' at the beginning
*-2180, Philippe's fix on template bool
* 2181, Addition to Philippe's fix. No error for G__fgetname_template()
* -   , std::string getline added
*
* 5.15.159, Nov 14 2004
* 6.0,23, Nov 14 2004
*r2182, improvement on type conversion at assignment
* 2183, return (*this)[1]; bug fix
*r2184, *expr1=expr2; bug fix
* 2185, this erase isconst flag
* 2186, Fons' fix on MacOS X bool
*r2187, delete 0; skip dtor call and deletefree
* 2188, bool fix,
*
* 5.15.160, Nov 24 2004
* 6.0,24, Nov 24 2004
* 2189, native long long support with G__NATIVELONGLONG
*      n, m, q     M:macro, Q:p2f
* 2190, delete all dictpos->ptype
* 2191, 'm' macro -> 'j'
*
* 5.15.161, Dec 12 2004
* 6.0,25, Dec 12 2004
* 2189, + long long(x) and unsigned long long(y) fixed
* 2192, long long bug fix by Philippe,
* 2193, 1<<31, bug fix
*-2194, Philippe's namespace <tab> fix
*
* 5.15.162, Jan 4 2005
* 6.0,26, Jan 4 2005
* 2195, bug fix, G__convert_param G__BASECONV
* 2196, bug fix, namespace variable array initialization
*
* 5.15.163, Jan 10 2005
* 6.0,27, Jan 10 2005
* 2197, newlink.c fix by Philippe
* 2198, tmplt.c fix by Philippe
* 2199, VC7 optimizer bug workaround by Philippe,
* 2200, Philippe's valgrind fix
*
* 5.15.164, Jan 23 2005
* 6.0,28, Jan 23 2005
* 2201, 0x0E + 12  bug fix
* 2202, warning for 64bit to 32bit integer conversion in G__int, G__uint
* 2203, G__DLL_direct_globalfunc supported for bytecode
* 2204, G__DLL_direct_globalfunc with argument type conversion
* 2205, G__DLL_direct_globalfunc for G__CallFunc, test2/t1353.cxx/h
* 2206, unexpectedEOF improvement for error reporting,
*
* 5.15.165, Feb 18 2005
* 6.0,29, Feb 18 2005
* 2207, bool(0.1) -> 1
* 2208, assert test G__int() -> G__bool()
* 2209, template vec2<long double> f(); bug fix
* 2210, G__fgetname_template, bug fix
* 2211, template ostream& operator<<(); bug fix in G__keyword_anytime_8
* 2212, cint_10 Philippe's change on template member
* 2213, cint_13 Constructor execution bug fix, by Philippe
* 2214, cint_15 template member function fix by Philippe
*
* 5.15.166, Feb 22 2005
* 6.0,30, Feb 22 2005
* 2215, long long casting in dictionary
* 2216, G__fdumpstream(), '<' + G__defined_templateclass() '>' 
* 2217, char (*fName)[5];
* 2218, Philippe's fix in vector DLL
* 2219, abstract class instantiation error for new
* 2220, stub function flag setting bug fix,
*
* 5.15.167, Mar 2 2005
* 6.0,31, Mar 2 2005
* 2221, display pure virtual function 
* 2222, buffer overrun bug fix by Philippe,
* 2223, avoid segv from typo, TMath::Max)TMath::MaxElement(n,
* 2224, #pragma link C++ macro fix? by Philippe
*
* 5.15.168, Mar 10 2005
* 6.0,32, Mar 10 2005
* 2225, template<class T> void f(const T& x);  T=char* fix
* 2226, G__setmemtestbreak(n,m);
* 2227, errordictpos memory leak 
* 2228, VPersonTest.cxx bug fix for VObject** p=a;
*
* 5.15.169, Mar 14 2005
* 6.0,33, Mar 14 2005
* 2229, comment out 64bit->32bit conversion
* 2230, operator with invalid argument, Philippe
* 2231, Philippe's patch
* 2232, Fons's patch
*
* 5.15.170, Mar 23 2005
* 6.0,34, Mar 23 2005
* 2233, Axel's patch for windows fclose
*
* 5.15.171, Apr 12 2005
* 6.0,35, Apr 12 2005
* 2234, return"";
* 2235, va_arg, float -> passing as double for gcc
* 2236, var.c G__var_type store/restore, by Philippe,
* 2237, template<classA,B> MyTmplt<A,B<A> > operator*(..) fix by Philippe
* 2238, Windows patch by Philippe,
* 2239, G__SourceFileInfo::Next() fix
* 2240, G__srcreader<T>::fgetstream_core() bug fix
*
* 5.15.172, May 3 2005
* 6.0,36, May 3 2005
* -   , Philippe's change on G__ci.h
*
* 5.15.173, May 4 2005
* 6.0,37, May 4 2005
*
* 5.15.174, May 5 2005
* 6.0,38, May 5 2005
* -   , removed 90% of G__OLDIMPLEMENTATION* from source
*
* 5.15.178, Jan 8 2016
* 4001, Add SETGVP() for compiled class as member or base class
*
* ---------------------------------------------------------------------
*     , A::operator float() conversion with standard conversion
*
* ---------------------------------------------------------------------
* flags:
*      -     : modified without #ifndef
*     -[num] : disabled due to side effect
*     o[num] : activated by optional define macro, see platform/README.txt
*     a[num] : alternate option by defining one of those macros
*     ?[num] : questionable or experimental
*     X[num] : ?
*     w[num] : Still working. Work to be done
*     r[num] : for reengineering
*
* ---------------------------------------------------------------------
*
*************************************************************************
* note
* Default parameter:
*  In ANSI/ISO resolutions Feb 1995 r.8.2.6. Default argument expression
* must be checked at declaration and evaluated at each point of call.
* Cint evaluates default argument expression at declaration. This part
* itself is not difficult to changed to ANSI/ISO compliant implementation,
* however, in loop compilation if implicit conversion is used and if the
* conversion constructor has default argument, evaluating default argument
* will destroy data stack. (One solution to this is to invalidate loop
* compilation if implicit conversion constructor has default argument.
* but this is difficult.)  para_default, G__default_parameter
*
*  1558 tries to fix this problem, but didn't make it. t694.cxx/.h causes
* segv. 
*
***********************************************************************/

/*
 * Local Variables:
 * c-tab-always-indent:nil
 * c-indent-level:2
 * c-continued-statement-offset:2
 * c-brace-offset:-2
 * c-brace-imaginary-offset:0
 * c-argdecl-indent:0
 * c-label-offset:-2
 * compile-command:"make -k"
 * End:
	 */
