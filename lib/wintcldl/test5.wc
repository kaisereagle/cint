/**********************************************************************
* The WILD++ technology demonstration
*  Experimental program
*
*  wildc test5.c
*
**********************************************************************/

// File menu callback
void OpenFile() {printf("\nOpenFile\n");}
void Print() {printf("\nPrint\n");}
void Quit_Proc() {printf("\nexit\n");WildCard_Exit();}

char *base;
char gbase[50] = "strange";

// Edit menu callback
void Undo() {printf("\nUndo\n");}
void Cut() {printf("\nCut\n");}
void Copy() {printf("\nCopy\n");}
void Paste() {printf("\nPaste\n");}
void Delete() {printf("\nDelete\n"); WildCard_FreeConsole();}

// Disp menu callback
void Disp(const char* basein,int lnum,int hlit) {
  printf("\nBase=%s  LineNumber=%d HighLight=%d\n",basein,lnum,hlit);
  strcpy(gbase,basein);
}

// Help menu callback
void Help() {printf("\nHelp\n");}

// Canvas callback
void Cursor(int x,int y) {
  //fprintf(stderr,"\b\b\b\b\b\b\b\b\b\b\b\b\b%3d %3d",x,y);
}
void Click(int x,int y) {
  mkNode(x,y);
}
void mkNode(int x,int y) {
  static char *tcolor[]={"green","pink","cyan","blue","yellow","white",NULL};
  static int i=0;
  int xl=x-10,xh=x+10,yl=y-10,yh=y+10;
  char *color;
  if(NULL==tcolor[++i]) i=0;
  color = tcolor[i];
  if(strcmp(gbase,"circle")==0) {
  }
  else if(strcmp(gbase,"oval")==0) {
     xl -= 10;
     xh += 10;
  }
  else if(strcmp(gbase,"strange")==0) {
    xl = x-x/5;
    xh = x+x/3;
  }
#pragma tcl interp xl xh yl yh color
  .dummy.c create oval $xl $yl $xh $yh -fill $color -tags node
#pragma endtcl
}

main() {
//######################################################################
//# Tcl/Tk script
//######################################################################
//      keyword  p2interp  linkvars
#pragma   tcl     interp  base

frame .mbar -relief raised -bd 2 -bg gray
frame .dummy -width 10c -height 5c -bg gray
pack .mbar .dummy -side top -fill x

# Pulldown menu layout
menubutton .mbar.file -text File -underline 0 -menu .mbar.file.menu -bg gray
menubutton .mbar.edit -text Edit -underline 0 -menu .mbar.edit.menu -bg gray
menubutton .mbar.disp -text Disp -underline 0 -menu .mbar.disp.menu -bg gray
menubutton .mbar.help -text Help -underline 0 -menu .mbar.help.menu -bg gray
pack .mbar.file .mbar.edit .mbar.disp -side left
pack .mbar.help -side right

# File menu
menu .mbar.file.menu -bg gray -borderwidth 1m
.mbar.file.menu add command -label "Open"  -command "ceval OpenFile()"
.mbar.file.menu add command -label "Print" -command "ceval Print()"
.mbar.file.menu add command -label "Quit"  -command "ceval Quit_Proc()"

# Edit menu
menu .mbar.edit.menu -bg gray -borderwidth 1m
.mbar.edit.menu add command -label "Undo" -command "ceval Undo()"
.mbar.edit.menu add separator
.mbar.edit.menu add command -label "Cut"    -command "ceval Cut()"
.mbar.edit.menu add command -label "Copy"   -command "ceval Copy()"
.mbar.edit.menu add command -label "Paste"  -command "ceval Paste()"
.mbar.edit.menu add command -label "Delete" -command "ceval Delete()"

# Disp menu
set base strange
menu .mbar.disp.menu -bg gray -borderwidth 1m
.mbar.disp.menu add radiobutton -label "circle"  -variable base -value circle
.mbar.disp.menu add radiobutton -label "oval"    -variable base -value oval
.mbar.disp.menu add radiobutton -label "strange" -variable base -value strange
.mbar.disp.menu add separator
.mbar.disp.menu add checkbutton -label "LineNumber" -variable lnum
.mbar.disp.menu add checkbutton -label "Highlight"  -variable hlit
bind .mbar.disp.menu <Leave> {ceval Disp(\"$base\",$lnum,$hlit)}

# Help menu
menu .mbar.help.menu -bg gray -borderwidth 1m
.mbar.help.menu add command -label "Help"   -command "ceval Help()"

# Canvas
canvas .dummy.c -bg gray
pack .dummy.c

# dummy canvas
bind .dummy.c <Motion>   {ceval Cursor(%x,%y)}
bind .dummy.c <Button-1> {ceval Click(%x,%y)}

#pragma endtcl
WildCard_MainLoop();
}
