/***************************************************************
* grcalc.wc
*  WILDC++ complex array graphics calculator
*   Copyright (c) 1996-1997  Masaharu Goto (MXJ02154@niftyserve.or.jp)
***************************************************************/

// include array , carray , complex class header and source files
#include <darray.h>
#include <array.c>
#include <complex.h>
#include <carray.h>
#include <carray.c>
#ifdef FFT
#include <graphbuf.h>
#include <fft.c>
#include <fft.h>
#endif

// numerical constant
const double PI=3.141592;
const complex j(0.0,1.0);

// size of graphics canvas 
int xxmin=10,xxmax=500,yymin=10,yymax=300;

// get min,max of y axis and check imag data of carray
// returns 0 if all of imag data is 0, else returns 1
int IsComplex(carray& x,double *min,double *max) {
  *min=1e99;
  *max=-1e99;
  double *px=x.re;
  double *pim=x.im;
  double immin=1e99;
  double immax=-1e99;
  // scan min,max value
  for(int i=0;i<x.n;i++) {
    if(*min>px[i]) *min=px[i];
    if(*max<px[i]) *max=px[i];
    if(immin>pim[i]) immin=pim[i];
    if(immax<pim[i]) immax=pim[i];
  }
  // check if imag part has non zero value
  if(immin!=0 || immax!=0) {
    if(*min>immin) *min=immin;
    if(*max<immax) *max=immax;
    return(1);
  }
  else {
    return(0);
  }
}

// destroy old canvas and create new one
void RefreshCanvas() {
  #pragma tcl interp xxmin xxmax yymin yymax
    destroy .gr.c
    canvas .gr.c -height $yymax -width $xxmax -bg gray
    pack .gr.c -fill x
  #pragma endtcl
}

// draw data on the canvas
void DrawData(double *px,double *py,int datan
              ,double xmin,double xmax,double ymin,double ymax) {
  int x1,x2,y1,y2;
  double yratio=(yymax-yymin)/(ymax-ymin);
  double xratio=(xxmax-xxmin)/(xmax-xmin);

  // calculate canvas data points in integer
  int *xx = new int[datan];
  int *yy = new int[datan];
  //int xx[datan],yy[datan];
  for(int i=0;i<datan;i++) {
    xx[i]=(px[i]-xmin)*xratio+xxmin;
    yy[i]=(ymax-py[i])*yratio+yymin;
  }

  // draw data
  char comm[200];
  x2=xx[0];
  y2=yy[0];
  for(int i=1;i<datan;i++) {
    x1=x2;
    x2=xx[i];
    y1=y2;
    y2=yy[i];
    // following Tcl_Eval() has same effect as 
    //   #pragma tcl interp x1 y1 x2 y2
    //     .gr.c create line $x1 $y1 $x2 $y2
    //   #pragma endtcl
    // but a little faster in loops
    sprintf(comm,".gr.c create line %d %d %d %d",x1,y1,x2,y2);
    Tcl_Eval(interp,comm); // This part is a speed bottleneck
  }
  delete[] xx;
  delete[] yy;
}

// draw axis and set ymin ymax back to Tcl/Tk
void DrawAxis(double xmin,double xmax,double ymin,double ymax) {
  int x1,y1;
  double yratio=(yymax-yymin)/(ymax-ymin);
  double xratio=(xxmax-xxmin)/(xmax-xmin);
  x1= -xmin*xratio+xxmin;
  y1= ymax*yratio+yymin;
  #pragma tcl interp x1 y1 xxmin xxmax yymin yymax ymin ymax
    .gr.c create line $x1 $yymin $x1 $yymax
    .gr.c create line $xxmin $y1 $xxmax $y1
    set ymin $ymin
    set ymax $ymax
  #pragma endtcl
}

// DrawGraph callback function 
void DrawGraph(char *formula,char *cxmin,char *cxmax,char *cymin,char *cymax
               ,char* dn,int autoscale) {

  // calculate formula by array and carray class
  double xmin=G__calc(cxmin);
  double xmax=G__calc(cxmax);
  int datan=G__calc(dn);
  array x(xmin,xmax,datan);
  carray y;
  y=G__calc(formula);
#ifdef FFT
  array freq;
  carray spect;
  fft << x << y >> freq >> spect >> '\n';
  x=freq;
  y=spect;
#endif

  // calculate scale factor and check imag part
  int iscomplex;
  double ymin,ymax;
  iscomplex=IsComplex(y,&ymin,&ymax);
  if(!autoscale) {
    ymin=G__calc(cymin);
    ymax=G__calc(cymax);
  }
  if(ymin==ymax) {
    ymin-=1;
    ymax+=1;
  }

  // draw data and axis
  RefreshCanvas();
  DrawData(x.dat,y.re,datan,xmin,xmax,ymin,ymax);
  if(iscomplex) DrawData(x.dat,y.im,datan,xmin,xmax,ymin,ymax);
  DrawAxis(xmin,xmax,ymin,ymax);
}

// set example formulas
void Examples() {
  static char *examples[]={   "sin(x)/x"
                             ,"exp(x*(-0.1+j))" 
                             ,"cos(x)" 
                             ,"carray(sinh(x/5),cosh(-x/5))" 
                             ,"x*x" };
  const int all=5;
  static int n=0;
  char *formula;
  ++n;
  if(n>=all) n=0;
  formula=examples[n];
  #pragma tcl interp formula
    set f $formula
  #pragma endtcl
}

// set debug mode
void SetDebug() {
  printf("Debug commands\n");
  printf("  S : step over\n");
  printf("  s : step into\n");
  printf("  c : continue\n");
  printf("  T : toggle trace mode\n");
  printf("  t : show stack\n");
  printf("  v : show source\n");
  printf("  V[n] : show source in stack\n");
  printf("  h : show help information\n");
  printf("\n Click DRAW button to debug\n");
  G__stepmode(1);
}

// create graphics frame
void CreateFrame() {
#pragma tcl interp xxmin xxmax yymin yymax
  # set initial value
  set xmin "-PI*6"
  set xmax "PI*6"
  set datan 100
  set f "sin(x)/x"
  set ymin 0
  set ymax 0
  set autoscale 1

  # title string
  frame .title -bg gray -borderwidth 1
  label .title.title -text "  Complex Array Graphic Calculator" -bg gray
  # button .title.debug -text "debug" -bg gray -borderwidth 2
  # bind .title.debug <Button> {ceval SetDebug()}
  # button .title.fc -text "free console" -bg gray -borderwidth 2
  # bind .title.fc <Button> {ceval WildCard_FreeConsole()}
  button .title.quit -text "quit" -bg gray -borderwidth 2
  bind .title.quit <Button> {ceval WildCard_Exit()}
  pack .title.title -side left
  # pack .title.quit .title.fc .title.debug -side right  
  pack .title.quit -side right  


  # x axis range input fields
  frame .range -relief raised -bg gray -borderwidth 1
  label .range.l1 -text "X range min" -bg gray -borderwidth 2 -relief raised
  entry .range.min -textvariable xmin -width 15 -bg gray -borderwidth 2
  label .range.l2 -text "  max" -bg gray -borderwidth 2 -relief raised
  entry .range.max -textvariable xmax -width 15 -bg gray -borderwidth 2
  label .range.l3 -text "datan" -bg gray -borderwidth 2 -relief raised
  entry .range.datan -textvariable datan -width 8 -bg gray -borderwidth 2
  pack .range.l1 .range.min .range.l2 .range.max -side left
  pack .range.datan .range.l3 -side right

  # y axis range input fields
  frame .minmax -relief raised -bg gray -borderwidth 1
  label .minmax.l1 -text "Y range min" -bg gray -borderwidth 2 -relief raised
  entry .minmax.min -textvariable ymin -width 15 -bg gray -borderwidth 2
  label .minmax.l2 -text "  max" -bg gray -borderwidth 2 -relief raised
  entry .minmax.max -textvariable ymax -width 15 -bg gray -borderwidth 2
  checkbutton .minmax.auto -text autoscale -variable autoscale -bg gray
  pack .minmax.l1 .minmax.min .minmax.l2 .minmax.max -side left
  pack .minmax.auto -side right

  # formula input field 
  frame .formula -relief raised -bg gray -borderwidth 1
  label .formula.l -text "Formula" -bg gray -borderwidth 2 -relief raised
  entry .formula.e -textvariable f -width 40 -bg gray -borderwidth 2
  button .formula.d -text "draw" -bg gray -borderwidth 2
  button .formula.ex -text "example" -bg gray -borderwidth 2
  bind .formula.ex <Button> {ceval Examples()}
  pack .formula.l .formula.e .formula.ex -side left 
  pack .formula.d -side right

  # graphics canvas
  frame .gr -width 20c -height 10c -bg gray
  canvas .gr.c -height $yymax -width $xxmax -bg gray
  pack .gr.c -fill x

  # pack everything
  pack .title .range .minmax .formula .gr -side top -fill x

  # bind button and entry to draw graphics
  bind .formula.e <Return> {ceval DrawGraph(\"$f\", \
    \"$xmin\",\"$xmax\",\"$ymin\",\"$ymax\",\"$datan\",$autoscale)}
  bind .formula.d <Button> {ceval DrawGraph(\"$f\", \
    \"$xmin\",\"$xmax\",\"$ymin\",\"$ymax\",\"$datan\",$autoscale)}
  bind .range.min <Return> {ceval DrawGraph(\"$f\", \
    \"$xmin\",\"$xmax\",\"$ymin\",\"$ymax\",\"$datan\",$autoscale)}
  bind .range.max <Return> {ceval DrawGraph(\"$f\", \
    \"$xmin\",\"$xmax\",\"$ymin\",\"$ymax\",\"$datan\",$autoscale)}
  bind .minmax.min <Return> {ceval DrawGraph(\"$f\", \
    \"$xmin\",\"$xmax\",\"$ymin\",\"$ymax\",\"$datan\",$autoscale)}
  bind .minmax.max <Return> {ceval DrawGraph(\"$f\", \
    \"$xmin\",\"$xmax\",\"$ymin\",\"$ymax\",\"$datan\",$autoscale)}
  bind .range.datan <Return> {ceval DrawGraph(\"$f\", \
    \"$xmin\",\"$xmax\",\"$ymin\",\"$ymax\",\"$datan\",$autoscale)}
#pragma endtcl
}

// main function
int main() {
  CreateFrame();       // create graphics frame
  WildCard_MainLoop(); // start interaction
  return(0);
}
